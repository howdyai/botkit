{
  "reference": [
    {
      "name": "Botkit Core",
      "packageName": "botkit",
      "path": "reference/core.md",
      "classes": [
        {
          "id": 185,
          "name": "Botkit",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Create a new instance of Botkit to define the controller for a conversational app.\nTo connect Botkit to a chat platform, pass in a fully configured `adapter`.\nIf one is not specified, Botkit will expose an adapter for the Microsoft Bot Framework."
          },
          "children": [
            {
              "id": 199,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a new Botkit instance and optionally specify a platform-specific adapter.\nBy default, Botkit will create a [BotFrameworkAdapter](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadapter?view=botbuilder-ts-latest).",
                "text": "```javascript\nconst controller = new Botkit({\n     adapter: some_adapter,\n     webhook_uri: '/api/messages',\n});\n\ncontroller.on('message', async(bot, message) => {\n     // do something!\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 200,
                  "name": "new Botkit",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a new Botkit instance and optionally specify a platform-specific adapter.\nBy default, Botkit will create a [BotFrameworkAdapter](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadapter?view=botbuilder-ts-latest).",
                    "text": "```javascript\nconst controller = new Botkit({\n     adapter: some_adapter,\n     webhook_uri: '/api/messages',\n});\n\ncontroller.on('message', async(bot, message) => {\n     // do something!\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 201,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "Configuration for this instance of Botkit\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 137,
                        "name": "BotkitConfiguration"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 185,
                    "name": "Botkit"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 310,
                  "character": 28
                }
              ]
            },
            {
              "id": 198,
              "name": "PATH",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The path of the main Botkit SDK, used to generate relative paths"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 305,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 196,
              "name": "adapter",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Any BotBuilder-compatible adapter - defaults to a [BotFrameworkAdapter](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadapter?view=botbuilder-ts-latest)"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 295,
                  "character": 18
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 197,
              "name": "dialogSet",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A BotBuilder DialogSet that serves as the top level dialog container for the Botkit app"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 300,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "DialogSet"
              }
            },
            {
              "id": 195,
              "name": "http",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A direct reference to the underlying HTTP server object"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 290,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 193,
              "name": "storage",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "a BotBuilder storage driver - defaults to MemoryStorage"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 280,
                  "character": 18
                }
              ],
              "type": {
                "type": "reference",
                "name": "Storage"
              }
            },
            {
              "id": 186,
              "name": "version",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The current version of Botkit Core"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 240,
                  "character": 18
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "require('../package.json').version"
            },
            {
              "id": 194,
              "name": "webserver",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An Express webserver"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 285,
                  "character": 20
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 217,
              "name": "plugins",
              "kind": 262144,
              "kindString": "Accessor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Access plugin extension methods.\nAfter a plugin calls `controller.addPluginExtension('foo', extension_methods)`, the extension will then be available at\n`controller.plugins.foo`"
              },
              "getSignature": [
                {
                  "id": 218,
                  "name": "__get",
                  "kind": 524288,
                  "kindString": "Get signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Access plugin extension methods.\nAfter a plugin calls `controller.addPluginExtension('foo', extension_methods)`, the extension will then be available at\n`controller.plugins.foo`"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 219,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExported": true
                      },
                      "indexSignature": [
                        {
                          "id": 220,
                          "name": "__index",
                          "kind": 8192,
                          "kindString": "Index signature",
                          "flags": {
                            "isExported": true
                          },
                          "parameters": [
                            {
                              "id": 221,
                              "name": "key",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "string"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "core.ts",
                          "line": 572,
                          "character": 25
                        }
                      ]
                    }
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 572,
                  "character": 22
                }
              ]
            },
            {
              "id": 229,
              "name": "addDep",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 230,
                  "name": "addDep",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "(For use by Botkit plugins only) - Add a dependency to Botkit's bootup process that must be marked as completed using `completeDep()`.\nBotkit's `controller.ready()` function will not fire until all dependencies have been marked complete.",
                    "text": "For example, a plugin that needs to do an asynchronous task before Botkit proceeds might do:\n```javascript\ncontroller.addDep('my_async_plugin');\nsomethingAsync().then(function() {\n controller.completeDep('my_async_plugin');\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 231,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the dependency that is being loaded.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 623,
                  "character": 17
                }
              ]
            },
            {
              "id": 288,
              "name": "addDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 289,
                  "name": "addDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a dialog to the bot, making it accessible via `bot.beginDialog(dialog_id)`",
                    "text": "```javascript\n// Create a dialog -- `BotkitConversation` is just one way to create a dialog\nconst my_dialog = new BotkitConversation('my_dialog', controller);\nmy_dialog.say('Hello');\n\n// Add the dialog to the Botkit controller\ncontroller.addDialog(my_dialog);\n\n// Later on, trigger the dialog into action!\ncontroller.on('message', async(bot, message) => {\n     await bot.beginDialog('my_dialog');\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 290,
                      "name": "dialog",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A dialog to be added to the bot's dialog set\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "Dialog"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1178,
                  "character": 20
                }
              ]
            },
            {
              "id": 213,
              "name": "addPluginExtension",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 214,
                  "name": "addPluginExtension",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "(Plugins only) Extend Botkit's controller with new functionality and make it available globally via the controller object.",
                    "text": "```javascript\n\n// define the extension interface\nlet extension = {\n        stuff: () => { return 'stuff' }\n}\n\n// register the extension\ncontroller.addPluginExtension('foo', extension);\n\n// call extension\ncontroller.plugins.foo.stuff();\n\n\n```"
                  },
                  "parameters": [
                    {
                      "id": 215,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "name of plugin"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 216,
                      "name": "extension",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an object containing methods\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 562,
                  "character": 29
                }
              ]
            },
            {
              "id": 291,
              "name": "afterDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 292,
                  "name": "afterDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler to the end of a dialog.\nNOTE: bot worker cannot use bot.reply(), must use bot.send()",
                    "text": "[Learn more about handling end-of-conversation](../docs/conversations.md#handling-end-of-conversation)"
                  },
                  "parameters": [
                    {
                      "id": 293,
                      "name": "dialog",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the dialog object or the id of the dialog"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "name": "Dialog"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    {
                      "id": 294,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a handler function in the form `async(bot, dialog_results) => {}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 162,
                        "name": "BotkitHandler"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1205,
                  "character": 22
                }
              ]
            },
            {
              "id": 232,
              "name": "completeDep",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 233,
                  "name": "completeDep",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "(For use by plugins only) - Mark a bootup dependency as loaded and ready to use\nBotkit's `controller.ready()` function will not fire until all dependencies have been marked complete."
                  },
                  "parameters": [
                    {
                      "id": 234,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the dependency that has completed loading.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 634,
                  "character": 22
                }
              ]
            },
            {
              "id": 204,
              "name": "getConfig",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 205,
                  "name": "getConfig",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a value from the configuration.",
                    "text": "For example:\n```javascript\n// get entire config object\nlet config = controller.getConfig();\n\n// get a specific value from the config\nlet webhook_uri = controller.getConfig('webhook_uri');\n```\n",
                    "returns": "The value stored in the configuration (or null if absent)\n"
                  },
                  "parameters": [
                    {
                      "id": 206,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "The name of a value stored in the configuration"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 477,
                  "character": 20
                }
              ]
            },
            {
              "id": 226,
              "name": "getLocalView",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 227,
                  "name": "getLocalView",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Convert a local path from a plugin folder to a full path relative to the webserver's main views folder.\nAllows a plugin to bundle views/layouts and make them available to the webserver's renderer."
                  },
                  "parameters": [
                    {
                      "id": 228,
                      "name": "path_to_view",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "something like path.join(__dirname,'views')\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 601,
                  "character": 23
                }
              ]
            },
            {
              "id": 240,
              "name": "handleTurn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 241,
                  "name": "handleTurn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accepts the result of a BotBuilder adapter's `processActivity()` method and processes it into a Botkit-style message and BotWorker instance\nwhich is then used to test for triggers and emit events.\nNOTE: This method should only be used in custom adapters that receive messages through mechanisms other than the main webhook endpoint (such as those received via websocket, for example)"
                  },
                  "parameters": [
                    {
                      "id": 242,
                      "name": "turnContext",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a TurnContext representing an incoming message, typically created by an adapter's `processActivity()` method.\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 711,
                  "character": 27
                }
              ]
            },
            {
              "id": 246,
              "name": "hears",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 247,
                  "name": "hears",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Instruct your bot to listen for a pattern, and do something when that pattern is heard.\nPatterns will be \"heard\" only if the message is not already handled by an in-progress dialog.\nTo \"hear\" patterns _before_ dialogs are processed, use `controller.interrupts()` instead.",
                    "text": "For example:\n```javascript\n// listen for a simple keyword\ncontroller.hears('hello','message', async(bot, message) => {\n await bot.reply(message,'I heard you say hello.');\n});\n\n// listen for a regular expression\ncontroller.hears(new RegExp(/^[A-Z\\s]+$/), 'message', async(bot, message) => {\n await bot.reply(message,'I heard a message IN ALL CAPS.');\n});\n\n// listen using a function\ncontroller.hears(async (message) => { return (message.intent === 'hello') }, 'message', async(bot, message) => {\n await bot.reply(message,'This message matches the hello intent.');\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 248,
                      "name": "patterns",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "One or more string, regular expression, or test function"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "array",
                            "elementType": {
                              "type": "union",
                              "types": [
                                {
                                  "type": "intrinsic",
                                  "name": "string"
                                },
                                {
                                  "type": "reference",
                                  "name": "RegExp"
                                },
                                {
                                  "type": "reflection",
                                  "declaration": {
                                    "id": 249,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {
                                      "isExported": true
                                    },
                                    "signatures": [
                                      {
                                        "id": 250,
                                        "name": "__call",
                                        "kind": 4096,
                                        "kindString": "Call signature",
                                        "flags": {
                                          "isExported": true
                                        },
                                        "parameters": [
                                          {
                                            "id": 251,
                                            "name": "message",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                              "isExported": true
                                            },
                                            "type": {
                                              "type": "reference",
                                              "id": 152,
                                              "name": "BotkitMessage"
                                            }
                                          }
                                        ],
                                        "type": {
                                          "type": "reference",
                                          "typeArguments": [
                                            {
                                              "type": "intrinsic",
                                              "name": "boolean"
                                            }
                                          ],
                                          "name": "Promise"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "reference",
                            "name": "RegExp"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 252,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "signatures": [
                                {
                                  "id": 253,
                                  "name": "__call",
                                  "kind": 4096,
                                  "kindString": "Call signature",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "parameters": [
                                    {
                                      "id": 254,
                                      "name": "message",
                                      "kind": 32768,
                                      "kindString": "Parameter",
                                      "flags": {
                                        "isExported": true
                                      },
                                      "type": {
                                        "type": "reference",
                                        "id": 152,
                                        "name": "BotkitMessage"
                                      }
                                    }
                                  ],
                                  "type": {
                                    "type": "reference",
                                    "typeArguments": [
                                      {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                      }
                                    ],
                                    "name": "Promise"
                                  }
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "core.ts",
                                  "line": 912,
                                  "character": 115
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 255,
                      "name": "events",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A list of event types that should be evaluated for the given patterns"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 256,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a function that will be called should the pattern be matched\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 162,
                        "name": "BotkitHandler"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 912,
                  "character": 16
                }
              ]
            },
            {
              "id": 257,
              "name": "interrupts",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 258,
                  "name": "interrupts",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Instruct your bot to listen for a pattern, and do something when that pattern is heard.\nInterruptions work just like \"hears\" triggers, but fire _before_ the dialog system is engaged,\nand thus handlers will interrupt the normal flow of messages through the processing pipeline.",
                    "text": "```javascript\ncontroller.interrupts('help','message', async(bot, message) => {\n\n await bot.reply(message,'Before anything else, you need some help!')\n\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 259,
                      "name": "patterns",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "One or more string, regular expression, or test function"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "array",
                            "elementType": {
                              "type": "union",
                              "types": [
                                {
                                  "type": "intrinsic",
                                  "name": "string"
                                },
                                {
                                  "type": "reference",
                                  "name": "RegExp"
                                },
                                {
                                  "type": "reflection",
                                  "declaration": {
                                    "id": 260,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {
                                      "isExported": true
                                    },
                                    "signatures": [
                                      {
                                        "id": 261,
                                        "name": "__call",
                                        "kind": 4096,
                                        "kindString": "Call signature",
                                        "flags": {
                                          "isExported": true
                                        },
                                        "parameters": [
                                          {
                                            "id": 262,
                                            "name": "message",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                              "isExported": true
                                            },
                                            "type": {
                                              "type": "reference",
                                              "id": 152,
                                              "name": "BotkitMessage"
                                            }
                                          }
                                        ],
                                        "type": {
                                          "type": "reference",
                                          "typeArguments": [
                                            {
                                              "type": "intrinsic",
                                              "name": "boolean"
                                            }
                                          ],
                                          "name": "Promise"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "reference",
                            "name": "RegExp"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reference",
                              "name": "RegExp"
                            }
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 263,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "signatures": [
                                {
                                  "id": 264,
                                  "name": "__call",
                                  "kind": 4096,
                                  "kindString": "Call signature",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "parameters": [
                                    {
                                      "id": 265,
                                      "name": "message",
                                      "kind": 32768,
                                      "kindString": "Parameter",
                                      "flags": {
                                        "isExported": true
                                      },
                                      "type": {
                                        "type": "reference",
                                        "id": 152,
                                        "name": "BotkitMessage"
                                      }
                                    }
                                  ],
                                  "type": {
                                    "type": "reference",
                                    "typeArguments": [
                                      {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                      }
                                    ],
                                    "name": "Promise"
                                  }
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "core.ts",
                                  "line": 967,
                                  "character": 131
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 266,
                      "name": "events",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A list of event types that should be evaluated for the given patterns"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 267,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a function that will be called should the pattern be matched\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 162,
                        "name": "BotkitHandler"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 967,
                  "character": 21
                }
              ]
            },
            {
              "id": 281,
              "name": "loadModule",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 282,
                  "name": "loadModule",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load a Botkit feature module"
                  },
                  "parameters": [
                    {
                      "id": 283,
                      "name": "p",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "path to module file\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1121,
                  "character": 21
                }
              ]
            },
            {
              "id": 284,
              "name": "loadModules",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 285,
                  "name": "loadModules",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load all Botkit feature modules located in a given folder.",
                    "text": "```javascript\ncontroller.ready(() => {\n\n // load all modules from sub-folder features/\n controller.loadModules('./features');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 286,
                      "name": "p",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "path to a folder of module files"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 287,
                      "name": "exts",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the extensions that you would like to load (default: ['.js'])\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      "defaultValue": "['.js']"
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1150,
                  "character": 22
                }
              ]
            },
            {
              "id": 268,
              "name": "on",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 269,
                  "name": "on",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler function to one or more events.",
                    "text": "```javascript\ncontroller.on('conversationUpdate', async(bot, message) => {\n\n await bot.reply(message,'I received a conversationUpdate event.');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 270,
                      "name": "events",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "One or more event names"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 271,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a handler function that will fire whenever one of the named events is received.\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 162,
                        "name": "BotkitHandler"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1019,
                  "character": 13
                }
              ]
            },
            {
              "id": 222,
              "name": "publicFolder",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 223,
                  "name": "publicFolder",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Expose a folder to the web as a set of static files.\nUseful for plugins that need to bundle additional assets!",
                    "text": "```javascript\n// make content of the local public folder available at http://MYBOTURL/public/myplugin\ncontroller.publicFolder('/public/myplugin', __dirname + '/public);\n```"
                  },
                  "parameters": [
                    {
                      "id": 224,
                      "name": "alias",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the public alias ie /myfiles"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 225,
                      "name": "path",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the actual path something like `__dirname + '/public'`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 587,
                  "character": 23
                }
              ]
            },
            {
              "id": 235,
              "name": "ready",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 236,
                  "name": "ready",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Use `controller.ready()` to wrap any calls that require components loaded during the bootup process.\nThis will ensure that the calls will not be made until all of the components have successfully been initialized.",
                    "text": "For example:\n```javascript\ncontroller.ready(() => {\n\n  controller.loadModules(__dirname + '/features');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 237,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A function to run when Botkit is booted and ready to run.\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 238,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 239,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "core.ts",
                              "line": 676,
                              "character": 25
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 676,
                  "character": 16
                }
              ]
            },
            {
              "id": 243,
              "name": "saveState",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 244,
                  "name": "saveState",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Save the current conversation state pertaining to a given BotWorker's activities.\nNote: this is normally called internally and is only required when state changes happen outside of the normal processing flow."
                  },
                  "parameters": [
                    {
                      "id": 245,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a BotWorker instance created using `controller.spawn()`\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 2,
                        "name": "BotWorker"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 783,
                  "character": 26
                }
              ]
            },
            {
              "id": 202,
              "name": "shutdown",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 203,
                  "name": "shutdown",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Shutdown the webserver and prepare to terminate the app.\nCauses Botkit to first emit a special `shutdown` event, process any bound handlers, and then finally terminate the webserver.\nBind any necessary cleanup helpers to the shutdown event - for example, close the connection to mongo.",
                    "text": "```javascript\nawait controller.shutdown();\ncontroller.on('shutdown', async() => {\n     console.log('Bot is shutting down!');\n});\n```\n"
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 453,
                  "character": 25
                }
              ]
            },
            {
              "id": 277,
              "name": "spawn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 278,
                  "name": "spawn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a platform-specific BotWorker instance that can be used to respond to messages or generate new outbound messages.\nThe spawned `bot` contains all information required to process outbound messages and handle dialog state, and may also contain extensions\nfor handling platform-specific events or activities."
                  },
                  "parameters": [
                    {
                      "id": 279,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "Preferably receives a DialogContext, though can also receive a TurnContext. If excluded, must call `bot.changeContext(reference)` before calling any other method."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 280,
                      "name": "custom_adapter",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "type": {
                        "type": "reference",
                        "name": "BotAdapter"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 2,
                        "name": "BotWorker"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1075,
                  "character": 22
                }
              ]
            },
            {
              "id": 272,
              "name": "trigger",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 273,
                  "name": "trigger",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Trigger an event to be fired.  This will cause any bound handlers to be executed.\nNote: This is normally used internally, but can be used to emit custom events.",
                    "text": "```javascript\n// fire a custom event\ncontroller.trigger('my_custom_event', bot, message);\n\n// handle the custom event\ncontroller.on('my_custom_event', async(bot, message) => {\n //... do something\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 274,
                      "name": "event",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the name of the event"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 275,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "a BotWorker instance created using `controller.spawn()`"
                      },
                      "type": {
                        "type": "reference",
                        "id": 2,
                        "name": "BotWorker"
                      }
                    },
                    {
                      "id": 276,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "An incoming message or event\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 152,
                        "name": "BotkitMessage"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1051,
                  "character": 24
                }
              ]
            },
            {
              "id": 207,
              "name": "usePlugin",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 208,
                  "name": "usePlugin",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load a plugin module and bind all included middlewares to their respective endpoints."
                  },
                  "parameters": [
                    {
                      "id": 209,
                      "name": "plugin_or_function",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A plugin module in the form of function(botkit) {...} that returns {name, middlewares, init} or an object in the same form.\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 210,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "signatures": [
                                {
                                  "id": 211,
                                  "name": "__call",
                                  "kind": 4096,
                                  "kindString": "Call signature",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "parameters": [
                                    {
                                      "id": 212,
                                      "name": "botkit",
                                      "kind": 32768,
                                      "kindString": "Parameter",
                                      "flags": {
                                        "isExported": true
                                      },
                                      "type": {
                                        "type": "reference",
                                        "id": 185,
                                        "name": "Botkit"
                                      }
                                    }
                                  ],
                                  "type": {
                                    "type": "reference",
                                    "id": 173,
                                    "name": "BotkitPlugin"
                                  }
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "core.ts",
                                  "line": 489,
                                  "character": 40
                                }
                              ]
                            }
                          },
                          {
                            "type": "reference",
                            "id": 173,
                            "name": "BotkitPlugin"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 489,
                  "character": 20
                }
              ]
            },
            {
              "id": 187,
              "name": "middleware",
              "kind": 2097152,
              "kindString": "Object literal",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Middleware endpoints available for plugins and features to extend Botkit.\nEndpoints available are: spawn, ingest, receive, send.",
                "text": "To bind a middleware function to Botkit:\n```javascript\ncontroller.middleware.receive.use(function(bot, message, next) {\n\n // do something with bot or message\n\n // always call next, or your bot will freeze!\n next();\n});\n```\n"
              },
              "children": [
                {
                  "id": 189,
                  "name": "ingest",
                  "kind": 32,
                  "kindString": "Variable",
                  "flags": {
                    "isExported": true,
                    "isExternal": true
                  },
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 259,
                      "character": 14
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "defaultValue": "new Ware()"
                },
                {
                  "id": 192,
                  "name": "interpret",
                  "kind": 32,
                  "kindString": "Variable",
                  "flags": {
                    "isExported": true,
                    "isExternal": true
                  },
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 262,
                      "character": 17
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "defaultValue": "new Ware()"
                },
                {
                  "id": 191,
                  "name": "receive",
                  "kind": 32,
                  "kindString": "Variable",
                  "flags": {
                    "isExported": true,
                    "isExternal": true
                  },
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 261,
                      "character": 15
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "defaultValue": "new Ware()"
                },
                {
                  "id": 190,
                  "name": "send",
                  "kind": 32,
                  "kindString": "Variable",
                  "flags": {
                    "isExported": true,
                    "isExternal": true
                  },
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 260,
                      "character": 12
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "defaultValue": "new Ware()"
                },
                {
                  "id": 188,
                  "name": "spawn",
                  "kind": 32,
                  "kindString": "Variable",
                  "flags": {
                    "isExported": true,
                    "isExternal": true
                  },
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 258,
                      "character": 13
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "defaultValue": "new Ware()"
                }
              ],
              "groups": [
                {
                  "title": "Variables",
                  "kind": 32,
                  "children": [
                    189,
                    192,
                    191,
                    190,
                    188
                  ]
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 257,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                199
              ]
            },
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                198,
                196,
                197,
                195,
                193,
                186,
                194
              ]
            },
            {
              "title": "Accessors",
              "kind": 262144,
              "children": [
                217
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                229,
                288,
                213,
                291,
                232,
                204,
                226,
                240,
                246,
                257,
                281,
                284,
                268,
                222,
                235,
                243,
                202,
                277,
                272,
                207
              ]
            },
            {
              "title": "Object literals",
              "kind": 2097152,
              "children": [
                187
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core.ts",
              "line": 187,
              "character": 19
            }
          ],
          "props": [
            {
              "id": 198,
              "name": "PATH",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The path of the main Botkit SDK, used to generate relative paths"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 305,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 196,
              "name": "adapter",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Any BotBuilder-compatible adapter - defaults to a [BotFrameworkAdapter](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadapter?view=botbuilder-ts-latest)"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 295,
                  "character": 18
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 197,
              "name": "dialogSet",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A BotBuilder DialogSet that serves as the top level dialog container for the Botkit app"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 300,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "DialogSet"
              }
            },
            {
              "id": 195,
              "name": "http",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A direct reference to the underlying HTTP server object"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 290,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 193,
              "name": "storage",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "a BotBuilder storage driver - defaults to MemoryStorage"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 280,
                  "character": 18
                }
              ],
              "type": {
                "type": "reference",
                "name": "Storage"
              }
            },
            {
              "id": 186,
              "name": "version",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The current version of Botkit Core"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 240,
                  "character": 18
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "require('../package.json').version"
            },
            {
              "id": 194,
              "name": "webserver",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An Express webserver"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 285,
                  "character": 20
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 217,
              "name": "plugins",
              "kind": 262144,
              "kindString": "Accessor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Access plugin extension methods.\nAfter a plugin calls `controller.addPluginExtension('foo', extension_methods)`, the extension will then be available at\n`controller.plugins.foo`"
              },
              "getSignature": [
                {
                  "id": 218,
                  "name": "__get",
                  "kind": 524288,
                  "kindString": "Get signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Access plugin extension methods.\nAfter a plugin calls `controller.addPluginExtension('foo', extension_methods)`, the extension will then be available at\n`controller.plugins.foo`"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 219,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExported": true
                      },
                      "indexSignature": [
                        {
                          "id": 220,
                          "name": "__index",
                          "kind": 8192,
                          "kindString": "Index signature",
                          "flags": {
                            "isExported": true
                          },
                          "parameters": [
                            {
                              "id": 221,
                              "name": "key",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "string"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "core.ts",
                          "line": 572,
                          "character": 25
                        }
                      ]
                    }
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 572,
                  "character": 22
                }
              ]
            }
          ],
          "methods": [
            {
              "id": 229,
              "name": "addDep",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 230,
                  "name": "addDep",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "(For use by Botkit plugins only) - Add a dependency to Botkit's bootup process that must be marked as completed using `completeDep()`.\nBotkit's `controller.ready()` function will not fire until all dependencies have been marked complete.",
                    "text": "For example, a plugin that needs to do an asynchronous task before Botkit proceeds might do:\n```javascript\ncontroller.addDep('my_async_plugin');\nsomethingAsync().then(function() {\n controller.completeDep('my_async_plugin');\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 231,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the dependency that is being loaded.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 623,
                  "character": 17
                }
              ]
            },
            {
              "id": 288,
              "name": "addDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 289,
                  "name": "addDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a dialog to the bot, making it accessible via `bot.beginDialog(dialog_id)`",
                    "text": "```javascript\n// Create a dialog -- `BotkitConversation` is just one way to create a dialog\nconst my_dialog = new BotkitConversation('my_dialog', controller);\nmy_dialog.say('Hello');\n\n// Add the dialog to the Botkit controller\ncontroller.addDialog(my_dialog);\n\n// Later on, trigger the dialog into action!\ncontroller.on('message', async(bot, message) => {\n     await bot.beginDialog('my_dialog');\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 290,
                      "name": "dialog",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A dialog to be added to the bot's dialog set\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "Dialog"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1178,
                  "character": 20
                }
              ]
            },
            {
              "id": 213,
              "name": "addPluginExtension",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 214,
                  "name": "addPluginExtension",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "(Plugins only) Extend Botkit's controller with new functionality and make it available globally via the controller object.",
                    "text": "```javascript\n\n// define the extension interface\nlet extension = {\n        stuff: () => { return 'stuff' }\n}\n\n// register the extension\ncontroller.addPluginExtension('foo', extension);\n\n// call extension\ncontroller.plugins.foo.stuff();\n\n\n```"
                  },
                  "parameters": [
                    {
                      "id": 215,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "name of plugin"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 216,
                      "name": "extension",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an object containing methods\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 562,
                  "character": 29
                }
              ]
            },
            {
              "id": 291,
              "name": "afterDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 292,
                  "name": "afterDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler to the end of a dialog.\nNOTE: bot worker cannot use bot.reply(), must use bot.send()",
                    "text": "[Learn more about handling end-of-conversation](../docs/conversations.md#handling-end-of-conversation)"
                  },
                  "parameters": [
                    {
                      "id": 293,
                      "name": "dialog",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the dialog object or the id of the dialog"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "name": "Dialog"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    {
                      "id": 294,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a handler function in the form `async(bot, dialog_results) => {}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 162,
                        "name": "BotkitHandler"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1205,
                  "character": 22
                }
              ]
            },
            {
              "id": 232,
              "name": "completeDep",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 233,
                  "name": "completeDep",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "(For use by plugins only) - Mark a bootup dependency as loaded and ready to use\nBotkit's `controller.ready()` function will not fire until all dependencies have been marked complete."
                  },
                  "parameters": [
                    {
                      "id": 234,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the dependency that has completed loading.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 634,
                  "character": 22
                }
              ]
            },
            {
              "id": 204,
              "name": "getConfig",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 205,
                  "name": "getConfig",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a value from the configuration.",
                    "text": "For example:\n```javascript\n// get entire config object\nlet config = controller.getConfig();\n\n// get a specific value from the config\nlet webhook_uri = controller.getConfig('webhook_uri');\n```\n",
                    "returns": "The value stored in the configuration (or null if absent)\n"
                  },
                  "parameters": [
                    {
                      "id": 206,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "The name of a value stored in the configuration"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 477,
                  "character": 20
                }
              ]
            },
            {
              "id": 226,
              "name": "getLocalView",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 227,
                  "name": "getLocalView",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Convert a local path from a plugin folder to a full path relative to the webserver's main views folder.\nAllows a plugin to bundle views/layouts and make them available to the webserver's renderer."
                  },
                  "parameters": [
                    {
                      "id": 228,
                      "name": "path_to_view",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "something like path.join(__dirname,'views')\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 601,
                  "character": 23
                }
              ]
            },
            {
              "id": 240,
              "name": "handleTurn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 241,
                  "name": "handleTurn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accepts the result of a BotBuilder adapter's `processActivity()` method and processes it into a Botkit-style message and BotWorker instance\nwhich is then used to test for triggers and emit events.\nNOTE: This method should only be used in custom adapters that receive messages through mechanisms other than the main webhook endpoint (such as those received via websocket, for example)"
                  },
                  "parameters": [
                    {
                      "id": 242,
                      "name": "turnContext",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a TurnContext representing an incoming message, typically created by an adapter's `processActivity()` method.\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 711,
                  "character": 27
                }
              ]
            },
            {
              "id": 246,
              "name": "hears",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 247,
                  "name": "hears",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Instruct your bot to listen for a pattern, and do something when that pattern is heard.\nPatterns will be \"heard\" only if the message is not already handled by an in-progress dialog.\nTo \"hear\" patterns _before_ dialogs are processed, use `controller.interrupts()` instead.",
                    "text": "For example:\n```javascript\n// listen for a simple keyword\ncontroller.hears('hello','message', async(bot, message) => {\n await bot.reply(message,'I heard you say hello.');\n});\n\n// listen for a regular expression\ncontroller.hears(new RegExp(/^[A-Z\\s]+$/), 'message', async(bot, message) => {\n await bot.reply(message,'I heard a message IN ALL CAPS.');\n});\n\n// listen using a function\ncontroller.hears(async (message) => { return (message.intent === 'hello') }, 'message', async(bot, message) => {\n await bot.reply(message,'This message matches the hello intent.');\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 248,
                      "name": "patterns",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "One or more string, regular expression, or test function"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "array",
                            "elementType": {
                              "type": "union",
                              "types": [
                                {
                                  "type": "intrinsic",
                                  "name": "string"
                                },
                                {
                                  "type": "reference",
                                  "name": "RegExp"
                                },
                                {
                                  "type": "reflection",
                                  "declaration": {
                                    "id": 249,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {
                                      "isExported": true
                                    },
                                    "signatures": [
                                      {
                                        "id": 250,
                                        "name": "__call",
                                        "kind": 4096,
                                        "kindString": "Call signature",
                                        "flags": {
                                          "isExported": true
                                        },
                                        "parameters": [
                                          {
                                            "id": 251,
                                            "name": "message",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                              "isExported": true
                                            },
                                            "type": {
                                              "type": "reference",
                                              "id": 152,
                                              "name": "BotkitMessage"
                                            }
                                          }
                                        ],
                                        "type": {
                                          "type": "reference",
                                          "typeArguments": [
                                            {
                                              "type": "intrinsic",
                                              "name": "boolean"
                                            }
                                          ],
                                          "name": "Promise"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "reference",
                            "name": "RegExp"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 252,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "signatures": [
                                {
                                  "id": 253,
                                  "name": "__call",
                                  "kind": 4096,
                                  "kindString": "Call signature",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "parameters": [
                                    {
                                      "id": 254,
                                      "name": "message",
                                      "kind": 32768,
                                      "kindString": "Parameter",
                                      "flags": {
                                        "isExported": true
                                      },
                                      "type": {
                                        "type": "reference",
                                        "id": 152,
                                        "name": "BotkitMessage"
                                      }
                                    }
                                  ],
                                  "type": {
                                    "type": "reference",
                                    "typeArguments": [
                                      {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                      }
                                    ],
                                    "name": "Promise"
                                  }
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "core.ts",
                                  "line": 912,
                                  "character": 115
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 255,
                      "name": "events",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A list of event types that should be evaluated for the given patterns"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 256,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a function that will be called should the pattern be matched\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 162,
                        "name": "BotkitHandler"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 912,
                  "character": 16
                }
              ]
            },
            {
              "id": 257,
              "name": "interrupts",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 258,
                  "name": "interrupts",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Instruct your bot to listen for a pattern, and do something when that pattern is heard.\nInterruptions work just like \"hears\" triggers, but fire _before_ the dialog system is engaged,\nand thus handlers will interrupt the normal flow of messages through the processing pipeline.",
                    "text": "```javascript\ncontroller.interrupts('help','message', async(bot, message) => {\n\n await bot.reply(message,'Before anything else, you need some help!')\n\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 259,
                      "name": "patterns",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "One or more string, regular expression, or test function"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "array",
                            "elementType": {
                              "type": "union",
                              "types": [
                                {
                                  "type": "intrinsic",
                                  "name": "string"
                                },
                                {
                                  "type": "reference",
                                  "name": "RegExp"
                                },
                                {
                                  "type": "reflection",
                                  "declaration": {
                                    "id": 260,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {
                                      "isExported": true
                                    },
                                    "signatures": [
                                      {
                                        "id": 261,
                                        "name": "__call",
                                        "kind": 4096,
                                        "kindString": "Call signature",
                                        "flags": {
                                          "isExported": true
                                        },
                                        "parameters": [
                                          {
                                            "id": 262,
                                            "name": "message",
                                            "kind": 32768,
                                            "kindString": "Parameter",
                                            "flags": {
                                              "isExported": true
                                            },
                                            "type": {
                                              "type": "reference",
                                              "id": 152,
                                              "name": "BotkitMessage"
                                            }
                                          }
                                        ],
                                        "type": {
                                          "type": "reference",
                                          "typeArguments": [
                                            {
                                              "type": "intrinsic",
                                              "name": "boolean"
                                            }
                                          ],
                                          "name": "Promise"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "reference",
                            "name": "RegExp"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reference",
                              "name": "RegExp"
                            }
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 263,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "signatures": [
                                {
                                  "id": 264,
                                  "name": "__call",
                                  "kind": 4096,
                                  "kindString": "Call signature",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "parameters": [
                                    {
                                      "id": 265,
                                      "name": "message",
                                      "kind": 32768,
                                      "kindString": "Parameter",
                                      "flags": {
                                        "isExported": true
                                      },
                                      "type": {
                                        "type": "reference",
                                        "id": 152,
                                        "name": "BotkitMessage"
                                      }
                                    }
                                  ],
                                  "type": {
                                    "type": "reference",
                                    "typeArguments": [
                                      {
                                        "type": "intrinsic",
                                        "name": "boolean"
                                      }
                                    ],
                                    "name": "Promise"
                                  }
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "core.ts",
                                  "line": 967,
                                  "character": 131
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 266,
                      "name": "events",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A list of event types that should be evaluated for the given patterns"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 267,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a function that will be called should the pattern be matched\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 162,
                        "name": "BotkitHandler"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 967,
                  "character": 21
                }
              ]
            },
            {
              "id": 281,
              "name": "loadModule",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 282,
                  "name": "loadModule",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load a Botkit feature module"
                  },
                  "parameters": [
                    {
                      "id": 283,
                      "name": "p",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "path to module file\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1121,
                  "character": 21
                }
              ]
            },
            {
              "id": 284,
              "name": "loadModules",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 285,
                  "name": "loadModules",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load all Botkit feature modules located in a given folder.",
                    "text": "```javascript\ncontroller.ready(() => {\n\n // load all modules from sub-folder features/\n controller.loadModules('./features');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 286,
                      "name": "p",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "path to a folder of module files"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 287,
                      "name": "exts",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the extensions that you would like to load (default: ['.js'])\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      },
                      "defaultValue": "['.js']"
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1150,
                  "character": 22
                }
              ]
            },
            {
              "id": 268,
              "name": "on",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 269,
                  "name": "on",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler function to one or more events.",
                    "text": "```javascript\ncontroller.on('conversationUpdate', async(bot, message) => {\n\n await bot.reply(message,'I received a conversationUpdate event.');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 270,
                      "name": "events",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "One or more event names"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 271,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a handler function that will fire whenever one of the named events is received.\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 162,
                        "name": "BotkitHandler"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1019,
                  "character": 13
                }
              ]
            },
            {
              "id": 222,
              "name": "publicFolder",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 223,
                  "name": "publicFolder",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Expose a folder to the web as a set of static files.\nUseful for plugins that need to bundle additional assets!",
                    "text": "```javascript\n// make content of the local public folder available at http://MYBOTURL/public/myplugin\ncontroller.publicFolder('/public/myplugin', __dirname + '/public);\n```"
                  },
                  "parameters": [
                    {
                      "id": 224,
                      "name": "alias",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the public alias ie /myfiles"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 225,
                      "name": "path",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the actual path something like `__dirname + '/public'`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 587,
                  "character": 23
                }
              ]
            },
            {
              "id": 235,
              "name": "ready",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 236,
                  "name": "ready",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Use `controller.ready()` to wrap any calls that require components loaded during the bootup process.\nThis will ensure that the calls will not be made until all of the components have successfully been initialized.",
                    "text": "For example:\n```javascript\ncontroller.ready(() => {\n\n  controller.loadModules(__dirname + '/features');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 237,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A function to run when Botkit is booted and ready to run.\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 238,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 239,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "core.ts",
                              "line": 676,
                              "character": 25
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 676,
                  "character": 16
                }
              ]
            },
            {
              "id": 243,
              "name": "saveState",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 244,
                  "name": "saveState",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Save the current conversation state pertaining to a given BotWorker's activities.\nNote: this is normally called internally and is only required when state changes happen outside of the normal processing flow."
                  },
                  "parameters": [
                    {
                      "id": 245,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a BotWorker instance created using `controller.spawn()`\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 2,
                        "name": "BotWorker"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 783,
                  "character": 26
                }
              ]
            },
            {
              "id": 202,
              "name": "shutdown",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 203,
                  "name": "shutdown",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Shutdown the webserver and prepare to terminate the app.\nCauses Botkit to first emit a special `shutdown` event, process any bound handlers, and then finally terminate the webserver.\nBind any necessary cleanup helpers to the shutdown event - for example, close the connection to mongo.",
                    "text": "```javascript\nawait controller.shutdown();\ncontroller.on('shutdown', async() => {\n     console.log('Bot is shutting down!');\n});\n```\n"
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 453,
                  "character": 25
                }
              ]
            },
            {
              "id": 277,
              "name": "spawn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 278,
                  "name": "spawn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a platform-specific BotWorker instance that can be used to respond to messages or generate new outbound messages.\nThe spawned `bot` contains all information required to process outbound messages and handle dialog state, and may also contain extensions\nfor handling platform-specific events or activities."
                  },
                  "parameters": [
                    {
                      "id": 279,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "Preferably receives a DialogContext, though can also receive a TurnContext. If excluded, must call `bot.changeContext(reference)` before calling any other method."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 280,
                      "name": "custom_adapter",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "type": {
                        "type": "reference",
                        "name": "BotAdapter"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 2,
                        "name": "BotWorker"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1075,
                  "character": 22
                }
              ]
            },
            {
              "id": 272,
              "name": "trigger",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 273,
                  "name": "trigger",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Trigger an event to be fired.  This will cause any bound handlers to be executed.\nNote: This is normally used internally, but can be used to emit custom events.",
                    "text": "```javascript\n// fire a custom event\ncontroller.trigger('my_custom_event', bot, message);\n\n// handle the custom event\ncontroller.on('my_custom_event', async(bot, message) => {\n //... do something\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 274,
                      "name": "event",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the name of the event"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 275,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "a BotWorker instance created using `controller.spawn()`"
                      },
                      "type": {
                        "type": "reference",
                        "id": 2,
                        "name": "BotWorker"
                      }
                    },
                    {
                      "id": 276,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "An incoming message or event\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 152,
                        "name": "BotkitMessage"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 1051,
                  "character": 24
                }
              ]
            },
            {
              "id": 207,
              "name": "usePlugin",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 208,
                  "name": "usePlugin",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load a plugin module and bind all included middlewares to their respective endpoints."
                  },
                  "parameters": [
                    {
                      "id": 209,
                      "name": "plugin_or_function",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A plugin module in the form of function(botkit) {...} that returns {name, middlewares, init} or an object in the same form.\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 210,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "signatures": [
                                {
                                  "id": 211,
                                  "name": "__call",
                                  "kind": 4096,
                                  "kindString": "Call signature",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "parameters": [
                                    {
                                      "id": 212,
                                      "name": "botkit",
                                      "kind": 32768,
                                      "kindString": "Parameter",
                                      "flags": {
                                        "isExported": true
                                      },
                                      "type": {
                                        "type": "reference",
                                        "id": 185,
                                        "name": "Botkit"
                                      }
                                    }
                                  ],
                                  "type": {
                                    "type": "reference",
                                    "id": 173,
                                    "name": "BotkitPlugin"
                                  }
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "core.ts",
                                  "line": 489,
                                  "character": 40
                                }
                              ]
                            }
                          },
                          {
                            "type": "reference",
                            "id": 173,
                            "name": "BotkitPlugin"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 489,
                  "character": 20
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 199,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a new Botkit instance and optionally specify a platform-specific adapter.\nBy default, Botkit will create a [BotFrameworkAdapter](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadapter?view=botbuilder-ts-latest).",
                "text": "```javascript\nconst controller = new Botkit({\n     adapter: some_adapter,\n     webhook_uri: '/api/messages',\n});\n\ncontroller.on('message', async(bot, message) => {\n     // do something!\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 200,
                  "name": "new Botkit",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a new Botkit instance and optionally specify a platform-specific adapter.\nBy default, Botkit will create a [BotFrameworkAdapter](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadapter?view=botbuilder-ts-latest).",
                    "text": "```javascript\nconst controller = new Botkit({\n     adapter: some_adapter,\n     webhook_uri: '/api/messages',\n});\n\ncontroller.on('message', async(bot, message) => {\n     // do something!\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 201,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "Configuration for this instance of Botkit\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 137,
                        "name": "BotkitConfiguration"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 185,
                    "name": "Botkit"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 310,
                  "character": 28
                }
              ]
            }
          ]
        },
        {
          "id": 114,
          "name": "BotkitBotFrameworkAdapter",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This class extends the [BotFrameworkAdapter](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadapter?view=botbuilder-ts-latest) with a few additional features to support Microsoft Teams.\n* Changes userAgent to reflect Botkit instead of BotBuilder\n* Adds getChannels() (MS Teams)\n* Adds middleware for adjusting location of tenant id field (MS Teams)"
          },
          "children": [
            {
              "id": 115,
              "name": "botkit_worker",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "adapter.ts",
                  "line": 30,
                  "character": 24
                }
              ],
              "type": {
                "type": "reference",
                "id": 52,
                "name": "TeamsBotWorker"
              },
              "defaultValue": "TeamsBotWorker"
            },
            {
              "id": 122,
              "name": "getChannels",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 123,
                  "name": "getChannels",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the list of channels in a MS Teams team.\nCan only be called with a TurnContext that originated in a team conversation - 1:1 conversations happen _outside a team_ and thus do not contain the required information to call this API.",
                    "returns": "an array of channels in the format [{name: string, id: string}]\n"
                  },
                  "parameters": [
                    {
                      "id": 124,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext object representing a message or event from a user in Teams"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ChannelInfo"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "adapter.ts",
                  "line": 60,
                  "character": 28
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                115
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                122
              ]
            }
          ],
          "sources": [
            {
              "fileName": "adapter.ts",
              "line": 29,
              "character": 38
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 115,
              "name": "botkit_worker",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "adapter.ts",
                  "line": 30,
                  "character": 24
                }
              ],
              "type": {
                "type": "reference",
                "id": 52,
                "name": "TeamsBotWorker"
              },
              "defaultValue": "TeamsBotWorker"
            }
          ],
          "methods": [
            {
              "id": 122,
              "name": "getChannels",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 123,
                  "name": "getChannels",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the list of channels in a MS Teams team.\nCan only be called with a TurnContext that originated in a team conversation - 1:1 conversations happen _outside a team_ and thus do not contain the required information to call this API.",
                    "returns": "an array of channels in the format [{name: string, id: string}]\n"
                  },
                  "parameters": [
                    {
                      "id": 124,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext object representing a message or event from a user in Teams"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ChannelInfo"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "adapter.ts",
                  "line": 60,
                  "character": 28
                }
              ]
            }
          ],
          "constructors": []
        },
        {
          "id": 52,
          "name": "TeamsBotWorker",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This is a specialized version of [Botkit's core BotWorker class](core.md#BotWorker) that includes additional methods for interacting with Microsoft Teams.\nIt includes all functionality from the base class, as well as the extension methods below.\nThis BotWorker is used with the built-in Bot Framework adapter."
          },
          "children": [
            {
              "id": 53,
              "name": "teams",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Grants access to the TeamsInfo helper class\nSee: https://docs.microsoft.com/en-us/javascript/api/botbuilder/teamsinfo?view=botbuilder-ts-latest"
              },
              "sources": [
                {
                  "fileName": "teamsHelpers.ts",
                  "line": 23,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "TeamsInfo"
              },
              "defaultValue": "TeamsInfo"
            },
            {
              "id": 54,
              "name": "replyWithTaskInfo",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 55,
                  "name": "replyWithTaskInfo",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to a Teams task module task/fetch or task/submit with a task module response.\nSee https://docs.microsoft.com/en-us/microsoftteams/platform/task-modules-and-cards/task-modules/task-modules-bots"
                  },
                  "parameters": [
                    {
                      "id": 56,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "reference",
                        "id": 152,
                        "name": "BotkitMessage"
                      }
                    },
                    {
                      "id": 57,
                      "name": "taskInfo",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an object in the form {type, value}\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "teamsHelpers.ts",
                  "line": 31,
                  "character": 32
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                53
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                54
              ]
            }
          ],
          "sources": [
            {
              "fileName": "teamsHelpers.ts",
              "line": 18,
              "character": 27
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "id": 2,
              "name": "BotWorker"
            }
          ],
          "props": [
            {
              "id": 53,
              "name": "teams",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Grants access to the TeamsInfo helper class\nSee: https://docs.microsoft.com/en-us/javascript/api/botbuilder/teamsinfo?view=botbuilder-ts-latest"
              },
              "sources": [
                {
                  "fileName": "teamsHelpers.ts",
                  "line": 23,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "TeamsInfo"
              },
              "defaultValue": "TeamsInfo"
            }
          ],
          "methods": [
            {
              "id": 54,
              "name": "replyWithTaskInfo",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 55,
                  "name": "replyWithTaskInfo",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to a Teams task module task/fetch or task/submit with a task module response.\nSee https://docs.microsoft.com/en-us/microsoftteams/platform/task-modules-and-cards/task-modules/task-modules-bots"
                  },
                  "parameters": [
                    {
                      "id": 56,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "reference",
                        "id": 152,
                        "name": "BotkitMessage"
                      }
                    },
                    {
                      "id": 57,
                      "name": "taskInfo",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an object in the form {type, value}\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "teamsHelpers.ts",
                  "line": 31,
                  "character": 32
                }
              ]
            }
          ],
          "constructors": []
        },
        {
          "id": 2,
          "name": "BotWorker",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "A base class for a `bot` instance, an object that contains the information and functionality for taking action in response to an incoming message.\nNote that adapters are likely to extend this class with additional platform-specific methods - refer to the adapter documentation for these extensions."
          },
          "children": [
            {
              "id": 3,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a new BotWorker instance. Do not call this directly - instead, use [controller.spawn()](#spawn)."
              },
              "signatures": [
                {
                  "id": 4,
                  "name": "new BotWorker",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a new BotWorker instance. Do not call this directly - instead, use [controller.spawn()](#spawn)."
                  },
                  "parameters": [
                    {
                      "id": 5,
                      "name": "controller",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "A pointer to the main Botkit controller"
                      },
                      "type": {
                        "type": "reference",
                        "id": 185,
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 6,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "An object typically containing { dialogContext, reference, context, activity }\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "BotWorker"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 18,
                  "character": 25
                }
              ]
            },
            {
              "id": 7,
              "name": "controller",
              "kind": 262144,
              "kindString": "Accessor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Get a reference to the main Botkit controller."
              },
              "getSignature": [
                {
                  "id": 8,
                  "name": "__get",
                  "kind": 524288,
                  "kindString": "Get signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a reference to the main Botkit controller."
                  },
                  "type": {
                    "type": "reference",
                    "id": 185,
                    "name": "Botkit"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 35,
                  "character": 25
                }
              ]
            },
            {
              "id": 19,
              "name": "beginDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 20,
                  "name": "beginDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Begin a pre-defined dialog by specifying its id. The dialog will be started in the same context (same user, same channel) in which the original incoming message was received.\n[See \"Using Dialogs\" in the core documentation.](../index.md#using-dialogs)",
                    "text": "```javascript\ncontroller.hears('hello', 'message', async(bot, message) => {\n     await bot.beginDialog(GREETINGS_DIALOG);\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 21,
                      "name": "id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "id of dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 22,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "object containing options to be passed into the dialog\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 153,
                  "character": 28
                }
              ]
            },
            {
              "id": 23,
              "name": "cancelAllDialogs",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 24,
                  "name": "cancelAllDialogs",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Cancel any and all active dialogs for the current user/context."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "DialogTurnResult"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 172,
                  "character": 33
                }
              ]
            },
            {
              "id": 36,
              "name": "changeContext",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 37,
                  "name": "changeContext",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Alter the context in which a bot instance will send messages.\nUse this method to create or adjust a bot instance so that it can send messages to a predefined user/channel combination.",
                    "text": "```javascript\n// get the reference field and store it.\nconst saved_reference = message.reference;\n\n// later on...\nlet bot = await controller.spawn();\nbot.changeContext(saved_reference);\nbot.say('Hello!');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 38,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A [ConversationReference](https://docs.microsoft.com/en-us/javascript/api/botframework-schema/conversationreference?view=botbuilder-ts-latest), most likely captured from an incoming message and stored for use in proactive messaging scenarios.\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 2,
                        "name": "BotWorker"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 250,
                  "character": 30
                }
              ]
            },
            {
              "id": 42,
              "name": "ensureMessageFormat",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 43,
                  "name": "ensureMessageFormat",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Take a crudely-formed Botkit message with any sort of field (may just be a string, may be a partial message object)\nand map it into a beautiful BotFramework Activity.\nAny fields not found in the Activity definition will be moved to activity.channelData.",
                    "returns": "a properly formed Activity object\n",
                    "tags": [
                      {
                        "tag": "params",
                        "text": "message a string or partial outgoing message object"
                      }
                    ]
                  },
                  "parameters": [
                    {
                      "id": 44,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 152,
                                "name": "BotkitMessage"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "Activity"
                      }
                    ],
                    "name": "Partial"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 332,
                  "character": 30
                }
              ]
            },
            {
              "id": 25,
              "name": "getActiveDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 26,
                  "name": "getActiveDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a reference to the active dialog",
                    "returns": "a reference to the active dialog or undefined if no dialog is active\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Dialog"
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 182,
                  "character": 26
                }
              ]
            },
            {
              "id": 9,
              "name": "getConfig",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 10,
                  "name": "getConfig",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a value from the BotWorker's configuration.",
                    "text": "```javascript\nlet original_context = bot.getConfig('context');\nawait original_context.sendActivity('send directly using the adapter instead of Botkit');\n```\n",
                    "returns": "The value stored in the configuration (or null if absent)\n"
                  },
                  "parameters": [
                    {
                      "id": 11,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "The name of a value stored in the configuration"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 50,
                  "character": 20
                }
              ]
            },
            {
              "id": 27,
              "name": "hasActiveDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 28,
                  "name": "hasActiveDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Check if any dialog is active or not",
                    "returns": "true if there is an active dialog, otherwise false\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 190,
                  "character": 26
                }
              ]
            },
            {
              "id": 48,
              "name": "httpBody",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 49,
                  "name": "httpBody",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the http response body for this turn.\nUse this to define the response value when the platform requires a synchronous response to the incoming webhook.",
                    "text": "Example handling of a /slash command from Slack:\n```javascript\ncontroller.on('slash_command', async(bot, message) => {\n bot.httpBody('This is a reply to the slash command.');\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 50,
                      "name": "body",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "(any) a value that will be returned as the http response body\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 432,
                  "character": 19
                }
              ]
            },
            {
              "id": 45,
              "name": "httpStatus",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 46,
                  "name": "httpStatus",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the http response status code for this turn",
                    "text": "```javascript\ncontroller.on('event', async(bot, message) => {\n  // respond with a 500 error code for some reason!\n  bot.httpStatus(500);\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 47,
                      "name": "status",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a valid http status code like 200 202 301 500 etc\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 415,
                  "character": 21
                }
              ]
            },
            {
              "id": 29,
              "name": "isDialogActive",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 30,
                  "name": "isDialogActive",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Check to see if a given dialog is currently active in the stack",
                    "returns": "true if dialog with id is located anywhere in the dialog stack\n"
                  },
                  "parameters": [
                    {
                      "id": 31,
                      "name": "id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The id of a dialog to look for in the dialog stack"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 199,
                  "character": 25
                }
              ]
            },
            {
              "id": 32,
              "name": "replaceDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 33,
                  "name": "replaceDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Replace any active dialogs with a new a pre-defined dialog by specifying its id. The dialog will be started in the same context (same user, same channel) in which the original incoming message was received.\n[See \"Using Dialogs\" in the core documentation.](../index.md#using-dialogs)",
                    "text": "```javascript\ncontroller.hears('hello', 'message', async(bot, message) => {\n     await bot.replaceDialog(GREETINGS_DIALOG);\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 34,
                      "name": "id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "id of dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 35,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "object containing options to be passed into the dialog\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 218,
                  "character": 30
                }
              ]
            },
            {
              "id": 15,
              "name": "reply",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 16,
                  "name": "reply",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to an incoming message.\nMessage will be sent using the context of the source message, which may in some cases be different than the context used to spawn the bot.",
                    "text": "Note that like [bot.say()](#say), `reply()` can take a string or a message object.\n\n```javascript\ncontroller.on('event', async(bot, message) => {\n\n await bot.reply(message, 'I received an event and am replying to it.');\n\n});\n```\n",
                    "returns": "Return value will contain the results of the send action, typically `{id: <id of message>}`\n"
                  },
                  "parameters": [
                    {
                      "id": 17,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message, usually passed in to a handler function"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "id": 152,
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 18,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A string containing the text of a reply, or more fully formed message object"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 152,
                                "name": "BotkitMessage"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 130,
                  "character": 22
                }
              ]
            },
            {
              "id": 12,
              "name": "say",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 13,
                  "name": "say",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Send a message using whatever context the `bot` was spawned in or set using [changeContext()](#changecontext) --\nor more likely, one of the platform-specific helpers like\n[startPrivateConversation()](../reference/slack.md#startprivateconversation) (Slack),\n[startConversationWithUser()](../reference/twilio-sms.md#startconversationwithuser) (Twilio SMS),\nand [startConversationWithUser()](../reference/facebook.md#startconversationwithuser) (Facebook Messenger).\nBe sure to check the platform documentation for others - most adapters include at least one.",
                    "text": "Simple use in event handler (acts the same as bot.reply)\n```javascript\ncontroller.on('event', async(bot, message) => {\n\n await bot.say('I received an event!');\n\n});\n```\n\nUse with a freshly spawned bot and bot.changeContext:\n```javascript\nlet bot = controller.spawn(OPTIONS);\nbot.changeContext(REFERENCE);\nbot.say('ALERT! I have some news.');\n```\n\nUse with multi-field message object:\n```javascript\ncontroller.on('event', async(bot, message) => {\n     bot.say({\n         text: 'I heard an event',\n         attachments: [\n             title: message.type,\n             text: `The message was of type ${ message.type }`,\n             // ...\n         ]\n     });\n});\n```\n",
                    "returns": "Return value will contain the results of the send action, typically `{id: <id of message>}`\n"
                  },
                  "parameters": [
                    {
                      "id": 14,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A string containing the text of a reply, or more fully formed message object"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 152,
                                "name": "BotkitMessage"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 99,
                  "character": 20
                }
              ]
            },
            {
              "id": 39,
              "name": "startConversationWithUser",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 40,
                  "name": "startConversationWithUser",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "parameters": [
                    {
                      "id": 41,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 274,
                  "character": 42
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                3
              ]
            },
            {
              "title": "Accessors",
              "kind": 262144,
              "children": [
                7
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                19,
                23,
                36,
                42,
                25,
                9,
                27,
                48,
                45,
                29,
                32,
                15,
                12,
                39
              ]
            }
          ],
          "sources": [
            {
              "fileName": "botworker.ts",
              "line": 16,
              "character": 22
            }
          ],
          "extendedBy": [
            {
              "type": "reference",
              "id": 52,
              "name": "TeamsBotWorker"
            }
          ],
          "props": [
            {
              "id": 7,
              "name": "controller",
              "kind": 262144,
              "kindString": "Accessor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Get a reference to the main Botkit controller."
              },
              "getSignature": [
                {
                  "id": 8,
                  "name": "__get",
                  "kind": 524288,
                  "kindString": "Get signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a reference to the main Botkit controller."
                  },
                  "type": {
                    "type": "reference",
                    "id": 185,
                    "name": "Botkit"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 35,
                  "character": 25
                }
              ]
            }
          ],
          "methods": [
            {
              "id": 19,
              "name": "beginDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 20,
                  "name": "beginDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Begin a pre-defined dialog by specifying its id. The dialog will be started in the same context (same user, same channel) in which the original incoming message was received.\n[See \"Using Dialogs\" in the core documentation.](../index.md#using-dialogs)",
                    "text": "```javascript\ncontroller.hears('hello', 'message', async(bot, message) => {\n     await bot.beginDialog(GREETINGS_DIALOG);\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 21,
                      "name": "id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "id of dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 22,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "object containing options to be passed into the dialog\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 153,
                  "character": 28
                }
              ]
            },
            {
              "id": 23,
              "name": "cancelAllDialogs",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 24,
                  "name": "cancelAllDialogs",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Cancel any and all active dialogs for the current user/context."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "DialogTurnResult"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 172,
                  "character": 33
                }
              ]
            },
            {
              "id": 36,
              "name": "changeContext",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 37,
                  "name": "changeContext",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Alter the context in which a bot instance will send messages.\nUse this method to create or adjust a bot instance so that it can send messages to a predefined user/channel combination.",
                    "text": "```javascript\n// get the reference field and store it.\nconst saved_reference = message.reference;\n\n// later on...\nlet bot = await controller.spawn();\nbot.changeContext(saved_reference);\nbot.say('Hello!');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 38,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A [ConversationReference](https://docs.microsoft.com/en-us/javascript/api/botframework-schema/conversationreference?view=botbuilder-ts-latest), most likely captured from an incoming message and stored for use in proactive messaging scenarios.\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 2,
                        "name": "BotWorker"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 250,
                  "character": 30
                }
              ]
            },
            {
              "id": 42,
              "name": "ensureMessageFormat",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 43,
                  "name": "ensureMessageFormat",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Take a crudely-formed Botkit message with any sort of field (may just be a string, may be a partial message object)\nand map it into a beautiful BotFramework Activity.\nAny fields not found in the Activity definition will be moved to activity.channelData.",
                    "returns": "a properly formed Activity object\n",
                    "tags": [
                      {
                        "tag": "params",
                        "text": "message a string or partial outgoing message object"
                      }
                    ]
                  },
                  "parameters": [
                    {
                      "id": 44,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 152,
                                "name": "BotkitMessage"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "Activity"
                      }
                    ],
                    "name": "Partial"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 332,
                  "character": 30
                }
              ]
            },
            {
              "id": 25,
              "name": "getActiveDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 26,
                  "name": "getActiveDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a reference to the active dialog",
                    "returns": "a reference to the active dialog or undefined if no dialog is active\n"
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "name": "Dialog"
                      },
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      }
                    ]
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 182,
                  "character": 26
                }
              ]
            },
            {
              "id": 9,
              "name": "getConfig",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 10,
                  "name": "getConfig",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a value from the BotWorker's configuration.",
                    "text": "```javascript\nlet original_context = bot.getConfig('context');\nawait original_context.sendActivity('send directly using the adapter instead of Botkit');\n```\n",
                    "returns": "The value stored in the configuration (or null if absent)\n"
                  },
                  "parameters": [
                    {
                      "id": 11,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "The name of a value stored in the configuration"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 50,
                  "character": 20
                }
              ]
            },
            {
              "id": 27,
              "name": "hasActiveDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 28,
                  "name": "hasActiveDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Check if any dialog is active or not",
                    "returns": "true if there is an active dialog, otherwise false\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 190,
                  "character": 26
                }
              ]
            },
            {
              "id": 48,
              "name": "httpBody",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 49,
                  "name": "httpBody",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the http response body for this turn.\nUse this to define the response value when the platform requires a synchronous response to the incoming webhook.",
                    "text": "Example handling of a /slash command from Slack:\n```javascript\ncontroller.on('slash_command', async(bot, message) => {\n bot.httpBody('This is a reply to the slash command.');\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 50,
                      "name": "body",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "(any) a value that will be returned as the http response body\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 432,
                  "character": 19
                }
              ]
            },
            {
              "id": 45,
              "name": "httpStatus",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 46,
                  "name": "httpStatus",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the http response status code for this turn",
                    "text": "```javascript\ncontroller.on('event', async(bot, message) => {\n  // respond with a 500 error code for some reason!\n  bot.httpStatus(500);\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 47,
                      "name": "status",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a valid http status code like 200 202 301 500 etc\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 415,
                  "character": 21
                }
              ]
            },
            {
              "id": 29,
              "name": "isDialogActive",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 30,
                  "name": "isDialogActive",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Check to see if a given dialog is currently active in the stack",
                    "returns": "true if dialog with id is located anywhere in the dialog stack\n"
                  },
                  "parameters": [
                    {
                      "id": 31,
                      "name": "id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The id of a dialog to look for in the dialog stack"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 199,
                  "character": 25
                }
              ]
            },
            {
              "id": 32,
              "name": "replaceDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 33,
                  "name": "replaceDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Replace any active dialogs with a new a pre-defined dialog by specifying its id. The dialog will be started in the same context (same user, same channel) in which the original incoming message was received.\n[See \"Using Dialogs\" in the core documentation.](../index.md#using-dialogs)",
                    "text": "```javascript\ncontroller.hears('hello', 'message', async(bot, message) => {\n     await bot.replaceDialog(GREETINGS_DIALOG);\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 34,
                      "name": "id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "id of dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 35,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "object containing options to be passed into the dialog\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 218,
                  "character": 30
                }
              ]
            },
            {
              "id": 15,
              "name": "reply",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 16,
                  "name": "reply",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to an incoming message.\nMessage will be sent using the context of the source message, which may in some cases be different than the context used to spawn the bot.",
                    "text": "Note that like [bot.say()](#say), `reply()` can take a string or a message object.\n\n```javascript\ncontroller.on('event', async(bot, message) => {\n\n await bot.reply(message, 'I received an event and am replying to it.');\n\n});\n```\n",
                    "returns": "Return value will contain the results of the send action, typically `{id: <id of message>}`\n"
                  },
                  "parameters": [
                    {
                      "id": 17,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message, usually passed in to a handler function"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "id": 152,
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 18,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A string containing the text of a reply, or more fully formed message object"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 152,
                                "name": "BotkitMessage"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 130,
                  "character": 22
                }
              ]
            },
            {
              "id": 12,
              "name": "say",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 13,
                  "name": "say",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Send a message using whatever context the `bot` was spawned in or set using [changeContext()](#changecontext) --\nor more likely, one of the platform-specific helpers like\n[startPrivateConversation()](../reference/slack.md#startprivateconversation) (Slack),\n[startConversationWithUser()](../reference/twilio-sms.md#startconversationwithuser) (Twilio SMS),\nand [startConversationWithUser()](../reference/facebook.md#startconversationwithuser) (Facebook Messenger).\nBe sure to check the platform documentation for others - most adapters include at least one.",
                    "text": "Simple use in event handler (acts the same as bot.reply)\n```javascript\ncontroller.on('event', async(bot, message) => {\n\n await bot.say('I received an event!');\n\n});\n```\n\nUse with a freshly spawned bot and bot.changeContext:\n```javascript\nlet bot = controller.spawn(OPTIONS);\nbot.changeContext(REFERENCE);\nbot.say('ALERT! I have some news.');\n```\n\nUse with multi-field message object:\n```javascript\ncontroller.on('event', async(bot, message) => {\n     bot.say({\n         text: 'I heard an event',\n         attachments: [\n             title: message.type,\n             text: `The message was of type ${ message.type }`,\n             // ...\n         ]\n     });\n});\n```\n",
                    "returns": "Return value will contain the results of the send action, typically `{id: <id of message>}`\n"
                  },
                  "parameters": [
                    {
                      "id": 14,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A string containing the text of a reply, or more fully formed message object"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 152,
                                "name": "BotkitMessage"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 99,
                  "character": 20
                }
              ]
            },
            {
              "id": 39,
              "name": "startConversationWithUser",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 40,
                  "name": "startConversationWithUser",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "parameters": [
                    {
                      "id": 41,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 274,
                  "character": 42
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 3,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a new BotWorker instance. Do not call this directly - instead, use [controller.spawn()](#spawn)."
              },
              "signatures": [
                {
                  "id": 4,
                  "name": "new BotWorker",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a new BotWorker instance. Do not call this directly - instead, use [controller.spawn()](#spawn)."
                  },
                  "parameters": [
                    {
                      "id": 5,
                      "name": "controller",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "A pointer to the main Botkit controller"
                      },
                      "type": {
                        "type": "reference",
                        "id": 185,
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 6,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "An object typically containing { dialogContext, reference, context, activity }\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "BotWorker"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 18,
                  "character": 25
                }
              ]
            }
          ]
        },
        {
          "id": 379,
          "name": "BotkitConversation",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "An extension on the [BotBuilder Dialog Class](https://docs.microsoft.com/en-us/javascript/api/botbuilder-dialogs/dialog?view=botbuilder-ts-latest) that provides a Botkit-friendly interface for\ndefining and interacting with multi-message dialogs. Dialogs can be constructed using `say()`, `ask()` and other helper methods.",
            "text": "```javascript\n// define the structure of your dialog...\nconst convo = new BotkitConversation('foo', controller);\nconvo.say('Hello!');\nconvo.ask('What is your name?', async(answer, convo, bot) => {\n     await bot.say('Your name is ' + answer);\n});\ncontroller.dialogSet.add(convo);\n\n// later on, trigger this dialog by its id\ncontroller.on('event', async(bot, message) => {\n await bot.beginDialog('foo');\n})\n```\n"
          },
          "typeParameter": [
            {
              "id": 380,
              "name": "O",
              "kind": 131072,
              "kindString": "Type parameter",
              "flags": {
                "isExported": true
              },
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            }
          ],
          "children": [
            {
              "id": 382,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a new BotkitConversation object"
              },
              "signatures": [
                {
                  "id": 383,
                  "name": "new BotkitConversation",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a new BotkitConversation object"
                  },
                  "parameters": [
                    {
                      "id": 384,
                      "name": "dialogId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "A unique identifier for this dialog, used to later trigger this dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 385,
                      "name": "controller",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "A pointer to the main Botkit controller\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 185,
                        "name": "Botkit"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 125,
                  "character": 32
                }
              ]
            },
            {
              "id": 381,
              "name": "script",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A map of every message in the dialog, broken into threads"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 119,
                  "character": 17
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 389,
              "name": "addAction",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 390,
                  "name": "addAction",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "An an action to the conversation timeline. This can be used to go to switch threads or end the dialog.",
                    "text": "When provided the name of another thread in the conversation, this will cause the bot to go immediately\nto that thread.\n\nOtherwise, use one of the following keywords:\n* `stop`\n* `repeat`\n* `complete`\n* `timeout`\n\n[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n\n```javascript\n\n// go to a thread called \"next_thread\"\nconvo.addAction('next_thread');\n\n// end the conversation and mark as successful\nconvo.addAction('complete');\n```"
                  },
                  "parameters": [
                    {
                      "id": 391,
                      "name": "action",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An action or thread name"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 392,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the thread to which this action is added.  Defaults to `default`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"default\""
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 197,
                  "character": 20
                }
              ]
            },
            {
              "id": 393,
              "name": "addChildDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 394,
                  "name": "addChildDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Cause the dialog to call a child dialog, wait for it to complete,\nthen store the results in a variable and resume the parent dialog.\nUse this to [combine multiple dialogs into bigger interactions.](../conversations.md#composing-dialogs)",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n```javascript\n// define a profile collection dialog\nlet profileDialog = new BotkitConversation('PROFILE_DIALOG', controller);\nprofileDialog.ask('What is your name?', async(res, convo, bot) => {}, {key: 'name'});\nprofileDialog.ask('What is your age?', async(res, convo, bot) => {}, {key: 'age'});\nprofileDialog.ask('What is your location?', async(res, convo, bot) => {}, {key: 'location'});\ncontroller.addDialog(profileDialog);\n\nlet onboard = new BotkitConversation('ONBOARDING', controller);\nonboard.say('Hello! It is time to collect your profile data.');\nonboard.addChildDialog('PROFILE_DIALOG', 'profile');\nonboard.say('Hello, {{vars.profile.name}}! Onboarding is complete.');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 395,
                      "name": "dialog_id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the id of another dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 396,
                      "name": "key_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "the variable name in which to store the results of the child dialog. if not provided, defaults to dialog_id."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 397,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the name of a thread to which this call should be added. defaults to 'default'\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"default\""
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 226,
                  "character": 25
                }
              ]
            },
            {
              "id": 398,
              "name": "addGotoDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 399,
                  "name": "addGotoDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Cause the current dialog to handoff to another dialog.\nThe parent dialog will not resume when the child dialog completes. However, the afterDialog event will not fire for the parent dialog until all child dialogs complete.\nUse this to [combine multiple dialogs into bigger interactions.](../conversations.md#composing-dialogs)",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n```javascript\nlet parent = new BotkitConversation('parent', controller);\nlet child = new BotkitConversation('child', controller);\nparent.say('Moving on....');\nparent.addGotoDialog('child');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 400,
                      "name": "dialog_id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the id of another dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 401,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the name of a thread to which this call should be added. defaults to 'default'\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"default\""
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 253,
                  "character": 24
                }
              ]
            },
            {
              "id": 402,
              "name": "addMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 403,
                  "name": "addMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a message template to a specific thread.\nMessages added with `say()` and `addMessage()` will be sent one after another without a pause.",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n```javascript\nlet conversation = new BotkitConversation('welcome', controller);\nconversation.say('Hello! Welcome to my app.');\nconversation.say('Let us get started...');\n// pass in a message with an action that will cause gotoThread to be called...\nconversation.addAction('continuation');\n\nconversation.addMessage('This is a different thread completely', 'continuation');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 404,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Message template to be sent"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 329,
                                "name": "BotkitMessageTemplate"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    {
                      "id": 405,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Name of thread to which message will be added\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 282,
                  "character": 21
                }
              ]
            },
            {
              "id": 413,
              "name": "addQuestion",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 414,
                  "name": "addQuestion",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Identical to [ask()](#ask), but accepts the name of a thread to which the question is added.",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)"
                  },
                  "parameters": [
                    {
                      "id": 415,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A message that will be used as the prompt"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 329,
                                "name": "BotkitMessageTemplate"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    {
                      "id": 416,
                      "name": "handlers",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "One or more handler functions defining possible conditional actions based on the response to the question"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "id": 318,
                            "name": "BotkitConvoHandler"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reference",
                              "id": 324,
                              "name": "BotkitConvoTrigger"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 417,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Name of variable to store response in."
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 418,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "children": [
                                {
                                  "id": 419,
                                  "name": "key",
                                  "kind": 32,
                                  "kindString": "Variable",
                                  "flags": {
                                    "isExported": true,
                                    "isExternal": true
                                  },
                                  "sources": [
                                    {
                                      "fileName": "conversation.ts",
                                      "line": 358,
                                      "character": 135
                                    }
                                  ],
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                }
                              ],
                              "groups": [
                                {
                                  "title": "Variables",
                                  "kind": 32,
                                  "children": [
                                    419
                                  ]
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "conversation.ts",
                                  "line": 358,
                                  "character": 130
                                }
                              ]
                            }
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "null"
                          }
                        ]
                      }
                    },
                    {
                      "id": 420,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Name of thread to which message will be added\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 358,
                  "character": 22
                }
              ]
            },
            {
              "id": 429,
              "name": "after",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 430,
                  "name": "after",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a function to run after the dialog has completed.\nThe first parameter to the handler will include a hash of all variables set and values collected from the user during the conversation.\nThe second parameter to the handler is a BotWorker object that can be used to start new dialogs or take other actions.",
                    "text": "[Learn more about handling end of conversation](../conversations.md#handling-end-of-conversation)\n```javascript\nlet convo = new BotkitConversation(MY_CONVO, controller);\nconvo.ask('What is your name?', [], 'name');\nconvo.ask('What is your age?', [], 'age');\nconvo.ask('What is your favorite color?', [], 'color');\nconvo.after(async(results, bot) => {\n\n     // handle results.name, results.age, results.color\n\n});\ncontroller.addDialog(convo);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 431,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "in the form async(results, bot) { ... }\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 432,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 433,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 434,
                                  "name": "results",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 435,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "id": 2,
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "intrinsic",
                                "name": "void"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "conversation.ts",
                              "line": 471,
                              "character": 25
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 471,
                  "character": 16
                }
              ]
            },
            {
              "id": 406,
              "name": "ask",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 407,
                  "name": "ask",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a question to the default thread.\nIn addition to a message template, receives either a single handler function to call when an answer is provided,\nor an array of handlers paired with trigger patterns. When providing multiple conditions to test, developers may also provide a\nhandler marked as the default choice.",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n```javascript\n// ask a question, handle the response with a function\nconvo.ask('What is your name?', async(response, convo, bot, full_message) => {\n await bot.say('Oh your name is ' + response);\n}, {key: 'name'});\n\n// ask a question, evaluate answer, take conditional action based on response\nconvo.ask('Do you want to eat a taco?', [\n {\n     pattern: 'yes',\n     type: 'string',\n     handler: async(response_text, convo, bot, full_message) => {\n         return await convo.gotoThread('yes_taco');\n     }\n },\n {\n     pattern: 'no',\n     type: 'string',\n     handler: async(response_text, convo, bot, full_message) => {\n         return await convo.gotoThread('no_taco');\n     }\n  },\n  {\n      default: true,\n      handler: async(response_text, convo, bot, full_message) => {\n          await bot.say('I do not understand your response!');\n          // start over!\n          return await convo.repeat();\n      }\n  }\n], {key: 'tacos'});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 408,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a message that will be used as the prompt"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 329,
                                "name": "BotkitMessageTemplate"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    {
                      "id": 409,
                      "name": "handlers",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "one or more handler functions defining possible conditional actions based on the response to the question."
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "id": 318,
                            "name": "BotkitConvoHandler"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reference",
                              "id": 324,
                              "name": "BotkitConvoTrigger"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 410,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "name of variable to store response in.\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 411,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "children": [
                                {
                                  "id": 412,
                                  "name": "key",
                                  "kind": 32,
                                  "kindString": "Variable",
                                  "flags": {
                                    "isExported": true,
                                    "isExternal": true
                                  },
                                  "sources": [
                                    {
                                      "fileName": "conversation.ts",
                                      "line": 344,
                                      "character": 127
                                    }
                                  ],
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                }
                              ],
                              "groups": [
                                {
                                  "title": "Variables",
                                  "kind": 32,
                                  "children": [
                                    412
                                  ]
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "conversation.ts",
                                  "line": 344,
                                  "character": 122
                                }
                              ]
                            }
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "null"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 344,
                  "character": 14
                }
              ]
            },
            {
              "id": 421,
              "name": "before",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 422,
                  "name": "before",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Register a handler function that will fire before a given thread begins.\nUse this hook to set variables, call APIs, or change the flow of the conversation using `convo.gotoThread`",
                    "text": "```javascript\nconvo.addMessage('This is the foo thread: var == {{vars.foo}}', 'foo');\nconvo.before('foo', async(convo, bot) => {\n // set a variable here that can be used in the message template\n convo.setVar('foo','THIS IS FOO');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 423,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A valid thread defined in this conversation"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 424,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A handler function in the form async(convo, bot) => { ... }\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 425,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 426,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 427,
                                  "name": "convo",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "id": 297,
                                    "name": "BotkitDialogWrapper"
                                  }
                                },
                                {
                                  "id": 428,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "id": 2,
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "conversation.ts",
                              "line": 419,
                              "character": 47
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 419,
                  "character": 17
                }
              ]
            },
            {
              "id": 436,
              "name": "onChange",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 437,
                  "name": "onChange",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a function to run whenever a user answers a specific question.  Can be used to validate input and take conditional actions.",
                    "text": "```javascript\nconvo.ask('What is your name?', [], 'name');\nconvo.onChange('name', async(response, convo, bot) => {\n\n // user changed their name!\n // do something...\n\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 438,
                      "name": "variable",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "name of the variable to watch for changes"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 439,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a handler function that will fire whenever a user's response is used to change the value of the watched variable\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 440,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 441,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 442,
                                  "name": "response",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 443,
                                  "name": "convo",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 444,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "conversation.ts",
                              "line": 506,
                              "character": 46
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 506,
                  "character": 19
                }
              ]
            },
            {
              "id": 386,
              "name": "say",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 387,
                  "name": "say",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a non-interactive message to the default thread.\nMessages added with `say()` and `addMessage()` will _not_ wait for a response, will be sent one after another without a pause.",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n\n```javascript\nlet conversation = new BotkitConversation('welcome', controller);\nconversation.say('Hello! Welcome to my app.');\nconversation.say('Let us get started...');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 388,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Message template to be sent\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 329,
                                "name": "BotkitMessageTemplate"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 167,
                  "character": 14
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                382
              ]
            },
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                381
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                389,
                393,
                398,
                402,
                413,
                429,
                406,
                421,
                436,
                386
              ]
            }
          ],
          "sources": [
            {
              "fileName": "conversation.ts",
              "line": 115,
              "character": 31
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 381,
              "name": "script",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A map of every message in the dialog, broken into threads"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 119,
                  "character": 17
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ],
          "methods": [
            {
              "id": 389,
              "name": "addAction",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 390,
                  "name": "addAction",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "An an action to the conversation timeline. This can be used to go to switch threads or end the dialog.",
                    "text": "When provided the name of another thread in the conversation, this will cause the bot to go immediately\nto that thread.\n\nOtherwise, use one of the following keywords:\n* `stop`\n* `repeat`\n* `complete`\n* `timeout`\n\n[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n\n```javascript\n\n// go to a thread called \"next_thread\"\nconvo.addAction('next_thread');\n\n// end the conversation and mark as successful\nconvo.addAction('complete');\n```"
                  },
                  "parameters": [
                    {
                      "id": 391,
                      "name": "action",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An action or thread name"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 392,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the thread to which this action is added.  Defaults to `default`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"default\""
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 197,
                  "character": 20
                }
              ]
            },
            {
              "id": 393,
              "name": "addChildDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 394,
                  "name": "addChildDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Cause the dialog to call a child dialog, wait for it to complete,\nthen store the results in a variable and resume the parent dialog.\nUse this to [combine multiple dialogs into bigger interactions.](../conversations.md#composing-dialogs)",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n```javascript\n// define a profile collection dialog\nlet profileDialog = new BotkitConversation('PROFILE_DIALOG', controller);\nprofileDialog.ask('What is your name?', async(res, convo, bot) => {}, {key: 'name'});\nprofileDialog.ask('What is your age?', async(res, convo, bot) => {}, {key: 'age'});\nprofileDialog.ask('What is your location?', async(res, convo, bot) => {}, {key: 'location'});\ncontroller.addDialog(profileDialog);\n\nlet onboard = new BotkitConversation('ONBOARDING', controller);\nonboard.say('Hello! It is time to collect your profile data.');\nonboard.addChildDialog('PROFILE_DIALOG', 'profile');\nonboard.say('Hello, {{vars.profile.name}}! Onboarding is complete.');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 395,
                      "name": "dialog_id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the id of another dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 396,
                      "name": "key_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "the variable name in which to store the results of the child dialog. if not provided, defaults to dialog_id."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 397,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the name of a thread to which this call should be added. defaults to 'default'\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"default\""
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 226,
                  "character": 25
                }
              ]
            },
            {
              "id": 398,
              "name": "addGotoDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 399,
                  "name": "addGotoDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Cause the current dialog to handoff to another dialog.\nThe parent dialog will not resume when the child dialog completes. However, the afterDialog event will not fire for the parent dialog until all child dialogs complete.\nUse this to [combine multiple dialogs into bigger interactions.](../conversations.md#composing-dialogs)",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n```javascript\nlet parent = new BotkitConversation('parent', controller);\nlet child = new BotkitConversation('child', controller);\nparent.say('Moving on....');\nparent.addGotoDialog('child');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 400,
                      "name": "dialog_id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the id of another dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 401,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the name of a thread to which this call should be added. defaults to 'default'\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"default\""
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 253,
                  "character": 24
                }
              ]
            },
            {
              "id": 402,
              "name": "addMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 403,
                  "name": "addMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a message template to a specific thread.\nMessages added with `say()` and `addMessage()` will be sent one after another without a pause.",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n```javascript\nlet conversation = new BotkitConversation('welcome', controller);\nconversation.say('Hello! Welcome to my app.');\nconversation.say('Let us get started...');\n// pass in a message with an action that will cause gotoThread to be called...\nconversation.addAction('continuation');\n\nconversation.addMessage('This is a different thread completely', 'continuation');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 404,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Message template to be sent"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 329,
                                "name": "BotkitMessageTemplate"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    {
                      "id": 405,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Name of thread to which message will be added\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 282,
                  "character": 21
                }
              ]
            },
            {
              "id": 413,
              "name": "addQuestion",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 414,
                  "name": "addQuestion",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Identical to [ask()](#ask), but accepts the name of a thread to which the question is added.",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)"
                  },
                  "parameters": [
                    {
                      "id": 415,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A message that will be used as the prompt"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 329,
                                "name": "BotkitMessageTemplate"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    {
                      "id": 416,
                      "name": "handlers",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "One or more handler functions defining possible conditional actions based on the response to the question"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "id": 318,
                            "name": "BotkitConvoHandler"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reference",
                              "id": 324,
                              "name": "BotkitConvoTrigger"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 417,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Name of variable to store response in."
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 418,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "children": [
                                {
                                  "id": 419,
                                  "name": "key",
                                  "kind": 32,
                                  "kindString": "Variable",
                                  "flags": {
                                    "isExported": true,
                                    "isExternal": true
                                  },
                                  "sources": [
                                    {
                                      "fileName": "conversation.ts",
                                      "line": 358,
                                      "character": 135
                                    }
                                  ],
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                }
                              ],
                              "groups": [
                                {
                                  "title": "Variables",
                                  "kind": 32,
                                  "children": [
                                    419
                                  ]
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "conversation.ts",
                                  "line": 358,
                                  "character": 130
                                }
                              ]
                            }
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "null"
                          }
                        ]
                      }
                    },
                    {
                      "id": 420,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Name of thread to which message will be added\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 358,
                  "character": 22
                }
              ]
            },
            {
              "id": 429,
              "name": "after",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 430,
                  "name": "after",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a function to run after the dialog has completed.\nThe first parameter to the handler will include a hash of all variables set and values collected from the user during the conversation.\nThe second parameter to the handler is a BotWorker object that can be used to start new dialogs or take other actions.",
                    "text": "[Learn more about handling end of conversation](../conversations.md#handling-end-of-conversation)\n```javascript\nlet convo = new BotkitConversation(MY_CONVO, controller);\nconvo.ask('What is your name?', [], 'name');\nconvo.ask('What is your age?', [], 'age');\nconvo.ask('What is your favorite color?', [], 'color');\nconvo.after(async(results, bot) => {\n\n     // handle results.name, results.age, results.color\n\n});\ncontroller.addDialog(convo);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 431,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "in the form async(results, bot) { ... }\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 432,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 433,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 434,
                                  "name": "results",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 435,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "id": 2,
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "intrinsic",
                                "name": "void"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "conversation.ts",
                              "line": 471,
                              "character": 25
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 471,
                  "character": 16
                }
              ]
            },
            {
              "id": 406,
              "name": "ask",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 407,
                  "name": "ask",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a question to the default thread.\nIn addition to a message template, receives either a single handler function to call when an answer is provided,\nor an array of handlers paired with trigger patterns. When providing multiple conditions to test, developers may also provide a\nhandler marked as the default choice.",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n```javascript\n// ask a question, handle the response with a function\nconvo.ask('What is your name?', async(response, convo, bot, full_message) => {\n await bot.say('Oh your name is ' + response);\n}, {key: 'name'});\n\n// ask a question, evaluate answer, take conditional action based on response\nconvo.ask('Do you want to eat a taco?', [\n {\n     pattern: 'yes',\n     type: 'string',\n     handler: async(response_text, convo, bot, full_message) => {\n         return await convo.gotoThread('yes_taco');\n     }\n },\n {\n     pattern: 'no',\n     type: 'string',\n     handler: async(response_text, convo, bot, full_message) => {\n         return await convo.gotoThread('no_taco');\n     }\n  },\n  {\n      default: true,\n      handler: async(response_text, convo, bot, full_message) => {\n          await bot.say('I do not understand your response!');\n          // start over!\n          return await convo.repeat();\n      }\n  }\n], {key: 'tacos'});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 408,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a message that will be used as the prompt"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 329,
                                "name": "BotkitMessageTemplate"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    },
                    {
                      "id": 409,
                      "name": "handlers",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "one or more handler functions defining possible conditional actions based on the response to the question."
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "id": 318,
                            "name": "BotkitConvoHandler"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reference",
                              "id": 324,
                              "name": "BotkitConvoTrigger"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 410,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "name of variable to store response in.\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 411,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "children": [
                                {
                                  "id": 412,
                                  "name": "key",
                                  "kind": 32,
                                  "kindString": "Variable",
                                  "flags": {
                                    "isExported": true,
                                    "isExternal": true
                                  },
                                  "sources": [
                                    {
                                      "fileName": "conversation.ts",
                                      "line": 344,
                                      "character": 127
                                    }
                                  ],
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                }
                              ],
                              "groups": [
                                {
                                  "title": "Variables",
                                  "kind": 32,
                                  "children": [
                                    412
                                  ]
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "conversation.ts",
                                  "line": 344,
                                  "character": 122
                                }
                              ]
                            }
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "null"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 344,
                  "character": 14
                }
              ]
            },
            {
              "id": 421,
              "name": "before",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 422,
                  "name": "before",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Register a handler function that will fire before a given thread begins.\nUse this hook to set variables, call APIs, or change the flow of the conversation using `convo.gotoThread`",
                    "text": "```javascript\nconvo.addMessage('This is the foo thread: var == {{vars.foo}}', 'foo');\nconvo.before('foo', async(convo, bot) => {\n // set a variable here that can be used in the message template\n convo.setVar('foo','THIS IS FOO');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 423,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A valid thread defined in this conversation"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 424,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A handler function in the form async(convo, bot) => { ... }\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 425,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 426,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 427,
                                  "name": "convo",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "id": 297,
                                    "name": "BotkitDialogWrapper"
                                  }
                                },
                                {
                                  "id": 428,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "id": 2,
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "conversation.ts",
                              "line": 419,
                              "character": 47
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 419,
                  "character": 17
                }
              ]
            },
            {
              "id": 436,
              "name": "onChange",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 437,
                  "name": "onChange",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a function to run whenever a user answers a specific question.  Can be used to validate input and take conditional actions.",
                    "text": "```javascript\nconvo.ask('What is your name?', [], 'name');\nconvo.onChange('name', async(response, convo, bot) => {\n\n // user changed their name!\n // do something...\n\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 438,
                      "name": "variable",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "name of the variable to watch for changes"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 439,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a handler function that will fire whenever a user's response is used to change the value of the watched variable\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 440,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 441,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 442,
                                  "name": "response",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 443,
                                  "name": "convo",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 444,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "conversation.ts",
                              "line": 506,
                              "character": 46
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 506,
                  "character": 19
                }
              ]
            },
            {
              "id": 386,
              "name": "say",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 387,
                  "name": "say",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a non-interactive message to the default thread.\nMessages added with `say()` and `addMessage()` will _not_ wait for a response, will be sent one after another without a pause.",
                    "text": "[Learn more about building conversations &rarr;](../conversations.md#build-a-conversation)\n\n```javascript\nlet conversation = new BotkitConversation('welcome', controller);\nconversation.say('Hello! Welcome to my app.');\nconversation.say('Let us get started...');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 388,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Message template to be sent\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 329,
                                "name": "BotkitMessageTemplate"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 167,
                  "character": 14
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 382,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a new BotkitConversation object"
              },
              "signatures": [
                {
                  "id": 383,
                  "name": "new BotkitConversation",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a new BotkitConversation object"
                  },
                  "parameters": [
                    {
                      "id": 384,
                      "name": "dialogId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "A unique identifier for this dialog, used to later trigger this dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 385,
                      "name": "controller",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "A pointer to the main Botkit controller\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 185,
                        "name": "Botkit"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 379,
                    "name": "BotkitConversation"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 125,
                  "character": 32
                }
              ]
            }
          ]
        },
        {
          "id": 297,
          "name": "BotkitDialogWrapper",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This class is used to provide easy access to common actions taken on active BotkitConversation instances.\nThese objects are passed into handlers bound to BotkitConversations using .before .onChange and conditional handler functions passed to .ask and .addQuestion\nGrants access to convo.vars convo.gotoThread() convo.setVar() and convo.repeat()."
          },
          "children": [
            {
              "id": 302,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 303,
                  "name": "new BotkitDialogWrapper",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "parameters": [
                    {
                      "id": 304,
                      "name": "dc",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "name": "DialogContext"
                      }
                    },
                    {
                      "id": 305,
                      "name": "step",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "id": 366,
                        "name": "BotkitConversationStep"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 297,
                    "name": "BotkitDialogWrapper"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 25,
                  "character": 5
                }
              ]
            },
            {
              "id": 298,
              "name": "vars",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An object containing variables and user responses from this conversation."
              },
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 23,
                  "character": 15
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 299,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "indexSignature": [
                    {
                      "id": 300,
                      "name": "__index",
                      "kind": 8192,
                      "kindString": "Index signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 301,
                          "name": "key",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "dialogWrapper.ts",
                      "line": 23,
                      "character": 16
                    }
                  ]
                }
              }
            },
            {
              "id": 306,
              "name": "gotoThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 307,
                  "name": "gotoThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Jump immediately to the first message in a different thread."
                  },
                  "parameters": [
                    {
                      "id": 308,
                      "name": "thread",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Name of a thread\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 37,
                  "character": 27
                }
              ]
            },
            {
              "id": 309,
              "name": "repeat",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 310,
                  "name": "repeat",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Repeat the last message sent on the next turn."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 45,
                  "character": 23
                }
              ]
            },
            {
              "id": 313,
              "name": "setVar",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 314,
                  "name": "setVar",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the value of a variable that will be available to messages in the conversation.\nEquivalent to convo.vars.key = val;\nResults in {{vars.key}} being replaced with the value in val."
                  },
                  "parameters": [
                    {
                      "id": 315,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the name of the variable"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 316,
                      "name": "val",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the value for the variable\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 65,
                  "character": 17
                }
              ]
            },
            {
              "id": 311,
              "name": "stop",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 312,
                  "name": "stop",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Stop the dialog."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 53,
                  "character": 21
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                302
              ]
            },
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                298
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                306,
                309,
                313,
                311
              ]
            }
          ],
          "sources": [
            {
              "fileName": "dialogWrapper.ts",
              "line": 17,
              "character": 32
            }
          ],
          "props": [
            {
              "id": 298,
              "name": "vars",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An object containing variables and user responses from this conversation."
              },
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 23,
                  "character": 15
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 299,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "indexSignature": [
                    {
                      "id": 300,
                      "name": "__index",
                      "kind": 8192,
                      "kindString": "Index signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 301,
                          "name": "key",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "dialogWrapper.ts",
                      "line": 23,
                      "character": 16
                    }
                  ]
                }
              }
            }
          ],
          "methods": [
            {
              "id": 306,
              "name": "gotoThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 307,
                  "name": "gotoThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Jump immediately to the first message in a different thread."
                  },
                  "parameters": [
                    {
                      "id": 308,
                      "name": "thread",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Name of a thread\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 37,
                  "character": 27
                }
              ]
            },
            {
              "id": 309,
              "name": "repeat",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 310,
                  "name": "repeat",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Repeat the last message sent on the next turn."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 45,
                  "character": 23
                }
              ]
            },
            {
              "id": 313,
              "name": "setVar",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 314,
                  "name": "setVar",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the value of a variable that will be available to messages in the conversation.\nEquivalent to convo.vars.key = val;\nResults in {{vars.key}} being replaced with the value in val."
                  },
                  "parameters": [
                    {
                      "id": 315,
                      "name": "key",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the name of the variable"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 316,
                      "name": "val",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the value for the variable\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 65,
                  "character": 17
                }
              ]
            },
            {
              "id": 311,
              "name": "stop",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 312,
                  "name": "stop",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Stop the dialog."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 53,
                  "character": 21
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 302,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 303,
                  "name": "new BotkitDialogWrapper",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "parameters": [
                    {
                      "id": 304,
                      "name": "dc",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "name": "DialogContext"
                      }
                    },
                    {
                      "id": 305,
                      "name": "step",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "id": 366,
                        "name": "BotkitConversationStep"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 297,
                    "name": "BotkitDialogWrapper"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "dialogWrapper.ts",
                  "line": 25,
                  "character": 5
                }
              ]
            }
          ]
        },
        {
          "id": 462,
          "name": "BotkitTestClient",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "A client for testing dialogs in isolation."
          },
          "children": [
            {
              "id": 465,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a BotkitTestClient to test a dialog without having to create a full-fledged adapter.",
                "text": "```javascript\nlet client = new BotkitTestClient('test', bot, MY_DIALOG, MY_OPTIONS);\nlet reply = await client.sendActivity('first message');\nassert.strictEqual(reply.text, 'first reply', 'reply failed');\n```\n"
              },
              "signatures": [
                {
                  "id": 466,
                  "name": "new BotkitTestClient",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a BotkitTestClient to test a dialog without having to create a full-fledged adapter.",
                    "text": "```javascript\nlet client = new BotkitTestClient('test', bot, MY_DIALOG, MY_OPTIONS);\nlet reply = await client.sendActivity('first message');\nassert.strictEqual(reply.text, 'first reply', 'reply failed');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 467,
                      "name": "channelId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "The channelId to be used for the test.\nUse 'emulator' or 'test' if you are uncertain of the channel you are targeting.\nOtherwise, it is recommended that you use the id for the channel(s) your bot will be using and write a test case for each channel."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 468,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "(Required) The Botkit bot that has the skill to test."
                      },
                      "type": {
                        "type": "reference",
                        "id": 185,
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 469,
                      "name": "dialogToTest",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "(Required) The identifier of the skill to test in the bot."
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 470,
                      "name": "initialDialogOptions",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) additional argument(s) to pass to the dialog being started."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 471,
                      "name": "middlewares",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) a stack of middleware to be run when testing"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Middleware"
                        }
                      }
                    },
                    {
                      "id": 472,
                      "name": "conversationState",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) A ConversationState instance to use in the test client\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "ConversationState"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 462,
                    "name": "BotkitTestClient"
                  }
                },
                {
                  "id": 473,
                  "name": "new BotkitTestClient",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a BotkitTestClient to test a dialog without having to create a full-fledged adapter.",
                    "text": "```javascript\nlet client = new BotkitTestClient('test', bot, MY_DIALOG, MY_OPTIONS);\nlet reply = await client.sendActivity('first message');\nassert.strictEqual(reply.text, 'first reply', 'reply failed');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 474,
                      "name": "testAdapter",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "name": "TestAdapter"
                      }
                    },
                    {
                      "id": 475,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "(Required) The Botkit bot that has the skill to test."
                      },
                      "type": {
                        "type": "reference",
                        "id": 185,
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 476,
                      "name": "dialogToTest",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "(Required) The identifier of the skill to test in the bot."
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 477,
                      "name": "initialDialogOptions",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) additional argument(s) to pass to the dialog being started."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 478,
                      "name": "middlewares",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) a stack of middleware to be run when testing"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Middleware"
                        }
                      }
                    },
                    {
                      "id": 479,
                      "name": "conversationState",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) A ConversationState instance to use in the test client\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "ConversationState"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 462,
                    "name": "BotkitTestClient"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 27,
                  "character": 48
                },
                {
                  "fileName": "testClient.ts",
                  "line": 47,
                  "character": 182
                },
                {
                  "fileName": "testClient.ts",
                  "line": 48,
                  "character": 189
                }
              ]
            },
            {
              "id": 464,
              "name": "conversationState",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 27,
                  "character": 28
                }
              ],
              "type": {
                "type": "reference",
                "name": "ConversationState"
              }
            },
            {
              "id": 463,
              "name": "dialogTurnResult",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 26,
                  "character": 27
                }
              ],
              "type": {
                "type": "reference",
                "name": "DialogTurnResult"
              }
            },
            {
              "id": 483,
              "name": "getNextReply",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 484,
                  "name": "getNextReply",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the next reply waiting to be delivered (if one exists)"
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "Activity"
                      }
                    ],
                    "name": "Partial"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 104,
                  "character": 23
                }
              ]
            },
            {
              "id": 480,
              "name": "sendActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 481,
                  "name": "sendActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Send an activity into the dialog.",
                    "returns": "a TestFlow that can be used to assert replies etc"
                  },
                  "parameters": [
                    {
                      "id": 482,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an activity potentially with text\n\n```javascript\nDialogTest.send('hello').assertReply('hello yourself').then(done);\n```\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "name": "Activity"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 96,
                  "character": 29
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                465
              ]
            },
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                464,
                463
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                483,
                480
              ]
            }
          ],
          "sources": [
            {
              "fileName": "testClient.ts",
              "line": 23,
              "character": 29
            }
          ],
          "props": [
            {
              "id": 464,
              "name": "conversationState",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 27,
                  "character": 28
                }
              ],
              "type": {
                "type": "reference",
                "name": "ConversationState"
              }
            },
            {
              "id": 463,
              "name": "dialogTurnResult",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 26,
                  "character": 27
                }
              ],
              "type": {
                "type": "reference",
                "name": "DialogTurnResult"
              }
            }
          ],
          "methods": [
            {
              "id": 483,
              "name": "getNextReply",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 484,
                  "name": "getNextReply",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the next reply waiting to be delivered (if one exists)"
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "Activity"
                      }
                    ],
                    "name": "Partial"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 104,
                  "character": 23
                }
              ]
            },
            {
              "id": 480,
              "name": "sendActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 481,
                  "name": "sendActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Send an activity into the dialog.",
                    "returns": "a TestFlow that can be used to assert replies etc"
                  },
                  "parameters": [
                    {
                      "id": 482,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an activity potentially with text\n\n```javascript\nDialogTest.send('hello').assertReply('hello yourself').then(done);\n```\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "name": "Activity"
                              }
                            ],
                            "name": "Partial"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 96,
                  "character": 29
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 465,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a BotkitTestClient to test a dialog without having to create a full-fledged adapter.",
                "text": "```javascript\nlet client = new BotkitTestClient('test', bot, MY_DIALOG, MY_OPTIONS);\nlet reply = await client.sendActivity('first message');\nassert.strictEqual(reply.text, 'first reply', 'reply failed');\n```\n"
              },
              "signatures": [
                {
                  "id": 466,
                  "name": "new BotkitTestClient",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a BotkitTestClient to test a dialog without having to create a full-fledged adapter.",
                    "text": "```javascript\nlet client = new BotkitTestClient('test', bot, MY_DIALOG, MY_OPTIONS);\nlet reply = await client.sendActivity('first message');\nassert.strictEqual(reply.text, 'first reply', 'reply failed');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 467,
                      "name": "channelId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "The channelId to be used for the test.\nUse 'emulator' or 'test' if you are uncertain of the channel you are targeting.\nOtherwise, it is recommended that you use the id for the channel(s) your bot will be using and write a test case for each channel."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 468,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "(Required) The Botkit bot that has the skill to test."
                      },
                      "type": {
                        "type": "reference",
                        "id": 185,
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 469,
                      "name": "dialogToTest",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "(Required) The identifier of the skill to test in the bot."
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 470,
                      "name": "initialDialogOptions",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) additional argument(s) to pass to the dialog being started."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 471,
                      "name": "middlewares",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) a stack of middleware to be run when testing"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Middleware"
                        }
                      }
                    },
                    {
                      "id": 472,
                      "name": "conversationState",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) A ConversationState instance to use in the test client\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "ConversationState"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 462,
                    "name": "BotkitTestClient"
                  }
                },
                {
                  "id": 473,
                  "name": "new BotkitTestClient",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a BotkitTestClient to test a dialog without having to create a full-fledged adapter.",
                    "text": "```javascript\nlet client = new BotkitTestClient('test', bot, MY_DIALOG, MY_OPTIONS);\nlet reply = await client.sendActivity('first message');\nassert.strictEqual(reply.text, 'first reply', 'reply failed');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 474,
                      "name": "testAdapter",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "name": "TestAdapter"
                      }
                    },
                    {
                      "id": 475,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "(Required) The Botkit bot that has the skill to test."
                      },
                      "type": {
                        "type": "reference",
                        "id": 185,
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 476,
                      "name": "dialogToTest",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "(Required) The identifier of the skill to test in the bot."
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "id": 477,
                      "name": "initialDialogOptions",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) additional argument(s) to pass to the dialog being started."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 478,
                      "name": "middlewares",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) a stack of middleware to be run when testing"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "Middleware"
                        }
                      }
                    },
                    {
                      "id": 479,
                      "name": "conversationState",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "(Optional) A ConversationState instance to use in the test client\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "ConversationState"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 462,
                    "name": "BotkitTestClient"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "testClient.ts",
                  "line": 27,
                  "character": 48
                },
                {
                  "fileName": "testClient.ts",
                  "line": 47,
                  "character": 182
                },
                {
                  "fileName": "testClient.ts",
                  "line": 48,
                  "character": 189
                }
              ]
            }
          ]
        },
        {
          "id": 106,
          "name": "TeamsInvokeMiddleware",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "When used, causes Botkit to emit special events for teams \"invokes\"\nBased on https://github.com/microsoft/botbuilder-js/blob/master/libraries/botbuilder/src/teamsActivityHandler.ts\nThis allows Botkit bots to respond directly to task/fetch or task/submit events, as an example.\nTo use this, bind it to the adapter before creating the Botkit controller:\n```javascript\nconst Botkit = new Botkit({...});\nbotkit.adapter.use(new TeamsInvokeMiddleware());",
            "text": "// can bind directly to task/fetch, task/submit and other invoke types used by teams\ncontroller.on('task/fetch', async(bot, message) => {\n   await bot.replyWithTaskInfo(message, taskInfo);\n});\n```\n"
          },
          "children": [
            {
              "id": 107,
              "name": "onTurn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 108,
                  "name": "onTurn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Not for direct use - implements the MiddlewareSet's required onTurn function used to process the event"
                  },
                  "parameters": [
                    {
                      "id": 109,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 110,
                      "name": "next",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 111,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 112,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "teamsHelpers.ts",
                              "line": 79,
                              "character": 51
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "teamsHelpers.ts",
                  "line": 79,
                  "character": 23
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                107
              ]
            }
          ],
          "sources": [
            {
              "fileName": "teamsHelpers.ts",
              "line": 73,
              "character": 34
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 107,
              "name": "onTurn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 108,
                  "name": "onTurn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Not for direct use - implements the MiddlewareSet's required onTurn function used to process the event"
                  },
                  "parameters": [
                    {
                      "id": 109,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 110,
                      "name": "next",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 111,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 112,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "teamsHelpers.ts",
                              "line": 79,
                              "character": 51
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "teamsHelpers.ts",
                  "line": 79,
                  "character": 23
                }
              ]
            }
          ],
          "constructors": []
        }
      ],
      "interfaces": [
        {
          "id": 137,
          "name": "BotkitConfiguration",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Defines the options used when instantiating Botkit to create the main app controller with `new Botkit(options)`"
          },
          "children": [
            {
              "id": 140,
              "name": "adapter",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A fully configured BotBuilder Adapter, such as `botbuilder-adapter-slack` or `botbuilder-adapter-web`\nThe adapter is responsible for translating platform-specific messages into the format understood by Botkit and BotBuilder."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 41,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 141,
              "name": "adapterConfig",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "If using the BotFramework service, options included in `adapterConfig` will be passed to the new Adapter when created internally.\nSee [BotFrameworkAdapterSettings](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadaptersettings?view=azure-node-latest&viewFallbackFrom=botbuilder-ts-latest)."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 47,
                  "character": 17
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 142,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "indexSignature": [
                    {
                      "id": 143,
                      "name": "__index",
                      "kind": 8192,
                      "kindString": "Index signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 144,
                          "name": "key",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 47,
                      "character": 19
                    }
                  ]
                }
              }
            },
            {
              "id": 139,
              "name": "dialogStateProperty",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Name of the dialogState property in the ConversationState that will be used to automatically track the dialog state. Defaults to `dialogState`."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 35,
                  "character": 23
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 149,
              "name": "disable_console",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Disable messages normally sent to the console during startup."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 75,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 148,
              "name": "disable_webserver",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Disable webserver. If true, Botkit will not create a webserver or expose any webhook endpoints automatically. Defaults to false."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 70,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 150,
              "name": "jsonLimit",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Limit of the size of incoming JSON payloads parsed by the Express bodyParser. Defaults to '100kb'"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 80,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 147,
              "name": "storage",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A Storage interface compatible with [this specification](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/storage?view=botbuilder-ts-latest)\nDefaults to the ephemeral [MemoryStorage](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/memorystorage?view=botbuilder-ts-latest) implementation."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 65,
                  "character": 11
                }
              ],
              "type": {
                "type": "reference",
                "name": "Storage"
              }
            },
            {
              "id": 151,
              "name": "urlEncodedLimit",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Limit of the size of incoming URL encoded payloads parsed by the Express bodyParser. Defaults to '100kb'"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 85,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 138,
              "name": "webhook_uri",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Path used to create incoming webhook URI.  Defaults to `/api/messages`"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 30,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 145,
              "name": "webserver",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "An instance of Express used to define web endpoints.  If not specified, one will be created internally.\nNote: only use your own Express if you absolutely must for some reason. Otherwise, use `controller.webserver`"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 53,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 146,
              "name": "webserver_middlewares",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "An array of middlewares that will be automatically bound to the webserver.\nShould be in the form (req, res, next) => {}"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 59,
                  "character": 25
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                140,
                141,
                139,
                149,
                148,
                150,
                147,
                151,
                138,
                145,
                146
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core.ts",
              "line": 26,
              "character": 36
            }
          ],
          "props": [
            {
              "id": 140,
              "name": "adapter",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A fully configured BotBuilder Adapter, such as `botbuilder-adapter-slack` or `botbuilder-adapter-web`\nThe adapter is responsible for translating platform-specific messages into the format understood by Botkit and BotBuilder."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 41,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 141,
              "name": "adapterConfig",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "If using the BotFramework service, options included in `adapterConfig` will be passed to the new Adapter when created internally.\nSee [BotFrameworkAdapterSettings](https://docs.microsoft.com/en-us/javascript/api/botbuilder/botframeworkadaptersettings?view=azure-node-latest&viewFallbackFrom=botbuilder-ts-latest)."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 47,
                  "character": 17
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 142,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "indexSignature": [
                    {
                      "id": 143,
                      "name": "__index",
                      "kind": 8192,
                      "kindString": "Index signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 144,
                          "name": "key",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 47,
                      "character": 19
                    }
                  ]
                }
              }
            },
            {
              "id": 139,
              "name": "dialogStateProperty",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Name of the dialogState property in the ConversationState that will be used to automatically track the dialog state. Defaults to `dialogState`."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 35,
                  "character": 23
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 149,
              "name": "disable_console",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Disable messages normally sent to the console during startup."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 75,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 148,
              "name": "disable_webserver",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Disable webserver. If true, Botkit will not create a webserver or expose any webhook endpoints automatically. Defaults to false."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 70,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 150,
              "name": "jsonLimit",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Limit of the size of incoming JSON payloads parsed by the Express bodyParser. Defaults to '100kb'"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 80,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 147,
              "name": "storage",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A Storage interface compatible with [this specification](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/storage?view=botbuilder-ts-latest)\nDefaults to the ephemeral [MemoryStorage](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/memorystorage?view=botbuilder-ts-latest) implementation."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 65,
                  "character": 11
                }
              ],
              "type": {
                "type": "reference",
                "name": "Storage"
              }
            },
            {
              "id": 151,
              "name": "urlEncodedLimit",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Limit of the size of incoming URL encoded payloads parsed by the Express bodyParser. Defaults to '100kb'"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 85,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 138,
              "name": "webhook_uri",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Path used to create incoming webhook URI.  Defaults to `/api/messages`"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 30,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 145,
              "name": "webserver",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "An instance of Express used to define web endpoints.  If not specified, one will be created internally.\nNote: only use your own Express if you absolutely must for some reason. Otherwise, use `controller.webserver`"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 53,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 146,
              "name": "webserver_middlewares",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "An array of middlewares that will be automatically bound to the webserver.\nShould be in the form (req, res, next) => {}"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 59,
                  "character": 25
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            }
          ]
        },
        {
          "id": 366,
          "name": "BotkitConversationStep",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "children": [
            {
              "id": 367,
              "name": "index",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The number pointing to the current message in the current thread in this dialog's script"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 61,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 375,
              "name": "next",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A function to call when the step is completed."
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 93,
                  "character": 8
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 376,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 377,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 378,
                          "name": "stepResult",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        ],
                        "name": "Promise"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "conversation.ts",
                      "line": 93,
                      "character": 9
                    }
                  ]
                }
              }
            },
            {
              "id": 371,
              "name": "options",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A pointer to any options passed into the dialog when it began"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 77,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 372,
              "name": "reason",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The reason for this step being called"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 81,
                  "character": 10
                }
              ],
              "type": {
                "type": "reference",
                "name": "DialogReason"
              }
            },
            {
              "id": 373,
              "name": "result",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The results of the previous turn"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 85,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 370,
              "name": "state",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A pointer to the current dialog state"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 73,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 368,
              "name": "thread",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The name of the current thread"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 65,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 369,
              "name": "threadLength",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The length of the current thread"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 69,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 374,
              "name": "values",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A pointer directly to state.values"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 89,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                367,
                375,
                371,
                372,
                373,
                370,
                368,
                369,
                374
              ]
            }
          ],
          "sources": [
            {
              "fileName": "conversation.ts",
              "line": 57,
              "character": 39
            }
          ],
          "props": [
            {
              "id": 367,
              "name": "index",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The number pointing to the current message in the current thread in this dialog's script"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 61,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 375,
              "name": "next",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A function to call when the step is completed."
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 93,
                  "character": 8
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 376,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 377,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 378,
                          "name": "stepResult",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        ],
                        "name": "Promise"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "conversation.ts",
                      "line": 93,
                      "character": 9
                    }
                  ]
                }
              }
            },
            {
              "id": 371,
              "name": "options",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A pointer to any options passed into the dialog when it began"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 77,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 372,
              "name": "reason",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The reason for this step being called"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 81,
                  "character": 10
                }
              ],
              "type": {
                "type": "reference",
                "name": "DialogReason"
              }
            },
            {
              "id": 373,
              "name": "result",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The results of the previous turn"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 85,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 370,
              "name": "state",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A pointer to the current dialog state"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 73,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 368,
              "name": "thread",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The name of the current thread"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 65,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 369,
              "name": "threadLength",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The length of the current thread"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 69,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 374,
              "name": "values",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A pointer directly to state.values"
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 89,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ]
        },
        {
          "id": 318,
          "name": "BotkitConvoHandler",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "Definition of the handler functions used to handle .ask and .addQuestion conditions"
          },
          "signatures": [
            {
              "id": 319,
              "name": "__call",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Definition of the handler functions used to handle .ask and .addQuestion conditions"
              },
              "parameters": [
                {
                  "id": 320,
                  "name": "answer",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 321,
                  "name": "convo",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 297,
                    "name": "BotkitDialogWrapper"
                  }
                },
                {
                  "id": 322,
                  "name": "bot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "BotWorker"
                  }
                },
                {
                  "id": 323,
                  "name": "message",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 152,
                    "name": "BotkitMessage"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "name": "Promise"
              }
            }
          ],
          "sources": [
            {
              "fileName": "conversation.ts",
              "line": 21,
              "character": 28
            }
          ]
        },
        {
          "id": 324,
          "name": "BotkitConvoTrigger",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "Definition of the trigger pattern passed into .ask or .addQuestion"
          },
          "children": [
            {
              "id": 328,
              "name": "default",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 32,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 327,
              "name": "handler",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 31,
                  "character": 11
                }
              ],
              "type": {
                "type": "reference",
                "id": 318,
                "name": "BotkitConvoHandler"
              }
            },
            {
              "id": 326,
              "name": "pattern",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 30,
                  "character": 11
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "reference",
                    "name": "RegExp"
                  }
                ]
              }
            },
            {
              "id": 325,
              "name": "type",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 29,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                328,
                327,
                326,
                325
              ]
            }
          ],
          "sources": [
            {
              "fileName": "conversation.ts",
              "line": 28,
              "character": 28
            }
          ],
          "props": [
            {
              "id": 328,
              "name": "default",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 32,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 327,
              "name": "handler",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 31,
                  "character": 11
                }
              ],
              "type": {
                "type": "reference",
                "id": 318,
                "name": "BotkitConvoHandler"
              }
            },
            {
              "id": 326,
              "name": "pattern",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 30,
                  "character": 11
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "reference",
                    "name": "RegExp"
                  }
                ]
              }
            },
            {
              "id": 325,
              "name": "type",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 29,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 162,
          "name": "BotkitHandler",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "A handler function passed into `hears()` or `on()` that receives a [BotWorker](#botworker) instance and a [BotkitMessage](#botkitmessage).  Should be defined as an async function and/or return a Promise.",
            "text": "The form of these handlers should be:\n```javascript\nasync (bot, message) => {\n// stuff.\n}\n```\n\nFor example:\n```javascript\ncontroller.on('event', async(bot, message) => {\n // do somethign using bot and message like...\n await bot.reply(message,'Received an event.');\n});\n```\n"
          },
          "signatures": [
            {
              "id": 163,
              "name": "__call",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExported": true
              },
              "comment": {
                "shortText": "A handler function passed into `hears()` or `on()` that receives a [BotWorker](#botworker) instance and a [BotkitMessage](#botkitmessage).  Should be defined as an async function and/or return a Promise.",
                "text": "The form of these handlers should be:\n```javascript\nasync (bot, message) => {\n// stuff.\n}\n```\n\nFor example:\n```javascript\ncontroller.on('event', async(bot, message) => {\n // do somethign using bot and message like...\n await bot.reply(message,'Received an event.');\n});\n```\n"
              },
              "parameters": [
                {
                  "id": 164,
                  "name": "bot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExported": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "BotWorker"
                  }
                },
                {
                  "id": 165,
                  "name": "message",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExported": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 152,
                    "name": "BotkitMessage"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "name": "Promise"
              }
            }
          ],
          "sources": [
            {
              "fileName": "core.ts",
              "line": 154,
              "character": 30
            }
          ]
        },
        {
          "id": 152,
          "name": "BotkitMessage",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Defines the expected form of a message or event object being handled by Botkit.\nWill also contain any additional fields including in the incoming payload."
          },
          "indexSignature": [
            {
              "id": 160,
              "name": "__index",
              "kind": 8192,
              "kindString": "Index signature",
              "flags": {
                "isExported": true
              },
              "comment": {
                "shortText": "Any additional fields found in the incoming payload from the messaging platform."
              },
              "parameters": [
                {
                  "id": 161,
                  "name": "key",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExported": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ],
          "children": [
            {
              "id": 157,
              "name": "channel",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Unique identifier of the room/channel/space in which the message was sent. Typically contains the platform specific designator for that channel."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 117,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 159,
              "name": "incoming_message",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The original incoming [BotBuilder Activity](https://docs.microsoft.com/en-us/javascript/api/botframework-schema/activity?view=botbuilder-ts-latest) object as created by the adapter."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 128,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "Activity"
              }
            },
            {
              "id": 158,
              "name": "reference",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A full [ConversationReference](https://docs.microsoft.com/en-us/javascript/api/botframework-schema/conversationreference?view=botbuilder-ts-latest) object that defines the address of the message and all information necessary to send messages back to the originating location.\nCan be stored for later use, and used with [bot.changeContext()](#changeContext) to send proactive messages."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 123,
                  "character": 13
                }
              ],
              "type": {
                "type": "reference",
                "name": "ConversationReference"
              }
            },
            {
              "id": 154,
              "name": "text",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Text of the message sent by the user (or primary value in case of button click)"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 102,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 153,
              "name": "type",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The type of event, in most cases defined by the messaging channel or adapter"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 97,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 156,
              "name": "user",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Unique identifier of user who sent the message. Typically contains the platform specific user id."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 112,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 155,
              "name": "value",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Any value field received from the platform"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 107,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                157,
                159,
                158,
                154,
                153,
                156,
                155
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core.ts",
              "line": 93,
              "character": 30
            }
          ],
          "props": [
            {
              "id": 157,
              "name": "channel",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Unique identifier of the room/channel/space in which the message was sent. Typically contains the platform specific designator for that channel."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 117,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 159,
              "name": "incoming_message",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The original incoming [BotBuilder Activity](https://docs.microsoft.com/en-us/javascript/api/botframework-schema/activity?view=botbuilder-ts-latest) object as created by the adapter."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 128,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "Activity"
              }
            },
            {
              "id": 158,
              "name": "reference",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A full [ConversationReference](https://docs.microsoft.com/en-us/javascript/api/botframework-schema/conversationreference?view=botbuilder-ts-latest) object that defines the address of the message and all information necessary to send messages back to the originating location.\nCan be stored for later use, and used with [bot.changeContext()](#changeContext) to send proactive messages."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 123,
                  "character": 13
                }
              ],
              "type": {
                "type": "reference",
                "name": "ConversationReference"
              }
            },
            {
              "id": 154,
              "name": "text",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Text of the message sent by the user (or primary value in case of button click)"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 102,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 153,
              "name": "type",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The type of event, in most cases defined by the messaging channel or adapter"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 97,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 156,
              "name": "user",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Unique identifier of user who sent the message. Typically contains the platform specific user id."
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 112,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 155,
              "name": "value",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Any value field received from the platform"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 107,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 329,
          "name": "BotkitMessageTemplate",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "Template for definiting a BotkitConversation template"
          },
          "children": [
            {
              "id": 335,
              "name": "action",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 40,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 355,
              "name": "attachment",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 48,
                  "character": 14
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 356,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 357,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 358,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 359,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 48,
                          "character": 16
                        }
                      ]
                    }
                  },
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ]
              }
            },
            {
              "id": 360,
              "name": "attachmentLayout",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 49,
                  "character": 20
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 345,
              "name": "attachments",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 46,
                  "character": 15
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 346,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 347,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 348,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 349,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 46,
                          "character": 17
                        }
                      ]
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            },
            {
              "id": 350,
              "name": "blocks",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 47,
                  "character": 10
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 351,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 352,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 353,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 354,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 47,
                          "character": 12
                        }
                      ]
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            },
            {
              "id": 361,
              "name": "channelData",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 50,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 362,
              "name": "collect",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 51,
                  "character": 11
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 363,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 364,
                      "name": "key",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 52,
                          "character": 11
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 365,
                      "name": "options",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 53,
                          "character": 15
                        }
                      ],
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "id": 324,
                          "name": "BotkitConvoTrigger"
                        }
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Variables",
                      "kind": 32,
                      "children": [
                        364,
                        365
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "conversation.ts",
                      "line": 51,
                      "character": 12
                    }
                  ]
                }
              }
            },
            {
              "id": 336,
              "name": "execute",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 41,
                  "character": 11
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 337,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 338,
                      "name": "script",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 42,
                          "character": 14
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 339,
                      "name": "thread",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 43,
                          "character": 14
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Variables",
                      "kind": 32,
                      "children": [
                        338,
                        339
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "conversation.ts",
                      "line": 41,
                      "character": 13
                    }
                  ]
                }
              }
            },
            {
              "id": 340,
              "name": "quick_replies",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 45,
                  "character": 17
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 341,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 342,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 343,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 344,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 45,
                          "character": 19
                        }
                      ]
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            },
            {
              "id": 330,
              "name": "text",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 39,
                  "character": 8
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 331,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 332,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 333,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 334,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 39,
                          "character": 9
                        }
                      ]
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                335,
                355,
                360,
                345,
                350,
                361,
                362,
                336,
                340,
                330
              ]
            }
          ],
          "sources": [
            {
              "fileName": "conversation.ts",
              "line": 38,
              "character": 31
            }
          ],
          "props": [
            {
              "id": 335,
              "name": "action",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 40,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 355,
              "name": "attachment",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 48,
                  "character": 14
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 356,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 357,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 358,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 359,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 48,
                          "character": 16
                        }
                      ]
                    }
                  },
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ]
              }
            },
            {
              "id": 360,
              "name": "attachmentLayout",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 49,
                  "character": 20
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 345,
              "name": "attachments",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 46,
                  "character": 15
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 346,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 347,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 348,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 349,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 46,
                          "character": 17
                        }
                      ]
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            },
            {
              "id": 350,
              "name": "blocks",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 47,
                  "character": 10
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 351,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 352,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 353,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 354,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 47,
                          "character": 12
                        }
                      ]
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            },
            {
              "id": 361,
              "name": "channelData",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 50,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 362,
              "name": "collect",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 51,
                  "character": 11
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 363,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 364,
                      "name": "key",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 52,
                          "character": 11
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 365,
                      "name": "options",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 53,
                          "character": 15
                        }
                      ],
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "id": 324,
                          "name": "BotkitConvoTrigger"
                        }
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Variables",
                      "kind": 32,
                      "children": [
                        364,
                        365
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "conversation.ts",
                      "line": 51,
                      "character": 12
                    }
                  ]
                }
              }
            },
            {
              "id": 336,
              "name": "execute",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 41,
                  "character": 11
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 337,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 338,
                      "name": "script",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 42,
                          "character": 14
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 339,
                      "name": "thread",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 43,
                          "character": 14
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Variables",
                      "kind": 32,
                      "children": [
                        338,
                        339
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "conversation.ts",
                      "line": 41,
                      "character": 13
                    }
                  ]
                }
              }
            },
            {
              "id": 340,
              "name": "quick_replies",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 45,
                  "character": 17
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 341,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 342,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 343,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 344,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "array",
                            "elementType": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 45,
                          "character": 19
                        }
                      ]
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            },
            {
              "id": 330,
              "name": "text",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "conversation.ts",
                  "line": 39,
                  "character": 8
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 331,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 332,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 333,
                              "name": "template",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            },
                            {
                              "id": 334,
                              "name": "vars",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "conversation.ts",
                          "line": 39,
                          "character": 9
                        }
                      ]
                    }
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 173,
          "name": "BotkitPlugin",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "An interface for plugins that can contain multiple middlewares as well as an init function."
          },
          "indexSignature": [
            {
              "id": 183,
              "name": "__index",
              "kind": 8192,
              "kindString": "Index signature",
              "flags": {
                "isExported": true
              },
              "comment": {
                "shortText": "An interface for plugins that can contain multiple middlewares as well as an init function."
              },
              "parameters": [
                {
                  "id": 184,
                  "name": "key",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExported": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ],
          "children": [
            {
              "id": 179,
              "name": "init",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 178,
                  "character": 8
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 180,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 181,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 182,
                          "name": "botkit",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "reference",
                            "id": 185,
                            "name": "Botkit"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 178,
                      "character": 10
                    }
                  ]
                }
              }
            },
            {
              "id": 175,
              "name": "middlewares",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 175,
                  "character": 15
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 176,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "indexSignature": [
                    {
                      "id": 177,
                      "name": "__index",
                      "kind": 8192,
                      "kindString": "Index signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 178,
                          "name": "key",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "any"
                        }
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 175,
                      "character": 17
                    }
                  ]
                }
              }
            },
            {
              "id": 174,
              "name": "name",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 174,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                179,
                175,
                174
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core.ts",
              "line": 173,
              "character": 29
            }
          ],
          "props": [
            {
              "id": 179,
              "name": "init",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 178,
                  "character": 8
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 180,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 181,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 182,
                          "name": "botkit",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "reference",
                            "id": 185,
                            "name": "Botkit"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 178,
                      "character": 10
                    }
                  ]
                }
              }
            },
            {
              "id": 175,
              "name": "middlewares",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 175,
                  "character": 15
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 176,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "indexSignature": [
                    {
                      "id": 177,
                      "name": "__index",
                      "kind": 8192,
                      "kindString": "Index signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 178,
                          "name": "key",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "intrinsic",
                          "name": "any"
                        }
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "core.ts",
                      "line": 175,
                      "character": 17
                    }
                  ]
                }
              }
            },
            {
              "id": 174,
              "name": "name",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 174,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 166,
          "name": "BotkitTrigger",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "Defines a trigger, including the type, pattern and handler function to fire if triggered."
          },
          "children": [
            {
              "id": 172,
              "name": "handler",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 167,
                  "character": 11
                }
              ],
              "type": {
                "type": "reference",
                "id": 162,
                "name": "BotkitHandler"
              }
            },
            {
              "id": 168,
              "name": "pattern",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 166,
                  "character": 11
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "reference",
                    "name": "RegExp"
                  },
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 169,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 170,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 171,
                              "name": "message",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 152,
                                "name": "BotkitMessage"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "intrinsic",
                                "name": "boolean"
                              }
                            ],
                            "name": "Promise"
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "core.ts",
                          "line": 166,
                          "character": 30
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "id": 167,
              "name": "type",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "string, regexp or function"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 165,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                172,
                168,
                167
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core.ts",
              "line": 161,
              "character": 23
            }
          ],
          "props": [
            {
              "id": 172,
              "name": "handler",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 167,
                  "character": 11
                }
              ],
              "type": {
                "type": "reference",
                "id": 162,
                "name": "BotkitHandler"
              }
            },
            {
              "id": 168,
              "name": "pattern",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 166,
                  "character": 11
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "reference",
                    "name": "RegExp"
                  },
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 169,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "signatures": [
                        {
                          "id": 170,
                          "name": "__call",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {},
                          "parameters": [
                            {
                              "id": 171,
                              "name": "message",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "id": 152,
                                "name": "BotkitMessage"
                              }
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "intrinsic",
                                "name": "boolean"
                              }
                            ],
                            "name": "Promise"
                          }
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "core.ts",
                          "line": 166,
                          "character": 30
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "id": 167,
              "name": "type",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "string, regexp or function"
              },
              "sources": [
                {
                  "fileName": "core.ts",
                  "line": 165,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Botkit for the Web",
      "packageName": "botbuilder-adapter-web",
      "path": "reference/web.md",
      "classes": [
        {
          "id": 2,
          "name": "WebAdapter",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Connect [Botkit](https://www.npmjs.com/package/botkit) or [BotBuilder](https://www.npmjs.com/package/botbuilder) to the Web.\nIt offers both websocket and webhook capabilities.\nTo use this adapter, you will need a compatible chat client - generate one using the [Botkit yeoman generator](https://npmjs.com/package/generator-botkit),\nor use [the one included in the project repo here.](https://github.com/howdyai/botkit/tree/master/packages/botbuilder-adapter-web/client)"
          },
          "children": [
            {
              "id": 5,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create an adapter to handle incoming messages from a websocket and/or webhook and translate them into a standard format for processing by your bot.",
                "text": "To use with Botkit:\n```javascript\nconst adapter = new WebAdapter();\nconst controller = new Botkit({\n     adapter: adapter,\n     // other options\n});\n```\n\nTo use with BotBuilder:\n```javascript\nconst adapter = new WebAdapter();\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\n// instead of binding processActivity to the incoming request, pass in turn handler logic to createSocketServer\nlet options = {}; // socket server configuration options\nadapter.createSocketServer(server, options, async(context) => {\n // handle turn here\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 6,
                  "name": "new WebAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create an adapter to handle incoming messages from a websocket and/or webhook and translate them into a standard format for processing by your bot.",
                    "text": "To use with Botkit:\n```javascript\nconst adapter = new WebAdapter();\nconst controller = new Botkit({\n     adapter: adapter,\n     // other options\n});\n```\n\nTo use with BotBuilder:\n```javascript\nconst adapter = new WebAdapter();\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\n// instead of binding processActivity to the incoming request, pass in turn handler logic to createSocketServer\nlet options = {}; // socket server configuration options\nadapter.createSocketServer(server, options, async(context) => {\n // handle turn here\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 7,
                      "name": "socketServerOptions",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "an optional object containing parameters to send to a call to [WebSocket.server](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback).\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 8,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "indexSignature": [
                            {
                              "id": 9,
                              "name": "__index",
                              "kind": 8192,
                              "kindString": "Index signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 10,
                                  "name": "key",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                }
                              ],
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "web_adapter.ts",
                              "line": 64,
                              "character": 44
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "WebAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 36,
                  "character": 6
                }
              ]
            },
            {
              "id": 4,
              "name": "wss",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The websocket server."
              },
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 32,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 31,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 32,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 33,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 34,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 35,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 36,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 37,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "web_adapter.ts",
                              "line": 252,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 252,
                  "character": 37
                }
              ]
            },
            {
              "id": 14,
              "name": "createSocketServer",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 15,
                  "name": "createSocketServer",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a websocket listener to an existing webserver object.\nNote: Create the server using Node's http.createServer"
                  },
                  "parameters": [
                    {
                      "id": 16,
                      "name": "server",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an http server"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 17,
                      "name": "socketOptions",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "additional options passed when creating the websocket server with [WebSocket.server](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback)"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      },
                      "defaultValue": "{}"
                    },
                    {
                      "id": 18,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a turn handler function in the form `async(context)=>{ ... }` that will handle the bot's logic.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 88,
                  "character": 29
                }
              ]
            },
            {
              "id": 49,
              "name": "getConnection",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 50,
                  "name": "getConnection",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Returns websocket connection of given user\nExample: `if (message.action === 'disconnect') bot.controller.adapter.getConnection(message.user).terminate()`"
                  },
                  "parameters": [
                    {
                      "id": 51,
                      "name": "user",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "name": "WebSocket"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 327,
                  "character": 24
                }
              ]
            },
            {
              "id": 11,
              "name": "init",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 12,
                  "name": "init",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Botkit-only: Initialization function called automatically when used with Botkit.\n     * Calls createSocketServer to bind a websocket listener to Botkit's pre-existing webserver."
                  },
                  "parameters": [
                    {
                      "id": 13,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 74,
                  "character": 15
                }
              ]
            },
            {
              "id": 46,
              "name": "isConnected",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 47,
                  "name": "isConnected",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Is given user currently connected? Use this to test the websocket connection\nbetween the bot and a given user before sending messages,\nparticularly in cases where a long period of time may have passed.",
                    "text": "Example: `bot.controller.adapter.isConnected(message.user)`"
                  },
                  "parameters": [
                    {
                      "id": 48,
                      "name": "user",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the id of a user, typically from `message.user`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 318,
                  "character": 22
                }
              ]
            },
            {
              "id": 38,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 39,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 40,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 41,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 42,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 43,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 44,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 45,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "web_adapter.ts",
                              "line": 269,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 269,
                  "character": 32
                }
              ]
            },
            {
              "id": 19,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 20,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 21,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 22,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 193,
                  "character": 31
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                5
              ]
            },
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                4
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                31,
                14,
                49,
                11,
                46,
                38,
                19
              ]
            }
          ],
          "sources": [
            {
              "fileName": "web_adapter.ts",
              "line": 22,
              "character": 23
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 4,
              "name": "wss",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The websocket server."
              },
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 32,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ],
          "methods": [
            {
              "id": 31,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 32,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 33,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 34,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 35,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 36,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 37,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "web_adapter.ts",
                              "line": 252,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 252,
                  "character": 37
                }
              ]
            },
            {
              "id": 14,
              "name": "createSocketServer",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 15,
                  "name": "createSocketServer",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a websocket listener to an existing webserver object.\nNote: Create the server using Node's http.createServer"
                  },
                  "parameters": [
                    {
                      "id": 16,
                      "name": "server",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an http server"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 17,
                      "name": "socketOptions",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "additional options passed when creating the websocket server with [WebSocket.server](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback)"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      },
                      "defaultValue": "{}"
                    },
                    {
                      "id": 18,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a turn handler function in the form `async(context)=>{ ... }` that will handle the bot's logic.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 88,
                  "character": 29
                }
              ]
            },
            {
              "id": 49,
              "name": "getConnection",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 50,
                  "name": "getConnection",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Returns websocket connection of given user\nExample: `if (message.action === 'disconnect') bot.controller.adapter.getConnection(message.user).terminate()`"
                  },
                  "parameters": [
                    {
                      "id": 51,
                      "name": "user",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "name": "WebSocket"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 327,
                  "character": 24
                }
              ]
            },
            {
              "id": 11,
              "name": "init",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 12,
                  "name": "init",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Botkit-only: Initialization function called automatically when used with Botkit.\n     * Calls createSocketServer to bind a websocket listener to Botkit's pre-existing webserver."
                  },
                  "parameters": [
                    {
                      "id": 13,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 74,
                  "character": 15
                }
              ]
            },
            {
              "id": 46,
              "name": "isConnected",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 47,
                  "name": "isConnected",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Is given user currently connected? Use this to test the websocket connection\nbetween the bot and a given user before sending messages,\nparticularly in cases where a long period of time may have passed.",
                    "text": "Example: `bot.controller.adapter.isConnected(message.user)`"
                  },
                  "parameters": [
                    {
                      "id": 48,
                      "name": "user",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the id of a user, typically from `message.user`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 318,
                  "character": 22
                }
              ]
            },
            {
              "id": 38,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 39,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 40,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 41,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 42,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 43,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 44,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 45,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "web_adapter.ts",
                              "line": 269,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 269,
                  "character": 32
                }
              ]
            },
            {
              "id": 19,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 20,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 21,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 22,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 193,
                  "character": 31
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 5,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create an adapter to handle incoming messages from a websocket and/or webhook and translate them into a standard format for processing by your bot.",
                "text": "To use with Botkit:\n```javascript\nconst adapter = new WebAdapter();\nconst controller = new Botkit({\n     adapter: adapter,\n     // other options\n});\n```\n\nTo use with BotBuilder:\n```javascript\nconst adapter = new WebAdapter();\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\n// instead of binding processActivity to the incoming request, pass in turn handler logic to createSocketServer\nlet options = {}; // socket server configuration options\nadapter.createSocketServer(server, options, async(context) => {\n // handle turn here\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 6,
                  "name": "new WebAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create an adapter to handle incoming messages from a websocket and/or webhook and translate them into a standard format for processing by your bot.",
                    "text": "To use with Botkit:\n```javascript\nconst adapter = new WebAdapter();\nconst controller = new Botkit({\n     adapter: adapter,\n     // other options\n});\n```\n\nTo use with BotBuilder:\n```javascript\nconst adapter = new WebAdapter();\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\n// instead of binding processActivity to the incoming request, pass in turn handler logic to createSocketServer\nlet options = {}; // socket server configuration options\nadapter.createSocketServer(server, options, async(context) => {\n // handle turn here\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 7,
                      "name": "socketServerOptions",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "an optional object containing parameters to send to a call to [WebSocket.server](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback).\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 8,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "indexSignature": [
                            {
                              "id": 9,
                              "name": "__index",
                              "kind": 8192,
                              "kindString": "Index signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 10,
                                  "name": "key",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                }
                              ],
                              "type": {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "web_adapter.ts",
                              "line": 64,
                              "character": 44
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "WebAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "web_adapter.ts",
                  "line": 36,
                  "character": 6
                }
              ]
            }
          ]
        }
      ],
      "interfaces": []
    },
    {
      "name": "Botkit for Webex Teams",
      "packageName": "botbuilder-adapter-webex",
      "path": "reference/webex.md",
      "classes": [
        {
          "id": 30,
          "name": "WebexAdapter",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Connect [Botkit](https://www.npmjs.com/package/botkit) or [BotBuilder](https://www.npmjs.com/package/botbuilder) to Webex Teams."
          },
          "children": [
            {
              "id": 34,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a Webex adapter. See [WebexAdapterOptions](#webexadapteroptions) for a full definition of the allowed parameters.",
                "text": "Use with Botkit:\n```javascript\nconst adapter = new WebexAdapter({\n     access_token: process.env.ACCESS_TOKEN, // access token from https://developer.webex.com\n     public_address: process.env.PUBLIC_ADDRESS,  // public url of this app https://myapp.com/\n     secret: process.env.SECRET // webhook validation secret - you can define this yourself\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new WebexAdapter({\n     access_token: process.env.ACCESS_TOKEN, // access token from https://developer.webex.com\n     public_address: process.env.PUBLIC_ADDRESS,  // public url of this app https://myapp.com/\n     secret: process.env.SECRET // webhook validation secret - you can define this yourself\n});\n\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\n// register the webhook subscription to start receiving messages - Botkit does this automatically!\nadapter.registerWebhookSubscription('/api/messages');\n// Load up the bot's identity, otherwise it won't know how to filter messages from itself\nadapter.getIdentity();\n// create an endpoint for receiving messages\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 35,
                  "name": "new WebexAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a Webex adapter. See [WebexAdapterOptions](#webexadapteroptions) for a full definition of the allowed parameters.",
                    "text": "Use with Botkit:\n```javascript\nconst adapter = new WebexAdapter({\n     access_token: process.env.ACCESS_TOKEN, // access token from https://developer.webex.com\n     public_address: process.env.PUBLIC_ADDRESS,  // public url of this app https://myapp.com/\n     secret: process.env.SECRET // webhook validation secret - you can define this yourself\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new WebexAdapter({\n     access_token: process.env.ACCESS_TOKEN, // access token from https://developer.webex.com\n     public_address: process.env.PUBLIC_ADDRESS,  // public url of this app https://myapp.com/\n     secret: process.env.SECRET // webhook validation secret - you can define this yourself\n});\n\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\n// register the webhook subscription to start receiving messages - Botkit does this automatically!\nadapter.registerWebhookSubscription('/api/messages');\n// Load up the bot's identity, otherwise it won't know how to filter messages from itself\nadapter.getIdentity();\n// create an endpoint for receiving messages\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 36,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "id": 24,
                        "name": "WebexAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 30,
                    "name": "WebexAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 67,
                  "character": 42
                }
              ]
            },
            {
              "id": 39,
              "name": "identity",
              "kind": 262144,
              "kindString": "Accessor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the identity of the bot, including {id, emails, displayName, created} and anything else from [this spec](https://webex.github.io/spark-js-sdk/api/#personobject)"
              },
              "getSignature": [
                {
                  "id": 40,
                  "name": "__get",
                  "kind": 524288,
                  "kindString": "Get signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Returns the identity of the bot, including {id, emails, displayName, created} and anything else from [this spec](https://webex.github.io/spark-js-sdk/api/#personobject)"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 212,
                  "character": 23
                }
              ]
            },
            {
              "id": 64,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 65,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 66,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 67,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 68,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 69,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 70,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "webex_adapter.ts",
                              "line": 450,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 450,
                  "character": 37
                }
              ]
            },
            {
              "id": 60,
              "name": "deleteActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 61,
                  "name": "deleteActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to delete a previous message.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#deleteactivity)."
                  },
                  "parameters": [
                    {
                      "id": 62,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 63,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{activityId: <id of message to delete>, conversation: { id: <id of slack channel>}}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 432,
                  "character": 31
                }
              ]
            },
            {
              "id": 37,
              "name": "getIdentity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 38,
                  "name": "getIdentity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load the bot's identity via the Webex API.\nMUST be called by BotBuilder bots in order to filter messages sent by the bot."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 193,
                  "character": 28
                }
              ]
            },
            {
              "id": 41,
              "name": "init",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 42,
                  "name": "init",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Botkit-only: Initialization function called automatically when used with Botkit.\n     * Calls registerWebhookSubscription() during bootup.\n     * Calls getIdentit() to load the bot's identity."
                  },
                  "parameters": [
                    {
                      "id": 43,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 221,
                  "character": 15
                }
              ]
            },
            {
              "id": 71,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 72,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 73,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 74,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 75,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 76,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 77,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 78,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "webex_adapter.ts",
                              "line": 467,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 467,
                  "character": 32
                }
              ]
            },
            {
              "id": 49,
              "name": "registerAdaptiveCardWebhookSubscription",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 50,
                  "name": "registerAdaptiveCardWebhookSubscription",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Register a webhook subscription with Webex Teams to start receiving message events."
                  },
                  "parameters": [
                    {
                      "id": 51,
                      "name": "webhook_path",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the path of the webhook endpoint like `/api/messages`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 309,
                  "character": 50
                }
              ]
            },
            {
              "id": 46,
              "name": "registerWebhookSubscription",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 47,
                  "name": "registerWebhookSubscription",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Register a webhook subscription with Webex Teams to start receiving message events."
                  },
                  "parameters": [
                    {
                      "id": 48,
                      "name": "webhook_path",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the path of the webhook endpoint like `/api/messages`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 256,
                  "character": 38
                }
              ]
            },
            {
              "id": 44,
              "name": "resetWebhookSubscriptions",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 45,
                  "name": "resetWebhookSubscriptions",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Clear out and reset all the webhook subscriptions currently associated with this application."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 241,
                  "character": 42
                }
              ]
            },
            {
              "id": 52,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 53,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 54,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 55,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 364,
                  "character": 31
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                34
              ]
            },
            {
              "title": "Accessors",
              "kind": 262144,
              "children": [
                39
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                64,
                60,
                37,
                41,
                71,
                49,
                46,
                44,
                52
              ]
            }
          ],
          "sources": [
            {
              "fileName": "webex_adapter.ts",
              "line": 45,
              "character": 25
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 39,
              "name": "identity",
              "kind": 262144,
              "kindString": "Accessor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the identity of the bot, including {id, emails, displayName, created} and anything else from [this spec](https://webex.github.io/spark-js-sdk/api/#personobject)"
              },
              "getSignature": [
                {
                  "id": 40,
                  "name": "__get",
                  "kind": 524288,
                  "kindString": "Get signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Returns the identity of the bot, including {id, emails, displayName, created} and anything else from [this spec](https://webex.github.io/spark-js-sdk/api/#personobject)"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 212,
                  "character": 23
                }
              ]
            }
          ],
          "methods": [
            {
              "id": 64,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 65,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 66,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 67,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 68,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 69,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 70,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "webex_adapter.ts",
                              "line": 450,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 450,
                  "character": 37
                }
              ]
            },
            {
              "id": 60,
              "name": "deleteActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 61,
                  "name": "deleteActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to delete a previous message.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#deleteactivity)."
                  },
                  "parameters": [
                    {
                      "id": 62,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 63,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{activityId: <id of message to delete>, conversation: { id: <id of slack channel>}}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 432,
                  "character": 31
                }
              ]
            },
            {
              "id": 37,
              "name": "getIdentity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 38,
                  "name": "getIdentity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load the bot's identity via the Webex API.\nMUST be called by BotBuilder bots in order to filter messages sent by the bot."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 193,
                  "character": 28
                }
              ]
            },
            {
              "id": 41,
              "name": "init",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 42,
                  "name": "init",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Botkit-only: Initialization function called automatically when used with Botkit.\n     * Calls registerWebhookSubscription() during bootup.\n     * Calls getIdentit() to load the bot's identity."
                  },
                  "parameters": [
                    {
                      "id": 43,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 221,
                  "character": 15
                }
              ]
            },
            {
              "id": 71,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 72,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 73,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 74,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 75,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 76,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 77,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 78,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "webex_adapter.ts",
                              "line": 467,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 467,
                  "character": 32
                }
              ]
            },
            {
              "id": 49,
              "name": "registerAdaptiveCardWebhookSubscription",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 50,
                  "name": "registerAdaptiveCardWebhookSubscription",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Register a webhook subscription with Webex Teams to start receiving message events."
                  },
                  "parameters": [
                    {
                      "id": 51,
                      "name": "webhook_path",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the path of the webhook endpoint like `/api/messages`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 309,
                  "character": 50
                }
              ]
            },
            {
              "id": 46,
              "name": "registerWebhookSubscription",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 47,
                  "name": "registerWebhookSubscription",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Register a webhook subscription with Webex Teams to start receiving message events."
                  },
                  "parameters": [
                    {
                      "id": 48,
                      "name": "webhook_path",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the path of the webhook endpoint like `/api/messages`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 256,
                  "character": 38
                }
              ]
            },
            {
              "id": 44,
              "name": "resetWebhookSubscriptions",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 45,
                  "name": "resetWebhookSubscriptions",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Clear out and reset all the webhook subscriptions currently associated with this application."
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 241,
                  "character": 42
                }
              ]
            },
            {
              "id": 52,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 53,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 54,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 55,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 364,
                  "character": 31
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 34,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a Webex adapter. See [WebexAdapterOptions](#webexadapteroptions) for a full definition of the allowed parameters.",
                "text": "Use with Botkit:\n```javascript\nconst adapter = new WebexAdapter({\n     access_token: process.env.ACCESS_TOKEN, // access token from https://developer.webex.com\n     public_address: process.env.PUBLIC_ADDRESS,  // public url of this app https://myapp.com/\n     secret: process.env.SECRET // webhook validation secret - you can define this yourself\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new WebexAdapter({\n     access_token: process.env.ACCESS_TOKEN, // access token from https://developer.webex.com\n     public_address: process.env.PUBLIC_ADDRESS,  // public url of this app https://myapp.com/\n     secret: process.env.SECRET // webhook validation secret - you can define this yourself\n});\n\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\n// register the webhook subscription to start receiving messages - Botkit does this automatically!\nadapter.registerWebhookSubscription('/api/messages');\n// Load up the bot's identity, otherwise it won't know how to filter messages from itself\nadapter.getIdentity();\n// create an endpoint for receiving messages\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 35,
                  "name": "new WebexAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a Webex adapter. See [WebexAdapterOptions](#webexadapteroptions) for a full definition of the allowed parameters.",
                    "text": "Use with Botkit:\n```javascript\nconst adapter = new WebexAdapter({\n     access_token: process.env.ACCESS_TOKEN, // access token from https://developer.webex.com\n     public_address: process.env.PUBLIC_ADDRESS,  // public url of this app https://myapp.com/\n     secret: process.env.SECRET // webhook validation secret - you can define this yourself\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new WebexAdapter({\n     access_token: process.env.ACCESS_TOKEN, // access token from https://developer.webex.com\n     public_address: process.env.PUBLIC_ADDRESS,  // public url of this app https://myapp.com/\n     secret: process.env.SECRET // webhook validation secret - you can define this yourself\n});\n\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\n// register the webhook subscription to start receiving messages - Botkit does this automatically!\nadapter.registerWebhookSubscription('/api/messages');\n// Load up the bot's identity, otherwise it won't know how to filter messages from itself\nadapter.getIdentity();\n// create an endpoint for receiving messages\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 36,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "id": 24,
                        "name": "WebexAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 30,
                    "name": "WebexAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 67,
                  "character": 42
                }
              ]
            }
          ]
        },
        {
          "id": 2,
          "name": "WebexBotWorker",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This is a specialized version of [Botkit's core BotWorker class](core.md#BotWorker) that includes additional methods for interacting with Webex Teams.\nIt includes all functionality from the base class, as well as the extension methods below.",
            "text": "When using the WebexAdapter with Botkit, all `bot` objects passed to handler functions will include these extensions.\n"
          },
          "children": [
            {
              "id": 3,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An instance of the [webex api client](https://www.npmjs.com/package/webex)"
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 22,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "Webex"
              }
            },
            {
              "id": 20,
              "name": "deleteMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 21,
                  "name": "deleteMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Delete an existing message.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// delete the sent message using the sent.id field\nawait bot.deleteMessage(sent);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 22,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form of `{id: <id of message to delete>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 157,
                  "character": 30
                }
              ]
            },
            {
              "id": 16,
              "name": "replyInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 17,
                  "name": "replyInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but as a threaded response to the incoming message rather than a new message in the main channel."
                  },
                  "parameters": [
                    {
                      "id": 18,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 19,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 138,
                  "character": 30
                }
              ]
            },
            {
              "id": 7,
              "name": "startConversationInRoom",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 8,
                  "name": "startConversationInRoom",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context into a different room.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('take this offline', 'message', async(bot, message) => {\n\n     // switch to a different channel\n     await bot.startConversationInRoom(WEBEX_ROOM_ID, message.user);\n\n     // say hello\n     await bot.say('Shall we discuss this matter over here?');\n     // ... continue...\n     await bot.beginDialog(ANOTHER_DIALOG);\n\n});\n```\n\nAlso useful when sending pro-active messages such as those sent on a schedule or in response to external events:\n```javascript\n// Spawn a worker\nlet bot = await controller.spawn();\n\n// Set the context for the bot's next action...\nawait bot.startConversationInRoom(CACHED_ROOM_ID, CACHED_USER_ID);\n\n// Begin a dialog in the 1:1 context\nawait bot.beginDialog(ALERT_DIALOG);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 9,
                      "name": "roomId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Webex rooom id, like one found in `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 10,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Webex user id, like one found in `message.user`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 75,
                  "character": 40
                }
              ]
            },
            {
              "id": 11,
              "name": "startConversationInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 12,
                  "name": "startConversationInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context into a specific thread within a room.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('take this offline', 'message', async(bot, message) => {\n\n     // switch to a different channel\n     await bot.startConversationInThread(WEBEX_ROOM_ID, message.user, message.id);\n\n     // say hello\n     await bot.say('Shall we discuss this matter over here?');\n     // ... continue...\n     await bot.beginDialog(ANOTHER_DIALOG);\n\n});\n```\n\nAlso useful when sending pro-active messages such as those sent on a schedule or in response to external events:\n```javascript\n// Spawn a worker\nlet bot = await controller.spawn();\n\n// Set the context for the bot's next action...\nawait bot.startConversationInRoom(CACHED_ROOM_ID, CACHED_USER_ID);\n\n// Begin a dialog in the 1:1 context\nawait bot.beginDialog(ALERT_DIALOG);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 13,
                      "name": "roomId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Webex rooom id, like one found in `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 14,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Webex user id, like one found in `message.user`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 15,
                      "name": "parentId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A webex message id that should be the parent message, like the one found in `message.id`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 120,
                  "character": 42
                }
              ]
            },
            {
              "id": 4,
              "name": "startPrivateConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "startPrivateConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Change the context of the _next_ message\nDue to a quirk in the Webex API, we can't know the address of the DM until after sending the first message.\nAs a result, the internal tracking for this conversation can't be persisted properly.\nUSE WITH CAUTION while we try to sort this out."
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "user id of a webex teams user, like one from `message.user`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 31,
                  "character": 41
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                3
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                20,
                16,
                7,
                11,
                4
              ]
            }
          ],
          "sources": [
            {
              "fileName": "botworker.ts",
              "line": 18,
              "character": 27
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 3,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An instance of the [webex api client](https://www.npmjs.com/package/webex)"
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 22,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "Webex"
              }
            }
          ],
          "methods": [
            {
              "id": 20,
              "name": "deleteMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 21,
                  "name": "deleteMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Delete an existing message.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// delete the sent message using the sent.id field\nawait bot.deleteMessage(sent);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 22,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form of `{id: <id of message to delete>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 157,
                  "character": 30
                }
              ]
            },
            {
              "id": 16,
              "name": "replyInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 17,
                  "name": "replyInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but as a threaded response to the incoming message rather than a new message in the main channel."
                  },
                  "parameters": [
                    {
                      "id": 18,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 19,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 138,
                  "character": 30
                }
              ]
            },
            {
              "id": 7,
              "name": "startConversationInRoom",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 8,
                  "name": "startConversationInRoom",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context into a different room.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('take this offline', 'message', async(bot, message) => {\n\n     // switch to a different channel\n     await bot.startConversationInRoom(WEBEX_ROOM_ID, message.user);\n\n     // say hello\n     await bot.say('Shall we discuss this matter over here?');\n     // ... continue...\n     await bot.beginDialog(ANOTHER_DIALOG);\n\n});\n```\n\nAlso useful when sending pro-active messages such as those sent on a schedule or in response to external events:\n```javascript\n// Spawn a worker\nlet bot = await controller.spawn();\n\n// Set the context for the bot's next action...\nawait bot.startConversationInRoom(CACHED_ROOM_ID, CACHED_USER_ID);\n\n// Begin a dialog in the 1:1 context\nawait bot.beginDialog(ALERT_DIALOG);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 9,
                      "name": "roomId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Webex rooom id, like one found in `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 10,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Webex user id, like one found in `message.user`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 75,
                  "character": 40
                }
              ]
            },
            {
              "id": 11,
              "name": "startConversationInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 12,
                  "name": "startConversationInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context into a specific thread within a room.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('take this offline', 'message', async(bot, message) => {\n\n     // switch to a different channel\n     await bot.startConversationInThread(WEBEX_ROOM_ID, message.user, message.id);\n\n     // say hello\n     await bot.say('Shall we discuss this matter over here?');\n     // ... continue...\n     await bot.beginDialog(ANOTHER_DIALOG);\n\n});\n```\n\nAlso useful when sending pro-active messages such as those sent on a schedule or in response to external events:\n```javascript\n// Spawn a worker\nlet bot = await controller.spawn();\n\n// Set the context for the bot's next action...\nawait bot.startConversationInRoom(CACHED_ROOM_ID, CACHED_USER_ID);\n\n// Begin a dialog in the 1:1 context\nawait bot.beginDialog(ALERT_DIALOG);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 13,
                      "name": "roomId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Webex rooom id, like one found in `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 14,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Webex user id, like one found in `message.user`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 15,
                      "name": "parentId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A webex message id that should be the parent message, like the one found in `message.id`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 120,
                  "character": 42
                }
              ]
            },
            {
              "id": 4,
              "name": "startPrivateConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "startPrivateConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Change the context of the _next_ message\nDue to a quirk in the Webex API, we can't know the address of the DM until after sending the first message.\nAs a result, the internal tracking for this conversation can't be persisted properly.\nUSE WITH CAUTION while we try to sort this out."
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "user id of a webex teams user, like one from `message.user`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 31,
                  "character": 41
                }
              ]
            }
          ],
          "constructors": []
        }
      ],
      "interfaces": [
        {
          "id": 24,
          "name": "WebexAdapterOptions",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "children": [
            {
              "id": 25,
              "name": "access_token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An access token for the bot. Get one from [https://developer.webex.com/](https://developer.webex.com/)"
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 21,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 29,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 39,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 27,
              "name": "public_address",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The root URL of your bot application.  Something like `https://mybot.com/`"
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 29,
                  "character": 18
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 26,
              "name": "secret",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Secret used to validate incoming webhooks - you can define this yourself"
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 25,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 28,
              "name": "webhook_name",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "a name for the webhook subscription that will be created to tell Webex to send your bot webhooks."
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 33,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                25,
                29,
                27,
                26,
                28
              ]
            }
          ],
          "sources": [
            {
              "fileName": "webex_adapter.ts",
              "line": 17,
              "character": 36
            }
          ],
          "props": [
            {
              "id": 25,
              "name": "access_token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An access token for the bot. Get one from [https://developer.webex.com/](https://developer.webex.com/)"
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 21,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 29,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 39,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 27,
              "name": "public_address",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The root URL of your bot application.  Something like `https://mybot.com/`"
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 29,
                  "character": 18
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 26,
              "name": "secret",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Secret used to validate incoming webhooks - you can define this yourself"
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 25,
                  "character": 10
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 28,
              "name": "webhook_name",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "a name for the webhook subscription that will be created to tell Webex to send your bot webhooks."
              },
              "sources": [
                {
                  "fileName": "webex_adapter.ts",
                  "line": 33,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Botkit for Slack",
      "packageName": "botbuilder-adapter-slack",
      "path": "reference/slack.md",
      "classes": [
        {
          "id": 60,
          "name": "SlackAdapter",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Connect [Botkit](https://www.npmjs.com/package/botkit) or [BotBuilder](https://www.npmjs.com/package/botbuilder) to Slack."
          },
          "children": [
            {
              "id": 64,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a Slack adapter.",
                "text": "The SlackAdapter can be used in 2 modes:\n     * As an \"[internal integration](https://api.slack.com/internal-integrations) connected to a single Slack workspace\n     * As a \"[Slack app](https://api.slack.com/slack-apps) that uses oauth to connect to multiple workspaces and can be submitted to the Slack app.\n\n[Read here for more information about all the ways to configure the SlackAdapter &rarr;](../../botbuilder-adapter-slack/readme.md).\n\nUse with Botkit:\n```javascript\nconst adapter = new SlackAdapter({\n     clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n     botToken: process.env.BOT_TOKEN\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new SlackAdapter({\n     clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n     botToken: process.env.BOT_TOKEN\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n\nUse in \"Slack app\" multi-team mode:\n```javascript\nconst adapter = new SlackAdapter({\n    clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n    clientId: process.env.CLIENT_ID, // oauth client id\n    clientSecret: process.env.CLIENT_SECRET, // oauth client secret\n    scopes: ['bot'], // oauth scopes requested\n    oauthVersion: 'v1',\n    redirectUri: process.env.REDIRECT_URI, // url to redirect post login defaults to `https://<mydomain>/install/auth`\n    getTokenForTeam: async(team_id) => Promise<string>, // function that returns a token based on team id\n    getBotUserByTeam: async(team_id) => Promise<string>, // function that returns a bot's user id based on team id\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 65,
                  "name": "new SlackAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a Slack adapter.",
                    "text": "The SlackAdapter can be used in 2 modes:\n     * As an \"[internal integration](https://api.slack.com/internal-integrations) connected to a single Slack workspace\n     * As a \"[Slack app](https://api.slack.com/slack-apps) that uses oauth to connect to multiple workspaces and can be submitted to the Slack app.\n\n[Read here for more information about all the ways to configure the SlackAdapter &rarr;](../../botbuilder-adapter-slack/readme.md).\n\nUse with Botkit:\n```javascript\nconst adapter = new SlackAdapter({\n     clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n     botToken: process.env.BOT_TOKEN\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new SlackAdapter({\n     clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n     botToken: process.env.BOT_TOKEN\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n\nUse in \"Slack app\" multi-team mode:\n```javascript\nconst adapter = new SlackAdapter({\n    clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n    clientId: process.env.CLIENT_ID, // oauth client id\n    clientSecret: process.env.CLIENT_SECRET, // oauth client secret\n    scopes: ['bot'], // oauth scopes requested\n    oauthVersion: 'v1',\n    redirectUri: process.env.REDIRECT_URI, // url to redirect post login defaults to `https://<mydomain>/install/auth`\n    getTokenForTeam: async(team_id) => Promise<string>, // function that returns a token based on team id\n    getBotUserByTeam: async(team_id) => Promise<string>, // function that returns a bot's user id based on team id\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 66,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "An object containing API credentials, a webhook verification token and other options\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 108,
                        "name": "SlackAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 60,
                    "name": "SlackAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 42,
                  "character": 42
                }
              ]
            },
            {
              "id": 78,
              "name": "activityToSlack",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 79,
                  "name": "activityToSlack",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Formats a BotBuilder activity into an outgoing Slack message.",
                    "returns": "a Slack message object with {text, attachments, channel, thread_ts} as well as any fields found in activity.channelData\n"
                  },
                  "parameters": [
                    {
                      "id": 80,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A BotBuilder Activity object"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 317,
                  "character": 26
                }
              ]
            },
            {
              "id": 93,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 94,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 95,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 96,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 97,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 98,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 99,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "slack_adapter.ts",
                              "line": 452,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 452,
                  "character": 37
                }
              ]
            },
            {
              "id": 89,
              "name": "deleteActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 90,
                  "name": "deleteActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to delete a previous message.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#deleteactivity)."
                  },
                  "parameters": [
                    {
                      "id": 91,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 92,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{activityId: <id of message to delete>, conversation: { id: <id of slack channel>}}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 429,
                  "character": 31
                }
              ]
            },
            {
              "id": 67,
              "name": "getAPI",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 68,
                  "name": "getAPI",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a Slack API client with the correct credentials based on the team identified in the incoming activity.\nThis is used by many internal functions to get access to the Slack API, and is exposed as `bot.api` on any bot worker instances."
                  },
                  "parameters": [
                    {
                      "id": 69,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message activity\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "WebClient"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 193,
                  "character": 23
                }
              ]
            },
            {
              "id": 70,
              "name": "getBotUserByTeam",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 71,
                  "name": "getBotUserByTeam",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the bot user id associated with the team on which an incoming activity originated. This is used internally by the SlackMessageTypeMiddleware to identify direct_mention and mention events.\nIn single-team mode, this will pull the information from the Slack API at launch.\nIn multi-team mode, this will use the `getBotUserByTeam` method passed to the constructor to pull the information from a developer-defined source."
                  },
                  "parameters": [
                    {
                      "id": 72,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message activity\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 219,
                  "character": 33
                }
              ]
            },
            {
              "id": 73,
              "name": "getInstallLink",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 74,
                  "name": "getInstallLink",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the oauth link for this bot, based on the clientId and scopes passed in to the constructor.",
                    "text": "An example using Botkit's internal webserver to configure the /install route:\n\n```javascript\ncontroller.webserver.get('/install', (req, res) => {\n res.redirect(controller.adapter.getInstallLink());\n});\n```\n",
                    "returns": "A url pointing to the first step in Slack's oauth flow.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 250,
                  "character": 25
                }
              ]
            },
            {
              "id": 100,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 101,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 102,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 103,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 104,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 105,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 106,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 107,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "slack_adapter.ts",
                              "line": 513,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 513,
                  "character": 32
                }
              ]
            },
            {
              "id": 81,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 82,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 83,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 84,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 361,
                  "character": 31
                }
              ]
            },
            {
              "id": 85,
              "name": "updateActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 86,
                  "name": "updateActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to update a previous message with new content.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#updateactivity)."
                  },
                  "parameters": [
                    {
                      "id": 87,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 88,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The updated activity in the form `{id: <id of activity to update>, ...}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 406,
                  "character": 31
                }
              ]
            },
            {
              "id": 75,
              "name": "validateOauthCode",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 76,
                  "name": "validateOauthCode",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Validates an oauth v2 code sent by Slack during the install process.",
                    "text": "An example using Botkit's internal webserver to configure the /install/auth route:\n\n```javascript\ncontroller.webserver.get('/install/auth', async (req, res) => {\n     try {\n         const results = await controller.adapter.validateOauthCode(req.query.code);\n         // make sure to capture the token and bot user id by team id...\n         const team_id = results.team.id;\n         const token = results.access_token;\n         const bot_user = results.bot_user_id;\n         // store these values in a way they'll be retrievable with getBotUserByTeam and getTokenForTeam\n     } catch (err) {\n          console.error('OAUTH ERROR:', err);\n          res.status(401);\n          res.send(err.message);\n     }\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 77,
                      "name": "code",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the value found in `req.query.code` as part of Slack's response to the oauth flow.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 291,
                  "character": 34
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                64
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                78,
                93,
                89,
                67,
                70,
                73,
                100,
                81,
                85,
                75
              ]
            }
          ],
          "sources": [
            {
              "fileName": "slack_adapter.ts",
              "line": 19,
              "character": 25
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 78,
              "name": "activityToSlack",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 79,
                  "name": "activityToSlack",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Formats a BotBuilder activity into an outgoing Slack message.",
                    "returns": "a Slack message object with {text, attachments, channel, thread_ts} as well as any fields found in activity.channelData\n"
                  },
                  "parameters": [
                    {
                      "id": 80,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A BotBuilder Activity object"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 317,
                  "character": 26
                }
              ]
            },
            {
              "id": 93,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 94,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 95,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 96,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 97,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 98,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 99,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "slack_adapter.ts",
                              "line": 452,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 452,
                  "character": 37
                }
              ]
            },
            {
              "id": 89,
              "name": "deleteActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 90,
                  "name": "deleteActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to delete a previous message.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#deleteactivity)."
                  },
                  "parameters": [
                    {
                      "id": 91,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 92,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{activityId: <id of message to delete>, conversation: { id: <id of slack channel>}}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 429,
                  "character": 31
                }
              ]
            },
            {
              "id": 67,
              "name": "getAPI",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 68,
                  "name": "getAPI",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a Slack API client with the correct credentials based on the team identified in the incoming activity.\nThis is used by many internal functions to get access to the Slack API, and is exposed as `bot.api` on any bot worker instances."
                  },
                  "parameters": [
                    {
                      "id": 69,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message activity\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "name": "WebClient"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 193,
                  "character": 23
                }
              ]
            },
            {
              "id": 70,
              "name": "getBotUserByTeam",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 71,
                  "name": "getBotUserByTeam",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the bot user id associated with the team on which an incoming activity originated. This is used internally by the SlackMessageTypeMiddleware to identify direct_mention and mention events.\nIn single-team mode, this will pull the information from the Slack API at launch.\nIn multi-team mode, this will use the `getBotUserByTeam` method passed to the constructor to pull the information from a developer-defined source."
                  },
                  "parameters": [
                    {
                      "id": 72,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message activity\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 219,
                  "character": 33
                }
              ]
            },
            {
              "id": 73,
              "name": "getInstallLink",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 74,
                  "name": "getInstallLink",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the oauth link for this bot, based on the clientId and scopes passed in to the constructor.",
                    "text": "An example using Botkit's internal webserver to configure the /install route:\n\n```javascript\ncontroller.webserver.get('/install', (req, res) => {\n res.redirect(controller.adapter.getInstallLink());\n});\n```\n",
                    "returns": "A url pointing to the first step in Slack's oauth flow.\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 250,
                  "character": 25
                }
              ]
            },
            {
              "id": 100,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 101,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 102,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 103,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 104,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 105,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 106,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 107,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "slack_adapter.ts",
                              "line": 513,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 513,
                  "character": 32
                }
              ]
            },
            {
              "id": 81,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 82,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 83,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 84,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 361,
                  "character": 31
                }
              ]
            },
            {
              "id": 85,
              "name": "updateActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 86,
                  "name": "updateActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to update a previous message with new content.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#updateactivity)."
                  },
                  "parameters": [
                    {
                      "id": 87,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 88,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The updated activity in the form `{id: <id of activity to update>, ...}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 406,
                  "character": 31
                }
              ]
            },
            {
              "id": 75,
              "name": "validateOauthCode",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 76,
                  "name": "validateOauthCode",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Validates an oauth v2 code sent by Slack during the install process.",
                    "text": "An example using Botkit's internal webserver to configure the /install/auth route:\n\n```javascript\ncontroller.webserver.get('/install/auth', async (req, res) => {\n     try {\n         const results = await controller.adapter.validateOauthCode(req.query.code);\n         // make sure to capture the token and bot user id by team id...\n         const team_id = results.team.id;\n         const token = results.access_token;\n         const bot_user = results.bot_user_id;\n         // store these values in a way they'll be retrievable with getBotUserByTeam and getTokenForTeam\n     } catch (err) {\n          console.error('OAUTH ERROR:', err);\n          res.status(401);\n          res.send(err.message);\n     }\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 77,
                      "name": "code",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the value found in `req.query.code` as part of Slack's response to the oauth flow.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 291,
                  "character": 34
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 64,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a Slack adapter.",
                "text": "The SlackAdapter can be used in 2 modes:\n     * As an \"[internal integration](https://api.slack.com/internal-integrations) connected to a single Slack workspace\n     * As a \"[Slack app](https://api.slack.com/slack-apps) that uses oauth to connect to multiple workspaces and can be submitted to the Slack app.\n\n[Read here for more information about all the ways to configure the SlackAdapter &rarr;](../../botbuilder-adapter-slack/readme.md).\n\nUse with Botkit:\n```javascript\nconst adapter = new SlackAdapter({\n     clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n     botToken: process.env.BOT_TOKEN\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new SlackAdapter({\n     clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n     botToken: process.env.BOT_TOKEN\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n\nUse in \"Slack app\" multi-team mode:\n```javascript\nconst adapter = new SlackAdapter({\n    clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n    clientId: process.env.CLIENT_ID, // oauth client id\n    clientSecret: process.env.CLIENT_SECRET, // oauth client secret\n    scopes: ['bot'], // oauth scopes requested\n    oauthVersion: 'v1',\n    redirectUri: process.env.REDIRECT_URI, // url to redirect post login defaults to `https://<mydomain>/install/auth`\n    getTokenForTeam: async(team_id) => Promise<string>, // function that returns a token based on team id\n    getBotUserByTeam: async(team_id) => Promise<string>, // function that returns a bot's user id based on team id\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 65,
                  "name": "new SlackAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a Slack adapter.",
                    "text": "The SlackAdapter can be used in 2 modes:\n     * As an \"[internal integration](https://api.slack.com/internal-integrations) connected to a single Slack workspace\n     * As a \"[Slack app](https://api.slack.com/slack-apps) that uses oauth to connect to multiple workspaces and can be submitted to the Slack app.\n\n[Read here for more information about all the ways to configure the SlackAdapter &rarr;](../../botbuilder-adapter-slack/readme.md).\n\nUse with Botkit:\n```javascript\nconst adapter = new SlackAdapter({\n     clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n     botToken: process.env.BOT_TOKEN\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new SlackAdapter({\n     clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n     botToken: process.env.BOT_TOKEN\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n\nUse in \"Slack app\" multi-team mode:\n```javascript\nconst adapter = new SlackAdapter({\n    clientSigningSecret: process.env.CLIENT_SIGNING_SECRET,\n    clientId: process.env.CLIENT_ID, // oauth client id\n    clientSecret: process.env.CLIENT_SECRET, // oauth client secret\n    scopes: ['bot'], // oauth scopes requested\n    oauthVersion: 'v1',\n    redirectUri: process.env.REDIRECT_URI, // url to redirect post login defaults to `https://<mydomain>/install/auth`\n    getTokenForTeam: async(team_id) => Promise<string>, // function that returns a token based on team id\n    getBotUserByTeam: async(team_id) => Promise<string>, // function that returns a bot's user id based on team id\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 66,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "An object containing API credentials, a webhook verification token and other options\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 108,
                        "name": "SlackAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 60,
                    "name": "SlackAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 42,
                  "character": 42
                }
              ]
            }
          ]
        },
        {
          "id": 2,
          "name": "SlackBotWorker",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This is a specialized version of [Botkit's core BotWorker class](core.md#BotWorker) that includes additional methods for interacting with Slack.\nIt includes all functionality from the base class, as well as the extension methods below.",
            "text": "When using the SlackAdapter with Botkit, all `bot` objects passed to handler functions will include these extensions.\n"
          },
          "children": [
            {
              "id": 4,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Reserved for use internally by Botkit's `controller.spawn()`, this class is used to create a BotWorker instance that can send messages, replies, and make other API calls.",
                "text": "It is possible to spawn a bot instance by passing in the Slack workspace ID of a team that has installed the app.\nUse this in concert with [startPrivateConversation()](#startPrivateConversation) and [changeContext()](core.md#changecontext) to start conversations\nor send proactive alerts to users on a schedule or in response to external events.\n\n\n```javascript\n// spawn a bot for a given team.\nlet bot = await controller.spawn('T0123456');\n\n// start a 1:1 with a specific user\nawait bot.startPrivateConversation('U0123456');\n\n// send a message\nawait bot.say('Hi user');\n```\n"
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "new SlackBotWorker",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reserved for use internally by Botkit's `controller.spawn()`, this class is used to create a BotWorker instance that can send messages, replies, and make other API calls.",
                    "text": "It is possible to spawn a bot instance by passing in the Slack workspace ID of a team that has installed the app.\nUse this in concert with [startPrivateConversation()](#startPrivateConversation) and [changeContext()](core.md#changecontext) to start conversations\nor send proactive alerts to users on a schedule or in response to external events.\n\n\n```javascript\n// spawn a bot for a given team.\nlet bot = await controller.spawn('T0123456');\n\n// start a 1:1 with a specific user\nawait bot.startPrivateConversation('U0123456');\n\n// send a message\nawait bot.say('Hi user');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "The Botkit controller object responsible for spawning this bot worker"
                      },
                      "type": {
                        "type": "reference",
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 7,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "Normally, a DialogContext object.  Can also be the id of a team.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "SlackBotWorker"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 23,
                  "character": 26
                }
              ]
            },
            {
              "id": 3,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A copy of hte Slack WebClient giving, giving access to all of Slack's APIs via `let res = await bot.api.object.method(params);`"
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 23,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "WebClient"
              }
            },
            {
              "id": 56,
              "name": "deleteMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 57,
                  "name": "deleteMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Delete an existing message.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// delete the sent message using the sent.id field\nawait bot.deleteMessage(sent);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 58,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form of `{id: <id of message to delete>, conversation: { id: <channel of message> }}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 358,
                  "character": 30
                }
              ]
            },
            {
              "id": 40,
              "name": "dialogError",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 41,
                  "name": "dialogError",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Return 1 or more error to a `dialog_submission` event that will be displayed as form validation errors.\nEach error must be mapped to the name of an input in the dialog."
                  },
                  "parameters": [
                    {
                      "id": 42,
                      "name": "errors",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "1 or more objects in form {name: string, error: string}\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 43,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "children": [
                                {
                                  "id": 45,
                                  "name": "error",
                                  "kind": 32,
                                  "kindString": "Variable",
                                  "flags": {
                                    "isExported": true,
                                    "isExternal": true
                                  },
                                  "sources": [
                                    {
                                      "fileName": "botworker.ts",
                                      "line": 296,
                                      "character": 51
                                    }
                                  ],
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                },
                                {
                                  "id": 44,
                                  "name": "name",
                                  "kind": 32,
                                  "kindString": "Variable",
                                  "flags": {
                                    "isExported": true,
                                    "isExternal": true
                                  },
                                  "sources": [
                                    {
                                      "fileName": "botworker.ts",
                                      "line": 296,
                                      "character": 36
                                    }
                                  ],
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                }
                              ],
                              "groups": [
                                {
                                  "title": "Variables",
                                  "kind": 32,
                                  "children": [
                                    45,
                                    44
                                  ]
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "botworker.ts",
                                  "line": 296,
                                  "character": 30
                                }
                              ]
                            }
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reflection",
                              "declaration": {
                                "id": 46,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {
                                  "isExported": true
                                },
                                "children": [
                                  {
                                    "id": 48,
                                    "name": "error",
                                    "kind": 32,
                                    "kindString": "Variable",
                                    "flags": {
                                      "isExported": true,
                                      "isExternal": true
                                    },
                                    "sources": [
                                      {
                                        "fileName": "botworker.ts",
                                        "line": 296,
                                        "character": 84
                                      }
                                    ],
                                    "type": {
                                      "type": "intrinsic",
                                      "name": "string"
                                    }
                                  },
                                  {
                                    "id": 47,
                                    "name": "name",
                                    "kind": 32,
                                    "kindString": "Variable",
                                    "flags": {
                                      "isExported": true,
                                      "isExternal": true
                                    },
                                    "sources": [
                                      {
                                        "fileName": "botworker.ts",
                                        "line": 296,
                                        "character": 69
                                      }
                                    ],
                                    "type": {
                                      "type": "intrinsic",
                                      "name": "string"
                                    }
                                  }
                                ],
                                "groups": [
                                  {
                                    "title": "Variables",
                                    "kind": 32,
                                    "children": [
                                      48,
                                      47
                                    ]
                                  }
                                ],
                                "sources": [
                                  {
                                    "fileName": "botworker.ts",
                                    "line": 296,
                                    "character": 62
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 296,
                  "character": 22
                }
              ]
            },
            {
              "id": 24,
              "name": "replyEphemeral",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 25,
                  "name": "replyEphemeral",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but sent as an \"ephemeral\" message meaning only the recipient can see it.\nUses [chat.postEphemeral](https://api.slack.com/methods/chat.postEphemeral)"
                  },
                  "parameters": [
                    {
                      "id": 26,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 27,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 207,
                  "character": 31
                }
              ]
            },
            {
              "id": 20,
              "name": "replyInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 21,
                  "name": "replyInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but as a threaded response to the incoming message rather than a new message in the main channel."
                  },
                  "parameters": [
                    {
                      "id": 22,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 23,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 194,
                  "character": 30
                }
              ]
            },
            {
              "id": 36,
              "name": "replyInteractive",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 37,
                  "name": "replyInteractive",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but used to respond to an `interactive_message` event and cause the original message to be replaced with a new one."
                  },
                  "parameters": [
                    {
                      "id": 38,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object of type `interactive_message`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 39,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a new or modified message that will replace the original one\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 254,
                  "character": 33
                }
              ]
            },
            {
              "id": 32,
              "name": "replyPrivate",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 33,
                  "name": "replyPrivate",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but used to send an immediate private reply to a /slash command.\nThe message in `resp` will be displayed only to the person who executed the slash command."
                  },
                  "parameters": [
                    {
                      "id": 34,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object of type `slash_command`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 35,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 240,
                  "character": 29
                }
              ]
            },
            {
              "id": 28,
              "name": "replyPublic",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 29,
                  "name": "replyPublic",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but used to send an immediate public reply to a /slash command.\nThe message in `resp` will be displayed to everyone in the channel."
                  },
                  "parameters": [
                    {
                      "id": 30,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object of type `slash_command`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 31,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 227,
                  "character": 28
                }
              ]
            },
            {
              "id": 49,
              "name": "replyWithDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 50,
                  "name": "replyWithDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to a button click with a request to open a dialog."
                  },
                  "parameters": [
                    {
                      "id": 51,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming `interactive_callback` event containing a `trigger_id` field"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 52,
                      "name": "dialog_obj",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A dialog, as created using [SlackDialog](#SlackDialog) or [authored to this spec](https://api.slack.com/dialogs).\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "Dialog"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 313,
                  "character": 32
                }
              ]
            },
            {
              "id": 11,
              "name": "startConversationInChannel",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 12,
                  "name": "startConversationInChannel",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context into a different channel.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('dm me', 'message', async(bot, message) => {\n\n     // switch to the channel specified in SLACK_CHANNEL_ID\n     // if just using bot.say and not starting a dialog, can use a fake value for user id.\n     await bot.startConversationInChannel(SLACK_CHANNEL_ID, message.user);\n\n     // say hello\n     await bot.say('Shall we discuss this matter over here?');\n     // ... continue...\n     await bot.beginDialog(ANOTHER_DIALOG);\n\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 13,
                      "name": "channelId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack channel id, like one found in `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 14,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack user id, like one found in `message.user` or in a `<@mention>`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 143,
                  "character": 43
                }
              ]
            },
            {
              "id": 15,
              "name": "startConversationInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 16,
                  "name": "startConversationInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context into a specific sub-thread within a channel.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('in a thread', 'message', async(bot, message) => {\n\n     // branch from the main channel into a side thread associated with this message\n     await bot.startConversationInThread(message.channel, message.user, message.ts);\n\n     // say hello\n     await bot.say(`Let's handle this offline...`);\n     // ... continue...\n     await bot.beginDialog(OFFLINE_DIALOG);\n\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 17,
                      "name": "channelId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack channel id, like one found in `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 18,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack user id, like one found in `message.user` or in a `<@mention>`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 19,
                      "name": "thread_ts",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A thread_ts value found in the `message.thread_ts` or `message.ts` field.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 176,
                  "character": 42
                }
              ]
            },
            {
              "id": 8,
              "name": "startPrivateConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 9,
                  "name": "startPrivateConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context to a 1:1 private message channel with a specific user.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('dm me', 'message', async(bot, message) => {\n\n     // switch to a 1:1 conversation in a DM\n     await bot.startPrivateConversation(message.user);\n\n     // say hello\n     await bot.say('We are in private now...');\n     await bot.beginDialog(MY_PRIVATE_DIALOG);\n\n});\n```\n\nAlso useful when sending pro-active messages such as those sent on a schedule or in response to external events:\n```javascript\n// Spawn a worker with a Slack team id.\nlet bot = await controller.spawn(SLACK_TEAM_ID);\n\n// Set the context for the bot's next action...\nawait bot.startPrivateConversation(SLACK_ADMIN_USER);\n\n// Begin a dialog in the 1:1 context\nawait bot.beginDialog(ALERT_DIALOG);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 10,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack user id, like one found in `message.user` or in a `<@mention>`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 101,
                  "character": 41
                }
              ]
            },
            {
              "id": 53,
              "name": "updateMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 54,
                  "name": "updateMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Update an existing message with new content.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// update the sent message using the sent.id field\nawait bot.updateMessage({\n     text: 'this is an update!',\n     ...sent\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 55,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{id: <id of message to update>, conversation: { id: <channel> }, text: <new text>, card: <array of card objects>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 338,
                  "character": 30
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                4
              ]
            },
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                3
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                56,
                40,
                24,
                20,
                36,
                32,
                28,
                49,
                11,
                15,
                8,
                53
              ]
            }
          ],
          "sources": [
            {
              "fileName": "botworker.ts",
              "line": 19,
              "character": 27
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 3,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A copy of hte Slack WebClient giving, giving access to all of Slack's APIs via `let res = await bot.api.object.method(params);`"
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 23,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "WebClient"
              }
            }
          ],
          "methods": [
            {
              "id": 56,
              "name": "deleteMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 57,
                  "name": "deleteMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Delete an existing message.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// delete the sent message using the sent.id field\nawait bot.deleteMessage(sent);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 58,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form of `{id: <id of message to delete>, conversation: { id: <channel of message> }}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 358,
                  "character": 30
                }
              ]
            },
            {
              "id": 40,
              "name": "dialogError",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 41,
                  "name": "dialogError",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Return 1 or more error to a `dialog_submission` event that will be displayed as form validation errors.\nEach error must be mapped to the name of an input in the dialog."
                  },
                  "parameters": [
                    {
                      "id": 42,
                      "name": "errors",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "1 or more objects in form {name: string, error: string}\n"
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reflection",
                            "declaration": {
                              "id": 43,
                              "name": "__type",
                              "kind": 65536,
                              "kindString": "Type literal",
                              "flags": {
                                "isExported": true
                              },
                              "children": [
                                {
                                  "id": 45,
                                  "name": "error",
                                  "kind": 32,
                                  "kindString": "Variable",
                                  "flags": {
                                    "isExported": true,
                                    "isExternal": true
                                  },
                                  "sources": [
                                    {
                                      "fileName": "botworker.ts",
                                      "line": 296,
                                      "character": 51
                                    }
                                  ],
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                },
                                {
                                  "id": 44,
                                  "name": "name",
                                  "kind": 32,
                                  "kindString": "Variable",
                                  "flags": {
                                    "isExported": true,
                                    "isExternal": true
                                  },
                                  "sources": [
                                    {
                                      "fileName": "botworker.ts",
                                      "line": 296,
                                      "character": 36
                                    }
                                  ],
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                }
                              ],
                              "groups": [
                                {
                                  "title": "Variables",
                                  "kind": 32,
                                  "children": [
                                    45,
                                    44
                                  ]
                                }
                              ],
                              "sources": [
                                {
                                  "fileName": "botworker.ts",
                                  "line": 296,
                                  "character": 30
                                }
                              ]
                            }
                          },
                          {
                            "type": "array",
                            "elementType": {
                              "type": "reflection",
                              "declaration": {
                                "id": 46,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {
                                  "isExported": true
                                },
                                "children": [
                                  {
                                    "id": 48,
                                    "name": "error",
                                    "kind": 32,
                                    "kindString": "Variable",
                                    "flags": {
                                      "isExported": true,
                                      "isExternal": true
                                    },
                                    "sources": [
                                      {
                                        "fileName": "botworker.ts",
                                        "line": 296,
                                        "character": 84
                                      }
                                    ],
                                    "type": {
                                      "type": "intrinsic",
                                      "name": "string"
                                    }
                                  },
                                  {
                                    "id": 47,
                                    "name": "name",
                                    "kind": 32,
                                    "kindString": "Variable",
                                    "flags": {
                                      "isExported": true,
                                      "isExternal": true
                                    },
                                    "sources": [
                                      {
                                        "fileName": "botworker.ts",
                                        "line": 296,
                                        "character": 69
                                      }
                                    ],
                                    "type": {
                                      "type": "intrinsic",
                                      "name": "string"
                                    }
                                  }
                                ],
                                "groups": [
                                  {
                                    "title": "Variables",
                                    "kind": 32,
                                    "children": [
                                      48,
                                      47
                                    ]
                                  }
                                ],
                                "sources": [
                                  {
                                    "fileName": "botworker.ts",
                                    "line": 296,
                                    "character": 62
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 296,
                  "character": 22
                }
              ]
            },
            {
              "id": 24,
              "name": "replyEphemeral",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 25,
                  "name": "replyEphemeral",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but sent as an \"ephemeral\" message meaning only the recipient can see it.\nUses [chat.postEphemeral](https://api.slack.com/methods/chat.postEphemeral)"
                  },
                  "parameters": [
                    {
                      "id": 26,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 27,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 207,
                  "character": 31
                }
              ]
            },
            {
              "id": 20,
              "name": "replyInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 21,
                  "name": "replyInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but as a threaded response to the incoming message rather than a new message in the main channel."
                  },
                  "parameters": [
                    {
                      "id": 22,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 23,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 194,
                  "character": 30
                }
              ]
            },
            {
              "id": 36,
              "name": "replyInteractive",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 37,
                  "name": "replyInteractive",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but used to respond to an `interactive_message` event and cause the original message to be replaced with a new one."
                  },
                  "parameters": [
                    {
                      "id": 38,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object of type `interactive_message`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 39,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "a new or modified message that will replace the original one\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 254,
                  "character": 33
                }
              ]
            },
            {
              "id": 32,
              "name": "replyPrivate",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 33,
                  "name": "replyPrivate",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but used to send an immediate private reply to a /slash command.\nThe message in `resp` will be displayed only to the person who executed the slash command."
                  },
                  "parameters": [
                    {
                      "id": 34,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object of type `slash_command`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 35,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 240,
                  "character": 29
                }
              ]
            },
            {
              "id": 28,
              "name": "replyPublic",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 29,
                  "name": "replyPublic",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Like bot.reply, but used to send an immediate public reply to a /slash command.\nThe message in `resp` will be displayed to everyone in the channel."
                  },
                  "parameters": [
                    {
                      "id": 30,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an incoming message object of type `slash_command`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 31,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "an outgoing message object (or part of one or just reply text)\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 227,
                  "character": 28
                }
              ]
            },
            {
              "id": 49,
              "name": "replyWithDialog",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 50,
                  "name": "replyWithDialog",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to a button click with a request to open a dialog."
                  },
                  "parameters": [
                    {
                      "id": 51,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming `interactive_callback` event containing a `trigger_id` field"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 52,
                      "name": "dialog_obj",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A dialog, as created using [SlackDialog](#SlackDialog) or [authored to this spec](https://api.slack.com/dialogs).\n"
                      },
                      "type": {
                        "type": "reference",
                        "name": "Dialog"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 313,
                  "character": 32
                }
              ]
            },
            {
              "id": 11,
              "name": "startConversationInChannel",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 12,
                  "name": "startConversationInChannel",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context into a different channel.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('dm me', 'message', async(bot, message) => {\n\n     // switch to the channel specified in SLACK_CHANNEL_ID\n     // if just using bot.say and not starting a dialog, can use a fake value for user id.\n     await bot.startConversationInChannel(SLACK_CHANNEL_ID, message.user);\n\n     // say hello\n     await bot.say('Shall we discuss this matter over here?');\n     // ... continue...\n     await bot.beginDialog(ANOTHER_DIALOG);\n\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 13,
                      "name": "channelId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack channel id, like one found in `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 14,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack user id, like one found in `message.user` or in a `<@mention>`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 143,
                  "character": 43
                }
              ]
            },
            {
              "id": 15,
              "name": "startConversationInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 16,
                  "name": "startConversationInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context into a specific sub-thread within a channel.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('in a thread', 'message', async(bot, message) => {\n\n     // branch from the main channel into a side thread associated with this message\n     await bot.startConversationInThread(message.channel, message.user, message.ts);\n\n     // say hello\n     await bot.say(`Let's handle this offline...`);\n     // ... continue...\n     await bot.beginDialog(OFFLINE_DIALOG);\n\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 17,
                      "name": "channelId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack channel id, like one found in `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 18,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack user id, like one found in `message.user` or in a `<@mention>`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 19,
                      "name": "thread_ts",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A thread_ts value found in the `message.thread_ts` or `message.ts` field.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 176,
                  "character": 42
                }
              ]
            },
            {
              "id": 8,
              "name": "startPrivateConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 9,
                  "name": "startPrivateConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch a bot's context to a 1:1 private message channel with a specific user.\nAfter calling this method, messages sent with `bot.say` and any dialogs started with `bot.beginDialog` will occur in this new context.",
                    "text": "```javascript\ncontroller.hears('dm me', 'message', async(bot, message) => {\n\n     // switch to a 1:1 conversation in a DM\n     await bot.startPrivateConversation(message.user);\n\n     // say hello\n     await bot.say('We are in private now...');\n     await bot.beginDialog(MY_PRIVATE_DIALOG);\n\n});\n```\n\nAlso useful when sending pro-active messages such as those sent on a schedule or in response to external events:\n```javascript\n// Spawn a worker with a Slack team id.\nlet bot = await controller.spawn(SLACK_TEAM_ID);\n\n// Set the context for the bot's next action...\nawait bot.startPrivateConversation(SLACK_ADMIN_USER);\n\n// Begin a dialog in the 1:1 context\nawait bot.beginDialog(ALERT_DIALOG);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 10,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Slack user id, like one found in `message.user` or in a `<@mention>`\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 101,
                  "character": 41
                }
              ]
            },
            {
              "id": 53,
              "name": "updateMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 54,
                  "name": "updateMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Update an existing message with new content.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// update the sent message using the sent.id field\nawait bot.updateMessage({\n     text: 'this is an update!',\n     ...sent\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 55,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{id: <id of message to update>, conversation: { id: <channel> }, text: <new text>, card: <array of card objects>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 338,
                  "character": 30
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 4,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Reserved for use internally by Botkit's `controller.spawn()`, this class is used to create a BotWorker instance that can send messages, replies, and make other API calls.",
                "text": "It is possible to spawn a bot instance by passing in the Slack workspace ID of a team that has installed the app.\nUse this in concert with [startPrivateConversation()](#startPrivateConversation) and [changeContext()](core.md#changecontext) to start conversations\nor send proactive alerts to users on a schedule or in response to external events.\n\n\n```javascript\n// spawn a bot for a given team.\nlet bot = await controller.spawn('T0123456');\n\n// start a 1:1 with a specific user\nawait bot.startPrivateConversation('U0123456');\n\n// send a message\nawait bot.say('Hi user');\n```\n"
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "new SlackBotWorker",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reserved for use internally by Botkit's `controller.spawn()`, this class is used to create a BotWorker instance that can send messages, replies, and make other API calls.",
                    "text": "It is possible to spawn a bot instance by passing in the Slack workspace ID of a team that has installed the app.\nUse this in concert with [startPrivateConversation()](#startPrivateConversation) and [changeContext()](core.md#changecontext) to start conversations\nor send proactive alerts to users on a schedule or in response to external events.\n\n\n```javascript\n// spawn a bot for a given team.\nlet bot = await controller.spawn('T0123456');\n\n// start a 1:1 with a specific user\nawait bot.startPrivateConversation('U0123456');\n\n// send a message\nawait bot.say('Hi user');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "The Botkit controller object responsible for spawning this bot worker"
                      },
                      "type": {
                        "type": "reference",
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 7,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "Normally, a DialogContext object.  Can also be the id of a team.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "SlackBotWorker"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 23,
                  "character": 26
                }
              ]
            }
          ]
        },
        {
          "id": 140,
          "name": "SlackDialog",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Create a Slack Dialog object for use with [replyWithDialog()](#replyWithDialog).",
            "text": "```javascript\nlet dialog = new SlackDialog('My Dialog', 'callback_123', 'Save');\ndialog.addText('Your full name', 'name').addEmail('Your email', 'email');\ndialog.notifyOnCancel(true);\nbot.replyWithDialog(message, dialog.asObject());\n```\n\n"
          },
          "children": [
            {
              "id": 141,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a new dialog object"
              },
              "signatures": [
                {
                  "id": 142,
                  "name": "new SlackDialog",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a new dialog object"
                  },
                  "parameters": [
                    {
                      "id": 143,
                      "name": "title",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "Title of dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 144,
                      "name": "callback_id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "Callback id of dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 145,
                      "name": "submit_label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "Label for the submit button"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 146,
                      "name": "elements",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "An array of dialog elements\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 21,
                  "character": 22
                }
              ]
            },
            {
              "id": 169,
              "name": "addEmail",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 170,
                  "name": "addEmail",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add an email input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 171,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 172,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 173,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 174,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 120,
                  "character": 19
                }
              ]
            },
            {
              "id": 175,
              "name": "addNumber",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 176,
                  "name": "addNumber",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a number input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 177,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 178,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 179,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 180,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 131,
                  "character": 20
                }
              ]
            },
            {
              "id": 200,
              "name": "addSelect",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 201,
                  "name": "addSelect",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a dropdown select input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 202,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 203,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 204,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            ],
                            "name": "Record"
                          },
                          {
                            "type": "intrinsic",
                            "name": "null"
                          }
                        ]
                      }
                    },
                    {
                      "id": 205,
                      "name": "option_list",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reflection",
                          "declaration": {
                            "id": 206,
                            "name": "__type",
                            "kind": 65536,
                            "kindString": "Type literal",
                            "flags": {
                              "isExported": true
                            },
                            "children": [
                              {
                                "id": 207,
                                "name": "label",
                                "kind": 32,
                                "kindString": "Variable",
                                "flags": {
                                  "isExported": true,
                                  "isExternal": true
                                },
                                "sources": [
                                  {
                                    "fileName": "slack_dialog.ts",
                                    "line": 192,
                                    "character": 123
                                  }
                                ],
                                "type": {
                                  "type": "intrinsic",
                                  "name": "string"
                                }
                              },
                              {
                                "id": 208,
                                "name": "value",
                                "kind": 32,
                                "kindString": "Variable",
                                "flags": {
                                  "isExported": true,
                                  "isExternal": true
                                },
                                "sources": [
                                  {
                                    "fileName": "slack_dialog.ts",
                                    "line": 192,
                                    "character": 138
                                  }
                                ],
                                "type": {
                                  "type": "union",
                                  "types": [
                                    {
                                      "type": "intrinsic",
                                      "name": "string"
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "number"
                                    },
                                    {
                                      "type": "reference",
                                      "typeArguments": [
                                        {
                                          "type": "intrinsic",
                                          "name": "string"
                                        },
                                        {
                                          "type": "intrinsic",
                                          "name": "any"
                                        }
                                      ],
                                      "name": "Record"
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "null"
                                    }
                                  ]
                                }
                              }
                            ],
                            "groups": [
                              {
                                "title": "Variables",
                                "kind": 32,
                                "children": [
                                  207,
                                  208
                                ]
                              }
                            ],
                            "sources": [
                              {
                                "fileName": "slack_dialog.ts",
                                "line": 192,
                                "character": 115
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "id": 209,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 192,
                  "character": 20
                }
              ]
            },
            {
              "id": 181,
              "name": "addTel",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 182,
                  "name": "addTel",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a telephone number input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 183,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 184,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 185,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 186,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 142,
                  "character": 17
                }
              ]
            },
            {
              "id": 162,
              "name": "addText",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 163,
                  "name": "addText",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a text input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 164,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        ]
                      }
                    },
                    {
                      "id": 165,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 166,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 167,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        ]
                      }
                    },
                    {
                      "id": 168,
                      "name": "subtype",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 94,
                  "character": 18
                }
              ]
            },
            {
              "id": 193,
              "name": "addTextarea",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 194,
                  "name": "addTextarea",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a text area input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 195,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 196,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 197,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 198,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 199,
                      "name": "subtype",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 165,
                  "character": 22
                }
              ]
            },
            {
              "id": 187,
              "name": "addUrl",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 188,
                  "name": "addUrl",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a URL input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 189,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 190,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 191,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 192,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 153,
                  "character": 17
                }
              ]
            },
            {
              "id": 212,
              "name": "asObject",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 213,
                  "name": "asObject",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the dialog object for use with bot.replyWithDialog()"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 220,
                  "character": 19
                }
              ]
            },
            {
              "id": 210,
              "name": "asString",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 211,
                  "name": "asString",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the dialog object as a JSON encoded string."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 213,
                  "character": 19
                }
              ]
            },
            {
              "id": 156,
              "name": "callback_id",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 157,
                  "name": "callback_id",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the dialog's callback_id"
                  },
                  "parameters": [
                    {
                      "id": 158,
                      "name": "v",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Value for the callback_id\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 72,
                  "character": 22
                }
              ]
            },
            {
              "id": 150,
              "name": "notifyOnCancel",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 151,
                  "name": "notifyOnCancel",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set true to have Slack notify you with a `dialog_cancellation` event if a user cancels the dialog without submitting"
                  },
                  "parameters": [
                    {
                      "id": 152,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "True or False\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 54,
                  "character": 25
                }
              ]
            },
            {
              "id": 147,
              "name": "state",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 148,
                  "name": "state",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the dialog's state field"
                  },
                  "parameters": [
                    {
                      "id": 149,
                      "name": "v",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "value for state\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 45,
                  "character": 16
                }
              ]
            },
            {
              "id": 159,
              "name": "submit_label",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 160,
                  "name": "submit_label",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the button text for the submit button on the dialog"
                  },
                  "parameters": [
                    {
                      "id": 161,
                      "name": "v",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Value for the button label\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 81,
                  "character": 23
                }
              ]
            },
            {
              "id": 153,
              "name": "title",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 154,
                  "name": "title",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the title of the dialog"
                  },
                  "parameters": [
                    {
                      "id": 155,
                      "name": "v",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Value for title\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 63,
                  "character": 16
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                141
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                169,
                175,
                200,
                181,
                162,
                193,
                187,
                212,
                210,
                156,
                150,
                147,
                159,
                153
              ]
            }
          ],
          "sources": [
            {
              "fileName": "slack_dialog.ts",
              "line": 20,
              "character": 24
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 169,
              "name": "addEmail",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 170,
                  "name": "addEmail",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add an email input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 171,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 172,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 173,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 174,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 120,
                  "character": 19
                }
              ]
            },
            {
              "id": 175,
              "name": "addNumber",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 176,
                  "name": "addNumber",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a number input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 177,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 178,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 179,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 180,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 131,
                  "character": 20
                }
              ]
            },
            {
              "id": 200,
              "name": "addSelect",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 201,
                  "name": "addSelect",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a dropdown select input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 202,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 203,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 204,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "intrinsic",
                                "name": "string"
                              },
                              {
                                "type": "intrinsic",
                                "name": "any"
                              }
                            ],
                            "name": "Record"
                          },
                          {
                            "type": "intrinsic",
                            "name": "null"
                          }
                        ]
                      }
                    },
                    {
                      "id": 205,
                      "name": "option_list",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reflection",
                          "declaration": {
                            "id": 206,
                            "name": "__type",
                            "kind": 65536,
                            "kindString": "Type literal",
                            "flags": {
                              "isExported": true
                            },
                            "children": [
                              {
                                "id": 207,
                                "name": "label",
                                "kind": 32,
                                "kindString": "Variable",
                                "flags": {
                                  "isExported": true,
                                  "isExternal": true
                                },
                                "sources": [
                                  {
                                    "fileName": "slack_dialog.ts",
                                    "line": 192,
                                    "character": 123
                                  }
                                ],
                                "type": {
                                  "type": "intrinsic",
                                  "name": "string"
                                }
                              },
                              {
                                "id": 208,
                                "name": "value",
                                "kind": 32,
                                "kindString": "Variable",
                                "flags": {
                                  "isExported": true,
                                  "isExternal": true
                                },
                                "sources": [
                                  {
                                    "fileName": "slack_dialog.ts",
                                    "line": 192,
                                    "character": 138
                                  }
                                ],
                                "type": {
                                  "type": "union",
                                  "types": [
                                    {
                                      "type": "intrinsic",
                                      "name": "string"
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "number"
                                    },
                                    {
                                      "type": "reference",
                                      "typeArguments": [
                                        {
                                          "type": "intrinsic",
                                          "name": "string"
                                        },
                                        {
                                          "type": "intrinsic",
                                          "name": "any"
                                        }
                                      ],
                                      "name": "Record"
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "null"
                                    }
                                  ]
                                }
                              }
                            ],
                            "groups": [
                              {
                                "title": "Variables",
                                "kind": 32,
                                "children": [
                                  207,
                                  208
                                ]
                              }
                            ],
                            "sources": [
                              {
                                "fileName": "slack_dialog.ts",
                                "line": 192,
                                "character": 115
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "id": 209,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 192,
                  "character": 20
                }
              ]
            },
            {
              "id": 181,
              "name": "addTel",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 182,
                  "name": "addTel",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a telephone number input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 183,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 184,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 185,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 186,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 142,
                  "character": 17
                }
              ]
            },
            {
              "id": 162,
              "name": "addText",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 163,
                  "name": "addText",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a text input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 164,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        ]
                      }
                    },
                    {
                      "id": 165,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 166,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 167,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        ]
                      }
                    },
                    {
                      "id": 168,
                      "name": "subtype",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 94,
                  "character": 18
                }
              ]
            },
            {
              "id": 193,
              "name": "addTextarea",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 194,
                  "name": "addTextarea",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a text area input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 195,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 196,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 197,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 198,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 199,
                      "name": "subtype",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 165,
                  "character": 22
                }
              ]
            },
            {
              "id": 187,
              "name": "addUrl",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 188,
                  "name": "addUrl",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Add a URL input to the dialog"
                  },
                  "parameters": [
                    {
                      "id": 189,
                      "name": "label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 190,
                      "name": "name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 191,
                      "name": "value",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 192,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 153,
                  "character": 17
                }
              ]
            },
            {
              "id": 212,
              "name": "asObject",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 213,
                  "name": "asObject",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the dialog object for use with bot.replyWithDialog()"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 220,
                  "character": 19
                }
              ]
            },
            {
              "id": 210,
              "name": "asString",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 211,
                  "name": "asString",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get the dialog object as a JSON encoded string."
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 213,
                  "character": 19
                }
              ]
            },
            {
              "id": 156,
              "name": "callback_id",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 157,
                  "name": "callback_id",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the dialog's callback_id"
                  },
                  "parameters": [
                    {
                      "id": 158,
                      "name": "v",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Value for the callback_id\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 72,
                  "character": 22
                }
              ]
            },
            {
              "id": 150,
              "name": "notifyOnCancel",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 151,
                  "name": "notifyOnCancel",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set true to have Slack notify you with a `dialog_cancellation` event if a user cancels the dialog without submitting"
                  },
                  "parameters": [
                    {
                      "id": 152,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "True or False\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 54,
                  "character": 25
                }
              ]
            },
            {
              "id": 147,
              "name": "state",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 148,
                  "name": "state",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the dialog's state field"
                  },
                  "parameters": [
                    {
                      "id": 149,
                      "name": "v",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "value for state\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 45,
                  "character": 16
                }
              ]
            },
            {
              "id": 159,
              "name": "submit_label",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 160,
                  "name": "submit_label",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the button text for the submit button on the dialog"
                  },
                  "parameters": [
                    {
                      "id": 161,
                      "name": "v",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Value for the button label\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 81,
                  "character": 23
                }
              ]
            },
            {
              "id": 153,
              "name": "title",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 154,
                  "name": "title",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Set the title of the dialog"
                  },
                  "parameters": [
                    {
                      "id": 155,
                      "name": "v",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Value for title\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 63,
                  "character": 16
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 141,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a new dialog object"
              },
              "signatures": [
                {
                  "id": 142,
                  "name": "new SlackDialog",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a new dialog object"
                  },
                  "parameters": [
                    {
                      "id": 143,
                      "name": "title",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "Title of dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 144,
                      "name": "callback_id",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "Callback id of dialog"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 145,
                      "name": "submit_label",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "Label for the submit button"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 146,
                      "name": "elements",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "shortText": "An array of dialog elements\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 140,
                    "name": "SlackDialog"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slack_dialog.ts",
                  "line": 21,
                  "character": 22
                }
              ]
            }
          ]
        },
        {
          "id": 223,
          "name": "SlackEventMiddleware",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "A middleware for Botkit developers using the BotBuilder SlackAdapter class.\nThis middleware causes Botkit to emit message events by their `type` or `subtype` field rather than their default BotBuilder Activity type (limited to message or event).\nThis keeps the new Botkit behavior consistent withprevious versions, and provides helpful filtering on the many event types that Slack sends.\nTo use this, bind it to the adapter before creating the Botkit controller:\n```javascript\nconst adapter = new SlackAdapter(options);\nadapter.use(new SlackEventMiddleware());\nconst controller = new Botkit({\n     adapter: adapter,\n     // ...\n});",
            "text": "// can bind directly to channel_join (which starts as a message with type message and subtype channel_join)\ncontroller.on('channel_join', async(bot, message) => {\n // send a welcome\n});\n```\n"
          },
          "children": [
            {
              "id": 224,
              "name": "onTurn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 225,
                  "name": "onTurn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Not for direct use - implements the MiddlewareSet's required onTurn function used to process the event"
                  },
                  "parameters": [
                    {
                      "id": 226,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 227,
                      "name": "next",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 228,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 229,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "slackevent_middleware.ts",
                              "line": 36,
                              "character": 51
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slackevent_middleware.ts",
                  "line": 36,
                  "character": 23
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                224
              ]
            }
          ],
          "sources": [
            {
              "fileName": "slackevent_middleware.ts",
              "line": 30,
              "character": 33
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 224,
              "name": "onTurn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 225,
                  "name": "onTurn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Not for direct use - implements the MiddlewareSet's required onTurn function used to process the event"
                  },
                  "parameters": [
                    {
                      "id": 226,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 227,
                      "name": "next",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 228,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 229,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "slackevent_middleware.ts",
                              "line": 36,
                              "character": 51
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "slackevent_middleware.ts",
                  "line": 36,
                  "character": 23
                }
              ]
            }
          ],
          "constructors": []
        },
        {
          "id": 215,
          "name": "SlackMessageTypeMiddleware",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "A middleware for Botkit developers using the BotBuilder SlackAdapter class.\nThis middleware causes Botkit to emit more specialized events for the different types of message that Slack might send.\nResponsible for classifying messages:",
            "text": "     * `direct_message` events are messages received through 1:1 direct messages with the bot\n     * `direct_mention` events are messages that start with a mention of the bot, i.e \"@mybot hello there\"\n     * `mention` events are messages that include a mention of the bot, but not at the start, i.e \"hello there @mybot\"\n\nIn addition, messages from bots and changing them to `bot_message` events. All other types of message encountered remain `message` events.\n\nTo use this, bind it to the adapter before creating the Botkit controller:\n```javascript\nconst adapter = new SlackAdapter(options);\nadapter.use(new SlackMessageTypeMiddleware());\nconst controller = new Botkit({\n     adapter: adapter,\n     // ...\n});\n```\n"
          },
          "children": [
            {
              "id": 216,
              "name": "onTurn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 217,
                  "name": "onTurn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Not for direct use - implements the MiddlewareSet's required onTurn function used to process the event"
                  },
                  "parameters": [
                    {
                      "id": 218,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 219,
                      "name": "next",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 220,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 221,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "messagetype_middleware.ts",
                              "line": 39,
                              "character": 51
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "messagetype_middleware.ts",
                  "line": 39,
                  "character": 23
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                216
              ]
            }
          ],
          "sources": [
            {
              "fileName": "messagetype_middleware.ts",
              "line": 33,
              "character": 39
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 216,
              "name": "onTurn",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 217,
                  "name": "onTurn",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Not for direct use - implements the MiddlewareSet's required onTurn function used to process the event"
                  },
                  "parameters": [
                    {
                      "id": 218,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {},
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 219,
                      "name": "next",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 220,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 221,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "messagetype_middleware.ts",
                              "line": 39,
                              "character": 51
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "messagetype_middleware.ts",
                  "line": 39,
                  "character": 23
                }
              ]
            }
          ],
          "constructors": []
        }
      ],
      "interfaces": [
        {
          "id": 132,
          "name": "AuthTestResult",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExternal": true
          },
          "children": [
            {
              "id": 137,
              "name": "ok",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 797,
                  "character": 6
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 134,
              "name": "team",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 794,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 135,
              "name": "team_id",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 795,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 133,
              "name": "user",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 793,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 136,
              "name": "user_id",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 796,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                137,
                134,
                135,
                133,
                136
              ]
            }
          ],
          "sources": [
            {
              "fileName": "slack_adapter.ts",
              "line": 792,
              "character": 24
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 137,
              "name": "ok",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 797,
                  "character": 6
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 134,
              "name": "team",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 794,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 135,
              "name": "team_id",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 795,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 133,
              "name": "user",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 793,
                  "character": 8
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 136,
              "name": "user_id",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 796,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 126,
          "name": "ChatPostMessageResult",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExternal": true
          },
          "children": [
            {
              "id": 127,
              "name": "channel",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 783,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 129,
              "name": "message",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 785,
                  "character": 11
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 130,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 131,
                      "name": "text",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "slack_adapter.ts",
                          "line": 786,
                          "character": 12
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Variables",
                      "kind": 32,
                      "children": [
                        131
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "slack_adapter.ts",
                      "line": 785,
                      "character": 12
                    }
                  ]
                }
              }
            },
            {
              "id": 128,
              "name": "ts",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 784,
                  "character": 6
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                127,
                129,
                128
              ]
            }
          ],
          "sources": [
            {
              "fileName": "slack_adapter.ts",
              "line": 782,
              "character": 31
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 127,
              "name": "channel",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 783,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 129,
              "name": "message",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 785,
                  "character": 11
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 130,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 131,
                      "name": "text",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "slack_adapter.ts",
                          "line": 786,
                          "character": 12
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Variables",
                      "kind": 32,
                      "children": [
                        131
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "slack_adapter.ts",
                      "line": 785,
                      "character": 12
                    }
                  ]
                }
              }
            },
            {
              "id": 128,
              "name": "ts",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 784,
                  "character": 6
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 108,
          "name": "SlackAdapterOptions",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This interface defines the options that can be passed into the SlackAdapter constructor function."
          },
          "children": [
            {
              "id": 111,
              "name": "botToken",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A token (provided by Slack) for a bot to work on a single workspace"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 739,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 112,
              "name": "clientId",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The oauth client id provided by Slack for multi-team apps"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 744,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 113,
              "name": "clientSecret",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The oauth client secret provided by Slack for multi-team apps"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 748,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 110,
              "name": "clientSigningSecret",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A token used to validate that incoming webhooks originated with Slack."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 735,
                  "character": 23
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 125,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 777,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 121,
              "name": "getBotUserByTeam",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A method that receives a Slack team id and returns the bot user id associated with that team. Required for multi-team apps."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 770,
                  "character": 20
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 122,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 123,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 124,
                          "name": "teamId",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ],
                        "name": "Promise"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "slack_adapter.ts",
                      "line": 770,
                      "character": 22
                    }
                  ]
                }
              }
            },
            {
              "id": 117,
              "name": "getTokenForTeam",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A method that receives a Slack team id and returns the bot token associated with that team. Required for multi-team apps."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 765,
                  "character": 19
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 118,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 119,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 120,
                          "name": "teamId",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ],
                        "name": "Promise"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "slack_adapter.ts",
                      "line": 765,
                      "character": 21
                    }
                  ]
                }
              }
            },
            {
              "id": 115,
              "name": "oauthVersion",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Which version of Slack's oauth protocol to use, v1 or v2. Defaults to v1."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 756,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 116,
              "name": "redirectUri",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The URL users will be redirected to after an oauth flow. In most cases, should be `https://<mydomain.com>/install/auth`"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 760,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 114,
              "name": "scopes",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A array of scope names that are being requested during the oauth process. Must match the scopes defined at api.slack.com"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 752,
                  "character": 10
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            },
            {
              "id": 109,
              "name": "verificationToken",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Legacy method for validating the origin of incoming webhooks. Prefer `clientSigningSecret` instead."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 731,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                111,
                112,
                113,
                110,
                125,
                121,
                117,
                115,
                116,
                114,
                109
              ]
            }
          ],
          "sources": [
            {
              "fileName": "slack_adapter.ts",
              "line": 727,
              "character": 36
            }
          ],
          "props": [
            {
              "id": 111,
              "name": "botToken",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A token (provided by Slack) for a bot to work on a single workspace"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 739,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 112,
              "name": "clientId",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The oauth client id provided by Slack for multi-team apps"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 744,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 113,
              "name": "clientSecret",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The oauth client secret provided by Slack for multi-team apps"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 748,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 110,
              "name": "clientSigningSecret",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A token used to validate that incoming webhooks originated with Slack."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 735,
                  "character": 23
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 125,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 777,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 121,
              "name": "getBotUserByTeam",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A method that receives a Slack team id and returns the bot user id associated with that team. Required for multi-team apps."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 770,
                  "character": 20
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 122,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 123,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 124,
                          "name": "teamId",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ],
                        "name": "Promise"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "slack_adapter.ts",
                      "line": 770,
                      "character": 22
                    }
                  ]
                }
              }
            },
            {
              "id": 117,
              "name": "getTokenForTeam",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A method that receives a Slack team id and returns the bot token associated with that team. Required for multi-team apps."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 765,
                  "character": 19
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 118,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 119,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 120,
                          "name": "teamId",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ],
                        "name": "Promise"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "slack_adapter.ts",
                      "line": 765,
                      "character": 21
                    }
                  ]
                }
              }
            },
            {
              "id": 115,
              "name": "oauthVersion",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Which version of Slack's oauth protocol to use, v1 or v2. Defaults to v1."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 756,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 116,
              "name": "redirectUri",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The URL users will be redirected to after an oauth flow. In most cases, should be `https://<mydomain.com>/install/auth`"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 760,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 114,
              "name": "scopes",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "A array of scope names that are being requested during the oauth process. Must match the scopes defined at api.slack.com"
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 752,
                  "character": 10
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            },
            {
              "id": 109,
              "name": "verificationToken",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Legacy method for validating the origin of incoming webhooks. Prefer `clientSigningSecret` instead."
              },
              "sources": [
                {
                  "fileName": "slack_adapter.ts",
                  "line": 731,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Botkit for Hangouts",
      "packageName": "botbuilder-adapter-hangouts",
      "path": "reference/hangouts.md",
      "classes": [
        {
          "id": 28,
          "name": "HangoutsAdapter",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Connect [Botkit](https://www.npmjs.com/package/botkit) or [BotBuilder](https://www.npmjs.com/package/botbuilder) to Google Hangouts"
          },
          "children": [
            {
              "id": 32,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create an adapter to handle incoming messages from Google Hangouts and translate them into a standard format for processing by your bot.",
                "text": "Use with Botkit:\n```javascript\nconst adapter = new HangoutsAdapter({\n     token: process.env.GOOGLE_TOKEN,\n     google_auth_params: {\n         credentials: process.env.GOOGLE_CREDS\n     }\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new HangoutsAdapter({\n     token: process.env.GOOGLE_TOKEN,\n     google_auth_params: {\n         credentials: process.env.GOOGLE_CREDS\n     }\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 33,
                  "name": "new HangoutsAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create an adapter to handle incoming messages from Google Hangouts and translate them into a standard format for processing by your bot.",
                    "text": "Use with Botkit:\n```javascript\nconst adapter = new HangoutsAdapter({\n     token: process.env.GOOGLE_TOKEN,\n     google_auth_params: {\n         credentials: process.env.GOOGLE_CREDS\n     }\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new HangoutsAdapter({\n     token: process.env.GOOGLE_TOKEN,\n     google_auth_params: {\n         credentials: process.env.GOOGLE_CREDS\n     }\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 34,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "An object containing API credentials and a webhook verification token\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 62,
                        "name": "HangoutsAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 28,
                    "name": "HangoutsAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 46,
                  "character": 21
                }
              ]
            },
            {
              "id": 47,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 48,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 49,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 50,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 51,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 52,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 53,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "hangouts_adapter.ts",
                              "line": 267,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 267,
                  "character": 37
                }
              ]
            },
            {
              "id": 43,
              "name": "deleteActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 44,
                  "name": "deleteActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to delete a previous message.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#deleteactivity)."
                  },
                  "parameters": [
                    {
                      "id": 45,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (Not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 46,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{activityId: <id of message to delete>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 243,
                  "character": 31
                }
              ]
            },
            {
              "id": 54,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 55,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 56,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 57,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 58,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 59,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 60,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 61,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "hangouts_adapter.ts",
                              "line": 284,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 284,
                  "character": 32
                }
              ]
            },
            {
              "id": 35,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 36,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 37,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (Not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 38,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 185,
                  "character": 31
                }
              ]
            },
            {
              "id": 39,
              "name": "updateActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 40,
                  "name": "updateActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to update a previous message with new content.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#updateactivity)."
                  },
                  "parameters": [
                    {
                      "id": 41,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (Not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 42,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The updated activity in the form `{id: <id of activity to update>, text: <updated text>, cards?: [<array of updated hangouts cards>]}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 212,
                  "character": 31
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                32
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                47,
                43,
                54,
                35,
                39
              ]
            }
          ],
          "sources": [
            {
              "fileName": "hangouts_adapter.ts",
              "line": 21,
              "character": 28
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 47,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 48,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 49,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 50,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 51,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 52,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 53,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "hangouts_adapter.ts",
                              "line": 267,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 267,
                  "character": 37
                }
              ]
            },
            {
              "id": 43,
              "name": "deleteActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 44,
                  "name": "deleteActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to delete a previous message.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#deleteactivity)."
                  },
                  "parameters": [
                    {
                      "id": 45,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (Not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 46,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{activityId: <id of message to delete>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 243,
                  "character": 31
                }
              ]
            },
            {
              "id": 54,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 55,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 56,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 57,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 58,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 59,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 60,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 61,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "hangouts_adapter.ts",
                              "line": 284,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 284,
                  "character": 32
                }
              ]
            },
            {
              "id": 35,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 36,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 37,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (Not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 38,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 185,
                  "character": 31
                }
              ]
            },
            {
              "id": 39,
              "name": "updateActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 40,
                  "name": "updateActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to update a previous message with new content.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#updateactivity)."
                  },
                  "parameters": [
                    {
                      "id": 41,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (Not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 42,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The updated activity in the form `{id: <id of activity to update>, text: <updated text>, cards?: [<array of updated hangouts cards>]}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 212,
                  "character": 31
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 32,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create an adapter to handle incoming messages from Google Hangouts and translate them into a standard format for processing by your bot.",
                "text": "Use with Botkit:\n```javascript\nconst adapter = new HangoutsAdapter({\n     token: process.env.GOOGLE_TOKEN,\n     google_auth_params: {\n         credentials: process.env.GOOGLE_CREDS\n     }\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new HangoutsAdapter({\n     token: process.env.GOOGLE_TOKEN,\n     google_auth_params: {\n         credentials: process.env.GOOGLE_CREDS\n     }\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 33,
                  "name": "new HangoutsAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create an adapter to handle incoming messages from Google Hangouts and translate them into a standard format for processing by your bot.",
                    "text": "Use with Botkit:\n```javascript\nconst adapter = new HangoutsAdapter({\n     token: process.env.GOOGLE_TOKEN,\n     google_auth_params: {\n         credentials: process.env.GOOGLE_CREDS\n     }\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new HangoutsAdapter({\n     token: process.env.GOOGLE_TOKEN,\n     google_auth_params: {\n         credentials: process.env.GOOGLE_CREDS\n     }\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 34,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "An object containing API credentials and a webhook verification token\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 62,
                        "name": "HangoutsAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 28,
                    "name": "HangoutsAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 46,
                  "character": 21
                }
              ]
            }
          ]
        },
        {
          "id": 2,
          "name": "HangoutsBotWorker",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This is a specialized version of [Botkit's core BotWorker class](#BotWorker) that includes additional methods for interacting with Google Hangouts.\nIt includes all functionality from the base class, as well as the extension methods below.",
            "text": "When using the HangoutsAdapter with Botkit, all `bot` objects passed to handler functions will include these extensions.\n"
          },
          "children": [
            {
              "id": 3,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Access to the official [Google API client for Hangouts](https://www.npmjs.com/package/googleapis)"
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 21,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            {
              "id": 7,
              "name": "deleteMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 8,
                  "name": "deleteMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Delete an existing message.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// delete the sent message using the sent.id field\nawait bot.deleteMessage(sent);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 9,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form of `{id: <id of message to delete>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 65,
                  "character": 30
                }
              ]
            },
            {
              "id": 18,
              "name": "replyInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 19,
                  "name": "replyInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to an incoming message in a brand new thread.  Works for a single message reply - if multiple replies or replying with a dialog is necessary, use [startConversationInThread](#startconversationinthread).",
                    "text": "```javascript\ncontroller.hears('thread','message', async(bot, message) =>{\n     await bot.replyInThread(message,'This will appear in a new thread.');\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 20,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message or event object"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 21,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A reply message containing text and/or cards\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 147,
                  "character": 30
                }
              ]
            },
            {
              "id": 10,
              "name": "replyWithNew",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 11,
                  "name": "replyWithNew",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to a card_click event with a new message. [See Google doc for interactive cards &rarr;](https://developers.google.com/hangouts/chat/how-tos/cards-onclick#responding_to_clicks_with_a_new_or_updated_message).",
                    "text": "When a user clicks a button contained in a card attachment, a `card_clicked` event will be emitted.\nIn order to reply to the incoming event with a new message (rather than replacing the original card), use this method!\n\n```javascript\ncontroller.on('card_clicked', async(bot, message) => {\n     // check message.action.actionMethodName to see what button was clicked...\n     await bot.replyWithNew(message,'Reply to button click!');\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 12,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming event object representing a card_clicked event"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 13,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A reply message containing text and/or cards\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 90,
                  "character": 29
                }
              ]
            },
            {
              "id": 14,
              "name": "replyWithUpdate",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 15,
                  "name": "replyWithUpdate",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to a card_click event with an update to the original message. [See Google doc for interactive cards &rarr;](https://developers.google.com/hangouts/chat/how-tos/cards-onclick#responding_to_clicks_with_a_new_or_updated_message).",
                    "text": "When a user clicks a button contained in a card attachment, a `card_clicked` event will be emitted.\nIn order to reply to the incoming event by replacing the original message, use this method!\n\n```javascript\ncontroller.on('card_clicked', async(bot, message) => {\n     // check message.action.actionMethodName to see what button was clicked...\n     await bot.replyWithUpdate(message,'Reply to button click!');\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 16,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming event object representing a card_clicked event"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 17,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A reply message containing text and/or cards\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 121,
                  "character": 32
                }
              ]
            },
            {
              "id": 22,
              "name": "startConversationInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 23,
                  "name": "startConversationInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch the bot's active context to a new thread.\nUse this to change the location of a bot's responses or calls to beginDialog into a new conversation thread (rather than continuing in the same thread as the originating message)",
                    "text": "```javascript\ncontroller.hears('new thread', 'message', async(bot, message) => {\n\n     // change to a new thread\n     await bot.startConversationInThread(message.channel, message.user);\n\n     // begin a dialog in the new thread\n     await bot.beginDialog('foo');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 24,
                      "name": "spaceName",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the main space - usually `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 25,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The id of the user conducting the conversation - usually `message.user`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 26,
                      "name": "threadKey",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "An optional key definining the thread - if one is not provided, a random one is generated.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 178,
                  "character": 42
                }
              ]
            },
            {
              "id": 4,
              "name": "updateMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "updateMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Update an existing message with new content.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// update the sent message using the sent.id field\nawait bot.updateMessage({\n     id: sent.id,\n     text: 'this is an update!',\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{id: <id of message to update>, text: <new text>, card: <array of card objects>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 39,
                  "character": 30
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                3
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                7,
                18,
                10,
                14,
                22,
                4
              ]
            }
          ],
          "sources": [
            {
              "fileName": "botworker.ts",
              "line": 17,
              "character": 30
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 3,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Access to the official [Google API client for Hangouts](https://www.npmjs.com/package/googleapis)"
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 21,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              }
            }
          ],
          "methods": [
            {
              "id": 7,
              "name": "deleteMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 8,
                  "name": "deleteMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Delete an existing message.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// delete the sent message using the sent.id field\nawait bot.deleteMessage(sent);\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 9,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form of `{id: <id of message to delete>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 65,
                  "character": 30
                }
              ]
            },
            {
              "id": 18,
              "name": "replyInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 19,
                  "name": "replyInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to an incoming message in a brand new thread.  Works for a single message reply - if multiple replies or replying with a dialog is necessary, use [startConversationInThread](#startconversationinthread).",
                    "text": "```javascript\ncontroller.hears('thread','message', async(bot, message) =>{\n     await bot.replyInThread(message,'This will appear in a new thread.');\n});\n```"
                  },
                  "parameters": [
                    {
                      "id": 20,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message or event object"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 21,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A reply message containing text and/or cards\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 147,
                  "character": 30
                }
              ]
            },
            {
              "id": 10,
              "name": "replyWithNew",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 11,
                  "name": "replyWithNew",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to a card_click event with a new message. [See Google doc for interactive cards &rarr;](https://developers.google.com/hangouts/chat/how-tos/cards-onclick#responding_to_clicks_with_a_new_or_updated_message).",
                    "text": "When a user clicks a button contained in a card attachment, a `card_clicked` event will be emitted.\nIn order to reply to the incoming event with a new message (rather than replacing the original card), use this method!\n\n```javascript\ncontroller.on('card_clicked', async(bot, message) => {\n     // check message.action.actionMethodName to see what button was clicked...\n     await bot.replyWithNew(message,'Reply to button click!');\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 12,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming event object representing a card_clicked event"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 13,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A reply message containing text and/or cards\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 90,
                  "character": 29
                }
              ]
            },
            {
              "id": 14,
              "name": "replyWithUpdate",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 15,
                  "name": "replyWithUpdate",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reply to a card_click event with an update to the original message. [See Google doc for interactive cards &rarr;](https://developers.google.com/hangouts/chat/how-tos/cards-onclick#responding_to_clicks_with_a_new_or_updated_message).",
                    "text": "When a user clicks a button contained in a card attachment, a `card_clicked` event will be emitted.\nIn order to reply to the incoming event by replacing the original message, use this method!\n\n```javascript\ncontroller.on('card_clicked', async(bot, message) => {\n     // check message.action.actionMethodName to see what button was clicked...\n     await bot.replyWithUpdate(message,'Reply to button click!');\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 16,
                      "name": "src",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming event object representing a card_clicked event"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 17,
                      "name": "resp",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A reply message containing text and/or cards\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 121,
                  "character": 32
                }
              ]
            },
            {
              "id": 22,
              "name": "startConversationInThread",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 23,
                  "name": "startConversationInThread",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Switch the bot's active context to a new thread.\nUse this to change the location of a bot's responses or calls to beginDialog into a new conversation thread (rather than continuing in the same thread as the originating message)",
                    "text": "```javascript\ncontroller.hears('new thread', 'message', async(bot, message) => {\n\n     // change to a new thread\n     await bot.startConversationInThread(message.channel, message.user);\n\n     // begin a dialog in the new thread\n     await bot.beginDialog('foo');\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 24,
                      "name": "spaceName",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the main space - usually `message.channel`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 25,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The id of the user conducting the conversation - usually `message.user`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 26,
                      "name": "threadKey",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true,
                        "isOptional": true
                      },
                      "comment": {
                        "text": "An optional key definining the thread - if one is not provided, a random one is generated.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 178,
                  "character": 42
                }
              ]
            },
            {
              "id": 4,
              "name": "updateMessage",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "updateMessage",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Update an existing message with new content.",
                    "text": "```javascript\n// send a reply, capture the results\nlet sent = await bot.reply(message,'this is my original reply...');\n\n// update the sent message using the sent.id field\nawait bot.updateMessage({\n     id: sent.id,\n     text: 'this is an update!',\n})\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "update",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object in the form `{id: <id of message to update>, text: <new text>, card: <array of card objects>}`\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 39,
                  "character": 30
                }
              ]
            }
          ],
          "constructors": []
        }
      ],
      "interfaces": [
        {
          "id": 62,
          "name": "HangoutsAdapterOptions",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "children": [
            {
              "id": 68,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 382,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 63,
              "name": "google_auth_params",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Parameters passed to the [Google API client library](https://www.npmjs.com/package/googleapis) which is in turn used to send messages.\nDefine credentials per [the GoogleAuthOptions defined here](https://github.com/googleapis/google-auth-library-nodejs/blob/master/src/auth/googleauth.ts#L54),\nOR, specify GOOGLE_APPLICATION_CREDENTIALS in environment [as described in the Google docs](https://cloud.google.com/docs/authentication/getting-started)."
              },
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 366,
                  "character": 22
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 64,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "children": [
                    {
                      "id": 65,
                      "name": "client_email",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExported": true,
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "hangouts_adapter.ts",
                          "line": 367,
                          "character": 20
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 66,
                      "name": "private_key",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExported": true,
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "hangouts_adapter.ts",
                          "line": 368,
                          "character": 19
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Variables",
                      "kind": 32,
                      "children": [
                        65,
                        66
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "hangouts_adapter.ts",
                      "line": 366,
                      "character": 24
                    }
                  ]
                }
              }
            },
            {
              "id": 67,
              "name": "token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Shared secret token used to validate the origin of incoming webhooks.\nGet this from the [Google API console for your bot app](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) - it is found on the Configuration tab under the heading \"Verification Token\".\nIf defined, the origin of all incoming webhooks will be validated and any non-matching requests will be rejected."
              },
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 375,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                68,
                63,
                67
              ]
            }
          ],
          "sources": [
            {
              "fileName": "hangouts_adapter.ts",
              "line": 360,
              "character": 39
            }
          ],
          "props": [
            {
              "id": 68,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 382,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 63,
              "name": "google_auth_params",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Parameters passed to the [Google API client library](https://www.npmjs.com/package/googleapis) which is in turn used to send messages.\nDefine credentials per [the GoogleAuthOptions defined here](https://github.com/googleapis/google-auth-library-nodejs/blob/master/src/auth/googleauth.ts#L54),\nOR, specify GOOGLE_APPLICATION_CREDENTIALS in environment [as described in the Google docs](https://cloud.google.com/docs/authentication/getting-started)."
              },
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 366,
                  "character": 22
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 64,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "children": [
                    {
                      "id": 65,
                      "name": "client_email",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExported": true,
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "hangouts_adapter.ts",
                          "line": 367,
                          "character": 20
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 66,
                      "name": "private_key",
                      "kind": 32,
                      "kindString": "Variable",
                      "flags": {
                        "isExported": true,
                        "isExternal": true,
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "hangouts_adapter.ts",
                          "line": 368,
                          "character": 19
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Variables",
                      "kind": 32,
                      "children": [
                        65,
                        66
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "hangouts_adapter.ts",
                      "line": 366,
                      "character": 24
                    }
                  ]
                }
              }
            },
            {
              "id": 67,
              "name": "token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Shared secret token used to validate the origin of incoming webhooks.\nGet this from the [Google API console for your bot app](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) - it is found on the Configuration tab under the heading \"Verification Token\".\nIf defined, the origin of all incoming webhooks will be validated and any non-matching requests will be rejected."
              },
              "sources": [
                {
                  "fileName": "hangouts_adapter.ts",
                  "line": 375,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Botkit for Twilio SMS",
      "packageName": "botbuilder-adapter-twilio-sms",
      "path": "reference/twilio-sms.md",
      "classes": [
        {
          "id": 8,
          "name": "TwilioAdapter",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Connect [Botkit](https://www.npmjs.com/package/botkit) or [BotBuilder](https://www.npmjs.com/package/botbuilder) to Twilio's SMS service."
          },
          "children": [
            {
              "id": 12,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create an adapter to handle incoming messages from Twilio's SMS service and translate them into a standard format for processing by your bot.",
                "text": "Use with Botkit:\n```javascript\nconst adapter = new TwilioAdapter({\n     twilio_number: process.env.TWILIO_NUMBER,\n     account_sid: process.env.TWILIO_ACCOUNT_SID,\n     auth_token: process.env.TWILIO_AUTH_TOKEN,\n     validation_url: process.env.TWILIO_VALIDATION_URL\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new TwilioAdapter({\n     twilio_number: process.env.TWILIO_NUMBER,\n     account_sid: process.env.TWILIO_ACCOUNT_SID,\n     auth_token: process.env.TWILIO_AUTH_TOKEN,\n     validation_url: process.env.TWILIO_VALIDATION_URL\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 13,
                  "name": "new TwilioAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create an adapter to handle incoming messages from Twilio's SMS service and translate them into a standard format for processing by your bot.",
                    "text": "Use with Botkit:\n```javascript\nconst adapter = new TwilioAdapter({\n     twilio_number: process.env.TWILIO_NUMBER,\n     account_sid: process.env.TWILIO_ACCOUNT_SID,\n     auth_token: process.env.TWILIO_AUTH_TOKEN,\n     validation_url: process.env.TWILIO_VALIDATION_URL\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new TwilioAdapter({\n     twilio_number: process.env.TWILIO_NUMBER,\n     account_sid: process.env.TWILIO_ACCOUNT_SID,\n     auth_token: process.env.TWILIO_AUTH_TOKEN,\n     validation_url: process.env.TWILIO_VALIDATION_URL\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 14,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "An object containing API credentials, a webhook verification token and other options\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 42,
                        "name": "TwilioAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 8,
                    "name": "TwilioAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 38,
                  "character": 31
                }
              ]
            },
            {
              "id": 27,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 28,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 29,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 30,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 31,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 32,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 33,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "twilio_adapter.ts",
                              "line": 209,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 209,
                  "character": 37
                }
              ]
            },
            {
              "id": 34,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 35,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 36,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 37,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 38,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 39,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 40,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 41,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "twilio_adapter.ts",
                              "line": 226,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 226,
                  "character": 32
                }
              ]
            },
            {
              "id": 15,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 16,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 17,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (Not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 18,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 168,
                  "character": 31
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                12
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                27,
                34,
                15
              ]
            }
          ],
          "sources": [
            {
              "fileName": "twilio_adapter.ts",
              "line": 18,
              "character": 26
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 27,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 28,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 29,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 30,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 31,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 32,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 33,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "twilio_adapter.ts",
                              "line": 209,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 209,
                  "character": 37
                }
              ]
            },
            {
              "id": 34,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 35,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 36,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 37,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 38,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 39,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 40,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 41,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "twilio_adapter.ts",
                              "line": 226,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 226,
                  "character": 32
                }
              ]
            },
            {
              "id": 15,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 16,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 17,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment. (Not used)"
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 18,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 168,
                  "character": 31
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 12,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create an adapter to handle incoming messages from Twilio's SMS service and translate them into a standard format for processing by your bot.",
                "text": "Use with Botkit:\n```javascript\nconst adapter = new TwilioAdapter({\n     twilio_number: process.env.TWILIO_NUMBER,\n     account_sid: process.env.TWILIO_ACCOUNT_SID,\n     auth_token: process.env.TWILIO_AUTH_TOKEN,\n     validation_url: process.env.TWILIO_VALIDATION_URL\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new TwilioAdapter({\n     twilio_number: process.env.TWILIO_NUMBER,\n     account_sid: process.env.TWILIO_ACCOUNT_SID,\n     auth_token: process.env.TWILIO_AUTH_TOKEN,\n     validation_url: process.env.TWILIO_VALIDATION_URL\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 13,
                  "name": "new TwilioAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create an adapter to handle incoming messages from Twilio's SMS service and translate them into a standard format for processing by your bot.",
                    "text": "Use with Botkit:\n```javascript\nconst adapter = new TwilioAdapter({\n     twilio_number: process.env.TWILIO_NUMBER,\n     account_sid: process.env.TWILIO_ACCOUNT_SID,\n     auth_token: process.env.TWILIO_AUTH_TOKEN,\n     validation_url: process.env.TWILIO_VALIDATION_URL\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // ... other configuration options\n});\n```\n\nUse with BotBuilder:\n```javascript\nconst adapter = new TwilioAdapter({\n     twilio_number: process.env.TWILIO_NUMBER,\n     account_sid: process.env.TWILIO_ACCOUNT_SID,\n     auth_token: process.env.TWILIO_AUTH_TOKEN,\n     validation_url: process.env.TWILIO_VALIDATION_URL\n});\n// set up restify...\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 14,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "An object containing API credentials, a webhook verification token and other options\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 42,
                        "name": "TwilioAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 8,
                    "name": "TwilioAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 38,
                  "character": 31
                }
              ]
            }
          ]
        },
        {
          "id": 2,
          "name": "TwilioBotWorker",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This is a specialized version of [Botkit's core BotWorker class](core.md#BotWorker) that includes additional methods for interacting with Twilio SMS.\nIt includes all functionality from the base class, as well as the extension methods below.",
            "text": "When using the TwilioAdapter with Botkit, all `bot` objects passed to handler functions will include these extensions.\n"
          },
          "children": [
            {
              "id": 3,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A copy of the Twilio API client."
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 22,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "Twilio.Twilio"
              }
            },
            {
              "id": 4,
              "name": "startConversationWithUser",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "startConversationWithUser",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Start a conversation with a given user identified by their phone number. Useful for sending pro-active messages:",
                    "text": "```javascript\nlet bot = await controller.spawn();\nawait bot.startConversationWithUser(MY_PHONE_NUMBER);\nawait bot.send('An important update!');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A phone number in the form +1XXXYYYZZZZ\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 35,
                  "character": 42
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                3
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                4
              ]
            }
          ],
          "sources": [
            {
              "fileName": "botworker.ts",
              "line": 18,
              "character": 31
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 3,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A copy of the Twilio API client."
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 22,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "Twilio.Twilio"
              }
            }
          ],
          "methods": [
            {
              "id": 4,
              "name": "startConversationWithUser",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "startConversationWithUser",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Start a conversation with a given user identified by their phone number. Useful for sending pro-active messages:",
                    "text": "```javascript\nlet bot = await controller.spawn();\nawait bot.startConversationWithUser(MY_PHONE_NUMBER);\nawait bot.send('An important update!');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A phone number in the form +1XXXYYYZZZZ\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 35,
                  "character": 42
                }
              ]
            }
          ],
          "constructors": []
        }
      ],
      "interfaces": [
        {
          "id": 42,
          "name": "TwilioAdapterOptions",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Parameters passed to the TwilioAdapter constructor."
          },
          "children": [
            {
              "id": 44,
              "name": "account_sid",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The account SID from the twilio account"
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 317,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 45,
              "name": "auth_token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An api auth token associated with the twilio account"
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 321,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 47,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 331,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 43,
              "name": "twilio_number",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The phone number associated with this Twilio app, in the format 1XXXYYYZZZZ"
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 313,
                  "character": 17
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 46,
              "name": "validation_url",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "An optional url to override the automatically generated url signature used to validate incoming requests -- [See Twilio docs about securing your endpoint.](https://www.twilio.com/docs/usage/security#validating-requests)"
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 325,
                  "character": 18
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                44,
                45,
                47,
                43,
                46
              ]
            }
          ],
          "sources": [
            {
              "fileName": "twilio_adapter.ts",
              "line": 309,
              "character": 37
            }
          ],
          "props": [
            {
              "id": 44,
              "name": "account_sid",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The account SID from the twilio account"
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 317,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 45,
              "name": "auth_token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "An api auth token associated with the twilio account"
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 321,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 47,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 331,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 43,
              "name": "twilio_number",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The phone number associated with this Twilio app, in the format 1XXXYYYZZZZ"
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 313,
                  "character": 17
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 46,
              "name": "validation_url",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "An optional url to override the automatically generated url signature used to validate incoming requests -- [See Twilio docs about securing your endpoint.](https://www.twilio.com/docs/usage/security#validating-requests)"
              },
              "sources": [
                {
                  "fileName": "twilio_adapter.ts",
                  "line": 325,
                  "character": 18
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Botkit for Facebook",
      "packageName": "botbuilder-adapter-facebook",
      "path": "reference/facebook.md",
      "classes": [
        {
          "id": 25,
          "name": "FacebookAdapter",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "Connect [Botkit](https://www.npmjs.com/package/botkit) or [BotBuilder](https://www.npmjs.com/package/botbuilder) to Facebook Messenger."
          },
          "children": [
            {
              "id": 29,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create an adapter to handle incoming messages from Facebook and translate them into a standard format for processing by your bot.",
                "text": "The Facebook Adapter can be used in 2 modes:\n* bound to a single Facebook page\n* multi-tenancy mode able to serve multiple pages\n\nTo create an app bound to a single Facebook page, include that page's `access_token` in the options.\n\nTo create an app that can be bound to multiple pages, include `getAccessTokenForPage` - a function in the form `async (pageId) => page_access_token`\n\nTo use with Botkit:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n     access_token: process.env.FACEBOOK_ACCESS_TOKEN\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // other options\n});\n```\n\nTo use with BotBuilder:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n     access_token: process.env.FACEBOOK_ACCESS_TOKEN\n});\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n\nIn multi-tenancy mode:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n      getAccessTokenForPage: async(pageId) => {\n          // do something to fetch the page access token for pageId.\n          return token;\n      })\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 30,
                  "name": "new FacebookAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create an adapter to handle incoming messages from Facebook and translate them into a standard format for processing by your bot.",
                    "text": "The Facebook Adapter can be used in 2 modes:\n* bound to a single Facebook page\n* multi-tenancy mode able to serve multiple pages\n\nTo create an app bound to a single Facebook page, include that page's `access_token` in the options.\n\nTo create an app that can be bound to multiple pages, include `getAccessTokenForPage` - a function in the form `async (pageId) => page_access_token`\n\nTo use with Botkit:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n     access_token: process.env.FACEBOOK_ACCESS_TOKEN\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // other options\n});\n```\n\nTo use with BotBuilder:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n     access_token: process.env.FACEBOOK_ACCESS_TOKEN\n});\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n\nIn multi-tenancy mode:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n      getAccessTokenForPage: async(pageId) => {\n          // do something to fetch the page access token for pageId.\n          return token;\n      })\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 31,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "Configuration options\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 65,
                        "name": "FacebookAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 25,
                    "name": "FacebookAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 38,
                  "character": 44
                }
              ]
            },
            {
              "id": 50,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 51,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 52,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 53,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 54,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 55,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 56,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "facebook_adapter.ts",
                              "line": 323,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 323,
                  "character": 37
                }
              ]
            },
            {
              "id": 35,
              "name": "getAPI",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 36,
                  "name": "getAPI",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a Facebook API client with the correct credentials based on the page identified in the incoming activity.\nThis is used by many internal functions to get access to the Facebook API, and is exposed as `bot.api` on any BotWorker instances passed into Botkit handler functions.",
                    "text": "```javascript\nlet api = adapter.getAPI(activity);\nlet res = api.callAPI('/me/messages', 'POST', message);\n```"
                  },
                  "parameters": [
                    {
                      "id": 37,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message activity\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 2,
                        "name": "FacebookAPI"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 174,
                  "character": 23
                }
              ]
            },
            {
              "id": 32,
              "name": "init",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 33,
                  "name": "init",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Botkit-only: Initialization function called automatically when used with Botkit.\n     * Amends the webhook_uri with an additional behavior for responding to Facebook's webhook verification request."
                  },
                  "parameters": [
                    {
                      "id": 34,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 149,
                  "character": 21
                }
              ]
            },
            {
              "id": 57,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 58,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 59,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 60,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 61,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 62,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 63,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 64,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "facebook_adapter.ts",
                              "line": 340,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 340,
                  "character": 32
                }
              ]
            },
            {
              "id": 38,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 39,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 40,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 41,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 274,
                  "character": 31
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                29
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                50,
                35,
                32,
                57,
                38
              ]
            }
          ],
          "sources": [
            {
              "fileName": "facebook_adapter.ts",
              "line": 19,
              "character": 28
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 50,
              "name": "continueConversation",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 51,
                  "name": "continueConversation",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)"
                  },
                  "parameters": [
                    {
                      "id": 52,
                      "name": "reference",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A conversation reference to be applied to future messages."
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "ConversationReference"
                          }
                        ],
                        "name": "Partial"
                      }
                    },
                    {
                      "id": 53,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function that will perform continuing action in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 54,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 55,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 56,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "facebook_adapter.ts",
                              "line": 323,
                              "character": 87
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 323,
                  "character": 37
                }
              ]
            },
            {
              "id": 35,
              "name": "getAPI",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 36,
                  "name": "getAPI",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Get a Facebook API client with the correct credentials based on the page identified in the incoming activity.\nThis is used by many internal functions to get access to the Facebook API, and is exposed as `bot.api` on any BotWorker instances passed into Botkit handler functions.",
                    "text": "```javascript\nlet api = adapter.getAPI(activity);\nlet res = api.callAPI('/me/messages', 'POST', message);\n```"
                  },
                  "parameters": [
                    {
                      "id": 37,
                      "name": "activity",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message activity\n"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "Activity"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 2,
                        "name": "FacebookAPI"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 174,
                  "character": 23
                }
              ]
            },
            {
              "id": 32,
              "name": "init",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 33,
                  "name": "init",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Botkit-only: Initialization function called automatically when used with Botkit.\n     * Amends the webhook_uri with an additional behavior for responding to Facebook's webhook verification request."
                  },
                  "parameters": [
                    {
                      "id": 34,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 149,
                  "character": 21
                }
              ]
            },
            {
              "id": 57,
              "name": "processActivity",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 58,
                  "name": "processActivity",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic."
                  },
                  "parameters": [
                    {
                      "id": 59,
                      "name": "req",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A request object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 60,
                      "name": "res",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A response object from Restify or Express"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 61,
                      "name": "logic",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A bot logic function in the form `async(context) => { ... }`\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 62,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 63,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 64,
                                  "name": "context",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "TurnContext"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "facebook_adapter.ts",
                              "line": 340,
                              "character": 49
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 340,
                  "character": 32
                }
              ]
            },
            {
              "id": 38,
              "name": "sendActivities",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 39,
                  "name": "sendActivities",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Standard BotBuilder adapter method to send a message from the bot to the messaging API.\n[BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities)."
                  },
                  "parameters": [
                    {
                      "id": 40,
                      "name": "context",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A TurnContext representing the current incoming message and environment."
                      },
                      "type": {
                        "type": "reference",
                        "name": "TurnContext"
                      }
                    },
                    {
                      "id": 41,
                      "name": "activities",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An array of outgoing activities to be sent back to the messaging API.\n"
                      },
                      "type": {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "typeArguments": [
                            {
                              "type": "reference",
                              "name": "Activity"
                            }
                          ],
                          "name": "Partial"
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "array",
                        "elementType": {
                          "type": "reference",
                          "name": "ResourceResponse"
                        }
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 274,
                  "character": 31
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 29,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create an adapter to handle incoming messages from Facebook and translate them into a standard format for processing by your bot.",
                "text": "The Facebook Adapter can be used in 2 modes:\n* bound to a single Facebook page\n* multi-tenancy mode able to serve multiple pages\n\nTo create an app bound to a single Facebook page, include that page's `access_token` in the options.\n\nTo create an app that can be bound to multiple pages, include `getAccessTokenForPage` - a function in the form `async (pageId) => page_access_token`\n\nTo use with Botkit:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n     access_token: process.env.FACEBOOK_ACCESS_TOKEN\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // other options\n});\n```\n\nTo use with BotBuilder:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n     access_token: process.env.FACEBOOK_ACCESS_TOKEN\n});\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n\nIn multi-tenancy mode:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n      getAccessTokenForPage: async(pageId) => {\n          // do something to fetch the page access token for pageId.\n          return token;\n      })\n});\n```\n"
              },
              "signatures": [
                {
                  "id": 30,
                  "name": "new FacebookAdapter",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create an adapter to handle incoming messages from Facebook and translate them into a standard format for processing by your bot.",
                    "text": "The Facebook Adapter can be used in 2 modes:\n* bound to a single Facebook page\n* multi-tenancy mode able to serve multiple pages\n\nTo create an app bound to a single Facebook page, include that page's `access_token` in the options.\n\nTo create an app that can be bound to multiple pages, include `getAccessTokenForPage` - a function in the form `async (pageId) => page_access_token`\n\nTo use with Botkit:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n     access_token: process.env.FACEBOOK_ACCESS_TOKEN\n});\nconst controller = new Botkit({\n     adapter: adapter,\n     // other options\n});\n```\n\nTo use with BotBuilder:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n     access_token: process.env.FACEBOOK_ACCESS_TOKEN\n});\nconst server = restify.createServer();\nserver.use(restify.plugins.bodyParser());\nserver.post('/api/messages', (req, res) => {\n     adapter.processActivity(req, res, async(context) => {\n         // do your bot logic here!\n     });\n});\n```\n\nIn multi-tenancy mode:\n```javascript\nconst adapter = new FacebookAdapter({\n     verify_token: process.env.FACEBOOK_VERIFY_TOKEN,\n     app_secret: process.env.FACEBOOK_APP_SECRET,\n      getAccessTokenForPage: async(pageId) => {\n          // do something to fetch the page access token for pageId.\n          return token;\n      })\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 31,
                      "name": "options",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "Configuration options\n"
                      },
                      "type": {
                        "type": "reference",
                        "id": 65,
                        "name": "FacebookAdapterOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 25,
                    "name": "FacebookAdapter"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 38,
                  "character": 44
                }
              ]
            }
          ]
        },
        {
          "id": 15,
          "name": "FacebookBotWorker",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This is a specialized version of [Botkit's core BotWorker class](core.md#BotWorker) that includes additional methods for interacting with Facebook.\nIt includes all functionality from the base class, as well as the extension methods below.",
            "text": "When using the FacebookAdapter with Botkit, all `bot` objects passed to handler functions will include these extensions.\n"
          },
          "children": [
            {
              "id": 17,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Reserved for use internally by Botkit's `controller.spawn()`, this class is used to create a BotWorker instance that can send messages, replies, and make other API calls.",
                "text": "When used with the FacebookAdapter's multi-tenancy mode, it is possible to spawn a bot instance by passing in the Facebook page ID representing the appropriate bot identity.\nUse this in concert with [startConversationWithUser()](#startConversationWithUser) and [changeContext()](core.md#changecontext) to start conversations\nor send proactive alerts to users on a schedule or in response to external events.\n\n```javascript\nlet bot = await controller.spawn(FACEBOOK_PAGE_ID);\n```"
              },
              "signatures": [
                {
                  "id": 18,
                  "name": "new FacebookBotWorker",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reserved for use internally by Botkit's `controller.spawn()`, this class is used to create a BotWorker instance that can send messages, replies, and make other API calls.",
                    "text": "When used with the FacebookAdapter's multi-tenancy mode, it is possible to spawn a bot instance by passing in the Facebook page ID representing the appropriate bot identity.\nUse this in concert with [startConversationWithUser()](#startConversationWithUser) and [changeContext()](core.md#changecontext) to start conversations\nor send proactive alerts to users on a schedule or in response to external events.\n\n```javascript\nlet bot = await controller.spawn(FACEBOOK_PAGE_ID);\n```"
                  },
                  "parameters": [
                    {
                      "id": 19,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "The Botkit controller object responsible for spawning this bot worker."
                      },
                      "type": {
                        "type": "reference",
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 20,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "Normally, a DialogContext object.  Can also be the ID of a Facebook page managed by this app.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 15,
                    "name": "FacebookBotWorker"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 22,
                  "character": 28
                }
              ]
            },
            {
              "id": 16,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A copy of the FacebookAPI client giving access to `let res = await bot.api.callAPI(path, method, parameters);`"
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 22,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "id": 2,
                "name": "FacebookAPI"
              }
            },
            {
              "id": 21,
              "name": "startConversationWithUser",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 22,
                  "name": "startConversationWithUser",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Change the operating context of the worker to begin a conversation with a specific user.\nAfter calling this method, any calls to `bot.say()` or `bot.beginDialog()` will occur in this new context.",
                    "text": "This method can be used to send users scheduled messages or messages triggered by external events.\n```javascript\nlet bot = await controller.spawn(FACEBOOK_PAGE_ID);\nawait bot.startConversationWithUser(FACEBOOK_USER_PSID);\nawait bot.say('Howdy human!');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 23,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the PSID of a user the bot has previously interacted with\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 70,
                  "character": 42
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                17
              ]
            },
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                16
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                21
              ]
            }
          ],
          "sources": [
            {
              "fileName": "botworker.ts",
              "line": 18,
              "character": 30
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "props": [
            {
              "id": 16,
              "name": "api",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "A copy of the FacebookAPI client giving access to `let res = await bot.api.callAPI(path, method, parameters);`"
              },
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 22,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "id": 2,
                "name": "FacebookAPI"
              }
            }
          ],
          "methods": [
            {
              "id": 21,
              "name": "startConversationWithUser",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 22,
                  "name": "startConversationWithUser",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Change the operating context of the worker to begin a conversation with a specific user.\nAfter calling this method, any calls to `bot.say()` or `bot.beginDialog()` will occur in this new context.",
                    "text": "This method can be used to send users scheduled messages or messages triggered by external events.\n```javascript\nlet bot = await controller.spawn(FACEBOOK_PAGE_ID);\nawait bot.startConversationWithUser(FACEBOOK_USER_PSID);\nawait bot.say('Howdy human!');\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 23,
                      "name": "userId",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "the PSID of a user the bot has previously interacted with\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 70,
                  "character": 42
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 17,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Reserved for use internally by Botkit's `controller.spawn()`, this class is used to create a BotWorker instance that can send messages, replies, and make other API calls.",
                "text": "When used with the FacebookAdapter's multi-tenancy mode, it is possible to spawn a bot instance by passing in the Facebook page ID representing the appropriate bot identity.\nUse this in concert with [startConversationWithUser()](#startConversationWithUser) and [changeContext()](core.md#changecontext) to start conversations\nor send proactive alerts to users on a schedule or in response to external events.\n\n```javascript\nlet bot = await controller.spawn(FACEBOOK_PAGE_ID);\n```"
              },
              "signatures": [
                {
                  "id": 18,
                  "name": "new FacebookBotWorker",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Reserved for use internally by Botkit's `controller.spawn()`, this class is used to create a BotWorker instance that can send messages, replies, and make other API calls.",
                    "text": "When used with the FacebookAdapter's multi-tenancy mode, it is possible to spawn a bot instance by passing in the Facebook page ID representing the appropriate bot identity.\nUse this in concert with [startConversationWithUser()](#startConversationWithUser) and [changeContext()](core.md#changecontext) to start conversations\nor send proactive alerts to users on a schedule or in response to external events.\n\n```javascript\nlet bot = await controller.spawn(FACEBOOK_PAGE_ID);\n```"
                  },
                  "parameters": [
                    {
                      "id": 19,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "The Botkit controller object responsible for spawning this bot worker."
                      },
                      "type": {
                        "type": "reference",
                        "name": "Botkit"
                      }
                    },
                    {
                      "id": 20,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "Normally, a DialogContext object.  Can also be the ID of a Facebook page managed by this app.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 15,
                    "name": "FacebookBotWorker"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "botworker.ts",
                  "line": 22,
                  "character": 28
                }
              ]
            }
          ]
        },
        {
          "id": 2,
          "name": "FacebookAPI",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "A simple API client for the Facebook API.  Automatically signs requests with the access token and app secret proof.\nIt can be used to call any API provided by Facebook."
          },
          "children": [
            {
              "id": 3,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a FacebookAPI client.\n```\nlet api = new FacebookAPI(TOKEN, SECRET);\nawait api.callAPI('/some/api','POST', {some_options});\n```"
              },
              "signatures": [
                {
                  "id": 4,
                  "name": "new FacebookAPI",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a FacebookAPI client.\n```\nlet api = new FacebookAPI(TOKEN, SECRET);\nawait api.callAPI('/some/api','POST', {some_options});\n```"
                  },
                  "parameters": [
                    {
                      "id": 5,
                      "name": "token",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "a page access token"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 6,
                      "name": "secret",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "an app secret"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 7,
                      "name": "api_host",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "optional root hostname for constructing api calls, defaults to graph.facebook.com"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"graph.facebook.com\""
                    },
                    {
                      "id": 8,
                      "name": "api_version",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "optional api version used when constructing api calls, defaults to v3.2\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"v3.2\""
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "FacebookAPI"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_api.ts",
                  "line": 21,
                  "character": 32
                }
              ]
            },
            {
              "id": 9,
              "name": "callAPI",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 10,
                  "name": "callAPI",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Call one of the Facebook APIs"
                  },
                  "parameters": [
                    {
                      "id": 11,
                      "name": "path",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Path to the API endpoint, for example `/me/messages`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 12,
                      "name": "method",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "HTTP method, for example POST, GET, DELETE or PUT."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"POST\""
                    },
                    {
                      "id": 13,
                      "name": "payload",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object to be sent as parameters to the API call.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      },
                      "defaultValue": "{}"
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_api.ts",
                  "line": 50,
                  "character": 24
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                3
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                9
              ]
            }
          ],
          "sources": [
            {
              "fileName": "facebook_api.ts",
              "line": 17,
              "character": 24
            }
          ],
          "props": [],
          "methods": [
            {
              "id": 9,
              "name": "callAPI",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 10,
                  "name": "callAPI",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Call one of the Facebook APIs"
                  },
                  "parameters": [
                    {
                      "id": 11,
                      "name": "path",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "Path to the API endpoint, for example `/me/messages`"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 12,
                      "name": "method",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "HTTP method, for example POST, GET, DELETE or PUT."
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"POST\""
                    },
                    {
                      "id": 13,
                      "name": "payload",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An object to be sent as parameters to the API call.\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      },
                      "defaultValue": "{}"
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_api.ts",
                  "line": 50,
                  "character": 24
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 3,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Create a FacebookAPI client.\n```\nlet api = new FacebookAPI(TOKEN, SECRET);\nawait api.callAPI('/some/api','POST', {some_options});\n```"
              },
              "signatures": [
                {
                  "id": 4,
                  "name": "new FacebookAPI",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Create a FacebookAPI client.\n```\nlet api = new FacebookAPI(TOKEN, SECRET);\nawait api.callAPI('/some/api','POST', {some_options});\n```"
                  },
                  "parameters": [
                    {
                      "id": 5,
                      "name": "token",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "a page access token"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 6,
                      "name": "secret",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "an app secret"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 7,
                      "name": "api_host",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "optional root hostname for constructing api calls, defaults to graph.facebook.com"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"graph.facebook.com\""
                    },
                    {
                      "id": 8,
                      "name": "api_version",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "shortText": "optional api version used when constructing api calls, defaults to v3.2\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "defaultValue": "\"v3.2\""
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "FacebookAPI"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "facebook_api.ts",
                  "line": 21,
                  "character": 32
                }
              ]
            }
          ]
        },
        {
          "id": 78,
          "name": "FacebookEventTypeMiddleware",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This adapter middleware, when used in conjunction with FacebookAdapter and Botkit, will result in Botkit emitting events with\nnames based on their event type.",
            "text": "```javascript\nconst adapter = new FacebookAdapter(MY_OPTIONS);\nadapter.use(new FacebookEventTypeMiddleware());\nconst controller = new Botkit({\n     adapter: adapter,\n});\n\n// define a handler for one of the new events\ncontroller.on('facebook_option', async(bot, message) => {\n     // ...\n});\n```\n\nWhen used, events emitted may include:\n* facebook_postback\n* facebook_referral\n* facebook_optin\n* message_delivered\n* message_read\n* facebook_account_linking\n* message_echo\n* facebook_app_roles\n* standby\n* facebook_receive_thread_control\n* facebook_request_thread_control\n\n"
          },
          "sources": [
            {
              "fileName": "facebook_event_middleware.ts",
              "line": 42,
              "character": 40
            }
          ],
          "extendedTypes": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ]
        }
      ],
      "interfaces": [
        {
          "id": 65,
          "name": "FacebookAdapterOptions",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "This interface defines the options that can be passed into the FacebookAdapter constructor function."
          },
          "children": [
            {
              "id": 70,
              "name": "access_token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "When bound to a single page, use `access_token` to specify the \"page access token\" provided in the Facebook developer portal's \"Access Tokens\" widget of the \"Messenger Settings\" page."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 476,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 66,
              "name": "api_host",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Alternate root url used to contruct calls to Facebook's API.  Defaults to 'graph.facebook.com' but can be changed (for mocking, proxy, etc)."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 457,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 67,
              "name": "api_version",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Alternate API version used to construct calls to Facebook's API. Defaults to v3.2"
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 461,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 69,
              "name": "app_secret",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The \"app secret\" from the \"basic settings\" page from your app's configuration in the Facebook developer portal"
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 471,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 75,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 488,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 71,
              "name": "getAccessTokenForPage",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "When bound to multiple teams, provide a function that, given a page id, will return the page access token for that page."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 481,
                  "character": 25
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 72,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 73,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 74,
                          "name": "pageId",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ],
                        "name": "Promise"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "facebook_adapter.ts",
                      "line": 481,
                      "character": 27
                    }
                  ]
                }
              }
            },
            {
              "id": 68,
              "name": "verify_token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The \"verify token\" used to initially create and verify the Webhooks subscription settings on Facebook's developer portal."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 466,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                70,
                66,
                67,
                69,
                75,
                71,
                68
              ]
            }
          ],
          "sources": [
            {
              "fileName": "facebook_adapter.ts",
              "line": 453,
              "character": 39
            }
          ],
          "props": [
            {
              "id": 70,
              "name": "access_token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "When bound to a single page, use `access_token` to specify the \"page access token\" provided in the Facebook developer portal's \"Access Tokens\" widget of the \"Messenger Settings\" page."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 476,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 66,
              "name": "api_host",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Alternate root url used to contruct calls to Facebook's API.  Defaults to 'graph.facebook.com' but can be changed (for mocking, proxy, etc)."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 457,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 67,
              "name": "api_version",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Alternate API version used to construct calls to Facebook's API. Defaults to v3.2"
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 461,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 69,
              "name": "app_secret",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The \"app secret\" from the \"basic settings\" page from your app's configuration in the Facebook developer portal"
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 471,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 75,
              "name": "enable_incomplete",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Allow the adapter to startup without a complete configuration.\nThis is risky as it may result in a non-functioning or insecure adapter.\nThis should only be used when getting started."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 488,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 71,
              "name": "getAccessTokenForPage",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "When bound to multiple teams, provide a function that, given a page id, will return the page access token for that page."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 481,
                  "character": 25
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 72,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "signatures": [
                    {
                      "id": 73,
                      "name": "__call",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {
                        "isExported": true
                      },
                      "parameters": [
                        {
                          "id": 74,
                          "name": "pageId",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isExported": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        ],
                        "name": "Promise"
                      }
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "facebook_adapter.ts",
                      "line": 481,
                      "character": 27
                    }
                  ]
                }
              }
            },
            {
              "id": 68,
              "name": "verify_token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "The \"verify token\" used to initially create and verify the Webhooks subscription settings on Facebook's developer portal."
              },
              "sources": [
                {
                  "fileName": "facebook_adapter.ts",
                  "line": 466,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Botkit CMS Plugin",
      "packageName": "botkit-plugin-cms",
      "path": "reference/cms.md",
      "classes": [
        {
          "id": 2,
          "name": "BotkitCMSHelper",
          "kind": 128,
          "kindString": "Class",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "comment": {
            "shortText": "A plugin for Botkit that provides access to an instance of [Botkit CMS](https://github.com/howdyai/botkit-cms), including the ability to load script content into a DialogSet\nand bind before, after and onChange handlers to those dynamically imported dialogs by name.",
            "text": "```javascript\ncontroller.use(new BotkitCMSHelper({\n     uri: process.env.CMS_URI,\n     token: process.env.CMS_TOKEN\n}));\n\n// use the cms to test remote triggers\ncontroller.on('message', async(bot, message) => {\n  await controller.plugins.cms.testTrigger(bot, message);\n});\n```\n"
          },
          "children": [
            {
              "id": 4,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "new BotkitCMSHelper",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "id": 44,
                        "name": "CMSOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "BotkitCMSHelper"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 39,
                  "character": 31
                }
              ]
            },
            {
              "id": 3,
              "name": "name",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Botkit Plugin name"
              },
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 39,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "\"Botkit CMS\""
            },
            {
              "id": 36,
              "name": "after",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 37,
                  "name": "after",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler function that will fire after a given dialog ends.\nProvides a way to use BotkitConversation.after() on dialogs loaded dynamically via the CMS api instead of being created in code.",
                    "text": "```javascript\ncontroller.plugins.cms.after('my_script', async(results, bot) => {\n\nconsole.log('my_script just ended! here are the results', results);\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 38,
                      "name": "script_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 39,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A handler function in the form async(results, bot) => {}\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 40,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 41,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 42,
                                  "name": "results",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 43,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "cms.ts",
                              "line": 316,
                              "character": 46
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 316,
                  "character": 16
                }
              ]
            },
            {
              "id": 17,
              "name": "before",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 18,
                  "name": "before",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler function that will fire before a given script and thread begin.\nProvides a way to use BotkitConversation.before() on dialogs loaded dynamically via the CMS api instead of being created in code.",
                    "text": "```javascript\ncontroller.cms.before('my_script','my_thread', async(convo, bot) => {\n\n // do stuff\n console.log('starting my_thread as part of my_script');\n // other stuff including convo.setVar convo.gotoThread\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 19,
                      "name": "script_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 20,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of a thread within the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 21,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A handler function in the form async(convo, bot) => {}\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 22,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 23,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 24,
                                  "name": "convo",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotkitDialogWrapper"
                                  }
                                },
                                {
                                  "id": 25,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "cms.ts",
                              "line": 267,
                              "character": 68
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 267,
                  "character": 17
                }
              ]
            },
            {
              "id": 7,
              "name": "init",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 8,
                  "name": "init",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Botkit plugin init function\nAutoloads all scripts into the controller's main dialogSet."
                  },
                  "parameters": [
                    {
                      "id": 9,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Botkit controller object\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 68,
                  "character": 15
                }
              ]
            },
            {
              "id": 10,
              "name": "loadAllScripts",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 11,
                  "name": "loadAllScripts",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load all script content from the configured CMS instance into a DialogSet and prepare them to be used."
                  },
                  "parameters": [
                    {
                      "id": 12,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "name": "Botkit"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 143,
                  "character": 31
                }
              ]
            },
            {
              "id": 26,
              "name": "onChange",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 27,
                  "name": "onChange",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler function that will fire when a given variable is set within a a given script.\nProvides a way to use BotkitConversation.onChange() on dialogs loaded dynamically via the CMS api instead of being created in code.",
                    "text": "```javascript\ncontroller.plugins.cms.onChange('my_script','my_variable', async(new_value, convo, bot) => {\n\nconsole.log('A new value got set for my_variable inside my_script: ', new_value);\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 28,
                      "name": "script_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 29,
                      "name": "variable_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of a variable within the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 30,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A handler function in the form async(value, convo, bot) => {}\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 31,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 32,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 33,
                                  "name": "value",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 34,
                                  "name": "convo",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotkitDialogWrapper"
                                  }
                                },
                                {
                                  "id": 35,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "cms.ts",
                              "line": 292,
                              "character": 72
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 292,
                  "character": 19
                }
              ]
            },
            {
              "id": 13,
              "name": "testTrigger",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 14,
                  "name": "testTrigger",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Uses the Botkit CMS trigger API to test an incoming message against a list of predefined triggers.\nIf a trigger is matched, the appropriate dialog will begin immediately.",
                    "returns": "Returns false if a dialog is NOT triggered, otherwise returns void.\n"
                  },
                  "parameters": [
                    {
                      "id": 15,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The current bot worker instance"
                      },
                      "type": {
                        "type": "reference",
                        "name": "BotWorker"
                      }
                    },
                    {
                      "id": 16,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message to be interpretted"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 241,
                  "character": 28
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "kind": 512,
              "children": [
                4
              ]
            },
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                3
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                36,
                17,
                7,
                10,
                26,
                13
              ]
            }
          ],
          "sources": [
            {
              "fileName": "cms.ts",
              "line": 32,
              "character": 28
            }
          ],
          "props": [
            {
              "id": 3,
              "name": "name",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "comment": {
                "shortText": "Botkit Plugin name"
              },
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 39,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "\"Botkit CMS\""
            }
          ],
          "methods": [
            {
              "id": 36,
              "name": "after",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 37,
                  "name": "after",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler function that will fire after a given dialog ends.\nProvides a way to use BotkitConversation.after() on dialogs loaded dynamically via the CMS api instead of being created in code.",
                    "text": "```javascript\ncontroller.plugins.cms.after('my_script', async(results, bot) => {\n\nconsole.log('my_script just ended! here are the results', results);\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 38,
                      "name": "script_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 39,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A handler function in the form async(results, bot) => {}\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 40,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 41,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 42,
                                  "name": "results",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 43,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "cms.ts",
                              "line": 316,
                              "character": 46
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 316,
                  "character": 16
                }
              ]
            },
            {
              "id": 17,
              "name": "before",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 18,
                  "name": "before",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler function that will fire before a given script and thread begin.\nProvides a way to use BotkitConversation.before() on dialogs loaded dynamically via the CMS api instead of being created in code.",
                    "text": "```javascript\ncontroller.cms.before('my_script','my_thread', async(convo, bot) => {\n\n // do stuff\n console.log('starting my_thread as part of my_script');\n // other stuff including convo.setVar convo.gotoThread\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 19,
                      "name": "script_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 20,
                      "name": "thread_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of a thread within the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 21,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A handler function in the form async(convo, bot) => {}\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 22,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 23,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 24,
                                  "name": "convo",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotkitDialogWrapper"
                                  }
                                },
                                {
                                  "id": 25,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "cms.ts",
                              "line": 267,
                              "character": 68
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 267,
                  "character": 17
                }
              ]
            },
            {
              "id": 7,
              "name": "init",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 8,
                  "name": "init",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Botkit plugin init function\nAutoloads all scripts into the controller's main dialogSet."
                  },
                  "parameters": [
                    {
                      "id": 9,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A Botkit controller object\n"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 68,
                  "character": 15
                }
              ]
            },
            {
              "id": 10,
              "name": "loadAllScripts",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 11,
                  "name": "loadAllScripts",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Load all script content from the configured CMS instance into a DialogSet and prepare them to be used."
                  },
                  "parameters": [
                    {
                      "id": 12,
                      "name": "botkit",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "name": "Botkit"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "void"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 143,
                  "character": 31
                }
              ]
            },
            {
              "id": 26,
              "name": "onChange",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 27,
                  "name": "onChange",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Bind a handler function that will fire when a given variable is set within a a given script.\nProvides a way to use BotkitConversation.onChange() on dialogs loaded dynamically via the CMS api instead of being created in code.",
                    "text": "```javascript\ncontroller.plugins.cms.onChange('my_script','my_variable', async(new_value, convo, bot) => {\n\nconsole.log('A new value got set for my_variable inside my_script: ', new_value);\n\n});\n```\n"
                  },
                  "parameters": [
                    {
                      "id": 28,
                      "name": "script_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 29,
                      "name": "variable_name",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The name of a variable within the script to bind to"
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    },
                    {
                      "id": 30,
                      "name": "handler",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "A handler function in the form async(value, convo, bot) => {}\n"
                      },
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 31,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExported": true
                          },
                          "signatures": [
                            {
                              "id": 32,
                              "name": "__call",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExported": true
                              },
                              "parameters": [
                                {
                                  "id": 33,
                                  "name": "value",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "intrinsic",
                                    "name": "any"
                                  }
                                },
                                {
                                  "id": 34,
                                  "name": "convo",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotkitDialogWrapper"
                                  }
                                },
                                {
                                  "id": 35,
                                  "name": "bot",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExported": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "name": "BotWorker"
                                  }
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "void"
                                  }
                                ],
                                "name": "Promise"
                              }
                            }
                          ],
                          "sources": [
                            {
                              "fileName": "cms.ts",
                              "line": 292,
                              "character": 72
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 292,
                  "character": 19
                }
              ]
            },
            {
              "id": 13,
              "name": "testTrigger",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 14,
                  "name": "testTrigger",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExported": true
                  },
                  "comment": {
                    "shortText": "Uses the Botkit CMS trigger API to test an incoming message against a list of predefined triggers.\nIf a trigger is matched, the appropriate dialog will begin immediately.",
                    "returns": "Returns false if a dialog is NOT triggered, otherwise returns void.\n"
                  },
                  "parameters": [
                    {
                      "id": 15,
                      "name": "bot",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "The current bot worker instance"
                      },
                      "type": {
                        "type": "reference",
                        "name": "BotWorker"
                      }
                    },
                    {
                      "id": 16,
                      "name": "message",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "comment": {
                        "text": "An incoming message to be interpretted"
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "name": "BotkitMessage"
                          }
                        ],
                        "name": "Partial"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "name": "Promise"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 241,
                  "character": 28
                }
              ]
            }
          ],
          "constructors": [
            {
              "id": 4,
              "name": "constructor",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isPublic": true,
                "isExported": true,
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 5,
                  "name": "new BotkitCMSHelper",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExported": true
                  },
                  "parameters": [
                    {
                      "id": 6,
                      "name": "config",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExported": true
                      },
                      "type": {
                        "type": "reference",
                        "id": 44,
                        "name": "CMSOptions"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 2,
                    "name": "BotkitCMSHelper"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 39,
                  "character": 31
                }
              ]
            }
          ]
        }
      ],
      "interfaces": [
        {
          "id": 44,
          "name": "CMSOptions",
          "kind": 256,
          "kindString": "Interface",
          "flags": {
            "isExported": true,
            "isExternal": true
          },
          "children": [
            {
              "id": 47,
              "name": "controller",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 329,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "Botkit"
              }
            },
            {
              "id": 46,
              "name": "token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 328,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 45,
              "name": "uri",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 327,
                  "character": 7
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                47,
                46,
                45
              ]
            }
          ],
          "sources": [
            {
              "fileName": "cms.ts",
              "line": 326,
              "character": 27
            }
          ],
          "props": [
            {
              "id": 47,
              "name": "controller",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true,
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 329,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "Botkit"
              }
            },
            {
              "id": 46,
              "name": "token",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 328,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 45,
              "name": "uri",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExported": true,
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "cms.ts",
                  "line": 327,
                  "character": 7
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        }
      ]
    }
  ],
  "adapters": [
    {
      "name": "Websocket and Webhooks",
      "path": "platforms/web.md"
    },
    {
      "name": "Webex Teams",
      "path": "platforms/webex.md"
    },
    {
      "name": "Slack",
      "path": "platforms/slack.md"
    },
    {
      "name": "Google Hangouts",
      "path": "platforms/hangouts.md"
    },
    {
      "name": "Twilio SMS",
      "path": "platforms/twilio-sms.md"
    },
    {
      "name": "Facebook Messenger",
      "path": "platforms/facebook.md"
    }
  ],
  "plugins": [
    {
      "name": "Botkit CMS Plugin",
      "path": "plugins/cms.md"
    }
  ]
}